<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>9596-1637048431853</coId><text>创建一个自己的镜像</text><inline-styles><font-size><from>0</from><to>9</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>7088-1637048461154</coId><resource-list/><content>{"cells":[{"value":"# 1. 编写Dockerfile的文件\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# cat mydockerfile-centos \nFROM centos\nMAINTAINER xiaofan&lt;594042358@qq.com&gt;\n \nENV MYPATH /usr/local\nWORKDIR $MYPATH     # 镜像的工作目录\n \nRUN yum -y install vim\nRUN yum -y install net-tools\n \nEXPOSE 80\n \nCMD echo $MYPATH\nCMD echo \"---end---\"\nCMD /bin/bash\n \n# 2. 通过这个文件构建镜像\n# 命令 docker build -f dockerfile文件路径 -t 镜像名:[tag] .\n \n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .\n \nSuccessfully built d2d9f0ea8cb2\nSuccessfully tagged mycentos:0.1"}],"heights":[41.06667709350586],"widths":[620]}</content><styles/></table><para><coId>2211-1637048684393</coId><text/><inline-styles/><styles/></para><image><coId>5676-1637048684393</coId><source>https://note.youdao.com/yws/res/15022/2D4D357CB83947B1874FFFBD33E2392C</source><text/><styles><width>620</width><height>346</height></styles></image><para><coId>4581-1637048693646</coId><text/><inline-styles/><styles/></para><image><coId>7670-1637048693646</coId><source>https://note.youdao.com/yws/res/15024/D050BED95F794E159E45EC3900551D07</source><text/><styles><width>620</width><height>173</height></styles></image><para><coId>2456-1637048475577</coId><text>CMD 和ENTRYPOINT区别</text><inline-styles><font-size><from>0</from><to>17</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>9587-1637050325353</coId><resource-list/><content>{"cells":[{"value":"# 1. 编写dockerfile文件\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# vim dockerfile-cmd-test \nFROM centos\nCMD [\"ls\", \"-a\"]\n \n# 2. 构建镜像\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .\n \n# 3. run运行， 发现我们的ls -a 命令生效\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker run ebe6a52bb125\n.\n..\n.dockerenv\nbin\ndev\netc\nhome\nlib\nlib64\n \n# 想追加一个命令 -l 变成 ls -al\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker run ebe6a52bb125 -l\ndocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"exec: \\\"-l\\\": executable file not found in $PATH\": unknown.\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker run ebe6a52bb125 ls -l\n \n# cmd的情况下 -l替换了CMD[\"ls\", \"-a\"]命令， -l不是命令，所以报错了"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>7794-1637050335697</coId><text/><inline-styles/><styles/></para><table><coId>1770-1637050335697</coId><resource-list/><content>{"cells":[{"value":"# 1. 编写dockerfile文件\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# vim dockerfile-entrypoint-test \nFROM centos\nENTRYPOINT [\"ls\", \"-a\"]\n \n# 2. 构建文件\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypoint-test .\n \n# 3. run运行 发现我们的ls -a 命令同样生效\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker run entrypoint-test\n.\n..\n.dockerenv\nbin\ndev\netc\nhome\nlib\n \n# 4. 我们的追加命令， 是直接拼接到ENTRYPOINT命令的后面的！\n[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker run entrypoint-test -l\ntotal 56\ndrwxr-xr-x  1 root root 4096 Aug 13 07:52 .\ndrwxr-xr-x  1 root root 4096 Aug 13 07:52 ..\n-rwxr-xr-x  1 root root    0 Aug 13 07:52 .dockerenv\nlrwxrwxrwx  1 root root    7 May 11  2019 bin -&gt; usr/bin\ndrwxr-xr-x  5 root root  340 Aug 13 07:52 dev\ndrwxr-xr-x  1 root root 4096 Aug 13 07:52 etc\ndrwxr-xr-x  2 root root 4096 May 11  2019 home\nlrwxrwxrwx  1 root root    7 May 11  2019 lib -&gt; usr/lib\nlrwxrwxrwx  1 root root    9 May 11  2019 lib64 -&gt; usr/lib64\ndrwx------  2 root root 4096 Aug  9 21:40 lost+found\n "}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>3365-1637050332417</coId><text>CMD         # 指定这个容器启动的时候要运行的命令，只有最后一个会生效可被替代</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6542-1637048707709</coId><text>ENTRYPOINT      # 指定这个容器启动的时候要运行的命令， 可以追加命令</text><inline-styles><font-size><from>0</from><to>43</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6377-1637048475730</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>3394-1637050466989</coId><styles/></horizontal-line><para><coId>4736-1637050468218</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>8082-1637050468218</coId><styles/></horizontal-line><para><coId>1619-1637050460247</coId><text/><inline-styles/><styles/></para><para><coId>6751-1637050460382</coId><text>Tomcat</text><inline-styles><font-size><from>0</from><to>6</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1090-1637050469879</coId><text>1.准备镜像文件 tomcat压缩包，jdk的压缩包！</text><inline-styles><font-size><from>0</from><to>27</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7873-1637050500818</coId><text>2.编写dockerfile问件，官方命名dockerfile，build会自动寻找这个文件，就不需要-f制定了</text><inline-styles><font-size><from>0</from><to>56</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>5574-1637050567409</coId><resource-list/><content>{"cells":[{"value":"[root@iZ2zeg4ytp0whqtmxbsqiiZ tomcat]# cat Dockerfile \nFROM centos\nMAINTAINER xiaofan&lt;594042358@qq.com&gt;\n \nCOPY readme.txt /usr/local/readme.txt\n \nADD jdk-8u73-linux-x64.tar.gz /usr/local/\nADD apache-tomcat-9.0.37.tar.gz /usr/local/\n \nRUN yum -y install vim\n \nENV MYPATH /usr/local\nWORKDIR $MYPATH\n \nENV JAVA_HOME /usr/local/jdk1.8.0_73\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nENV CATALINA_HOME /usr/local/apache-tomcat-9.0.37\nENV CATALINA_BASH /usr/local/apache-tomcat-9.0.37\nENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\n \nEXPOSE 8080\n \nCMD /usr/local/apache-tomcat-9.0.37/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.37/bin/logs/catalina.out\n "}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>1028-1637050470417</coId><text>3.构建镜像</text><inline-styles><font-size><from>0</from><to>6</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3827-1637051456808</coId><text># docker build -t diytomcat .</text><inline-styles><font-size><from>0</from><to>29</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1381-1637051461500</coId><text/><inline-styles/><styles/></para><para><coId>3166-1637050470448</coId><text>4.启动镜像</text><inline-styles><font-size><from>0</from><to>6</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5459-1637051470193</coId><text>#  docker run -d -p 3344:8080 --name xiaofantomcat1 -v /home/xiaofan/build/tomcat/test:/usr/local/apache-tomcat-9.0.37/webapps/test -v /home/xiaofan/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.37/logs diytomcat</text><inline-styles><font-size><from>0</from><to>220</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4040-1637051473704</coId><text/><inline-styles/><styles/></para><para><coId>4250-1637051475233</coId><text>5.访问测试，发布项目 </text><inline-styles><font-size><from>0</from><to>12</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9229-1637050470479</coId><text>在本地编写web.xml和index.jsp进行测试</text><inline-styles><bold><from>0</from><to>26</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>16</value></font-size><color><from>0</from><to>26</to><value>#4d4d4d</value></color><back-color><from>0</from><to>26</to><value>#ffffff</value></back-color></inline-styles><styles><line-height>1.625</line-height></styles></para><image><coId>6040-1637063367930</coId><source>https://note.youdao.com/yws/res/15051/10B32BF1ACCB497A86578788087A5DBF</source><text/><styles><width>557</width><height>267</height></styles></image><para><coId>5387-1637063376105</coId><text/><inline-styles/><styles/></para><table><coId>4016-1637063376105</coId><resource-list/><content>{"cells":[{"value":"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app version=\"2.4\" \n    xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n        \n&lt;/web-app&gt;"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>4895-1637063387259</coId><text/><inline-styles/><styles/></para><table><coId>4098-1637063387259</coId><resource-list/><content>{"cells":[{"value":"&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;hello. xiaofan&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nHello World!&lt;br/&gt;\n&lt;%\nSystem.out.println(\"-----my test web logs------\");\n%&gt;\n&lt;/body&gt;\n&lt;/html&gt;"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>6615-1637050470588</coId><text/><inline-styles/><styles/></para><para><coId>6010-1637050470620</coId><text/><inline-styles/><styles/></para><para><coId>8930-1637050470652</coId><text/><inline-styles/><styles/></para><para><coId>3387-1637050460504</coId><text/><inline-styles/><styles/></para></body></note>
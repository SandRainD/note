{"2":"1","3":"Ju9C-1621846617594","4":{"version":1,"incompatibleVersion":0,"fv":"0"},"5":[{"3":"3060-1621846615933","5":[{"2":"2","3":"p5PQ-1621846617594","7":[{"8":"在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"并发操作进行控制 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，因此产生了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。同时 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁机制 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"也为实现MySQL的各个隔离级别提供了保证。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁冲突 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"也是影响数据库 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"并发访问性能 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"pWzp-1659231244438","5":[{"2":"2","3":"mO1I-1659231244426","7":[{"8":"在数据库中，除传统的计算资源〈如CPU、RAM、I/o等)的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对并发操作进行控制，因此产生了锁。同时锁机制也为实现MysQL的各个隔离级别提供了保证。锁冲突也是影响数据库并发访问性能的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。"}]}]},{"3":"OXfN-1659231244737","4":{"l":"h1"},"5":[{"2":"2","3":"x5iM-1659231244735","7":[{"8":"MySQL","9":[{"0":"#34495e","2":"c"}]},{"8":"并发事务访问相同记录","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"AIuc-1659231244833","4":{"l":"h3"},"5":[{"2":"2","3":"6roz-1659231244831","7":[{"8":"读","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"-","9":[{"0":"#34495e","2":"c"}]},{"8":"读情况 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"uwlA-1659232336186","4":{"version":1},"5":[{"2":"2","3":"qVjD-1659232336185","7":[{"8":"读","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"情况，即并发事务相继 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读取相同的记录 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"tZ1z-1659232336191","4":{"l":"h3"},"5":[{"2":"2","3":"4oZP-1659232336190","7":[{"8":"写","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"-","9":[{"0":"#34495e","2":"c"}]},{"8":"写情况 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"mBEQ-1659232336193","4":{"version":1},"5":[{"2":"2","3":"0jkf-1659232336192","7":[{"8":"写","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"情况，即并发事务相继对相同的记录做出改动。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"LDpZ-1659232336196","4":{"version":1},"5":[{"2":"2","3":"cinO-1659232336195","7":[{"8":"在这种情况下会发生 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"脏写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"排队执行 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，这个排队的过程其实是通过 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"来实现的。这个所谓的锁其实是一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"内存中的结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，在事务执行前本来是没有锁的，也就是说一开始是没有 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"和记录进行关联的，","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"tSuZ-1659231244932","5":[{"2":"2","3":"04yo-1659231244929","7":[{"8":"当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，当没有的时候就会在内存中生成一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"与之关联。比如，事务 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"T1 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"要对这条记录做改动，就需要生成一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"与之关联：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Z8Rb-1659234044306","4":{"version":1,"u":"https://note.youdao.com/yws/res/2/WEBRESOURCE48d6c7251fce433935a156036e0824c2","w":439,"h":170},"6":"im"},{"3":"yfaV-1659231245106","5":[{"2":"2","3":"l2NO-1659231245104","7":[{"8":"在锁结构里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来:"}]}]},{"3":"nUTw-1659234072171","4":{"li":"61TL-1659234077329","lt":"unordered","ll":1},"5":[{"2":"2","3":"UPQo-1659234072169","7":[{"8":"trx信息∶代表这个锁结构是哪个事务生成的。"}]}],"6":"l"},{"3":"1YvD-1659234070121","4":{"li":"61TL-1659234077329","lt":"unordered","ll":1},"5":[{"2":"2","3":"Ik1j-1659234070120","7":[{"8":"is_waiting :代表当前事务是否在等待。"}]}],"6":"l"},{"3":"qFIf-1659231245189","5":[{"2":"2","3":"8s7r-1659231245186","7":[{"8":"当事务T1改动了这条记录后，就生成了一个锁结构与该记录关联，因为之前没有别的事务为这条记录加锁，所以is_waiting属性就是false，我们把这个场景就称之为获取锁成功，或者加锁成功，然后就可以继续执行操作了。"}]}]},{"3":"ShMT-1659234096700","4":{"version":1},"5":[{"2":"2","3":"uwTW-1659234096699","7":[{"8":"在事务T1提交之前，另一个事务T2也想对该记录做改动，那么先看看有没有锁结构与这条记录关联，发现有一个锁结构与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的is_waiting属性值为true,表示当前事务需要等待，我们把这个场景就称之为获取锁失败，或者加锁失败，图示:"}]}]},{"3":"imZ2-1659234128320","4":{"version":1,"u":"https://note.youdao.com/yws/res/a/WEBRESOURCEc27c8df244ced91058b45725e04eeaba","w":435,"h":270},"6":"im"},{"3":"UnFn-1659231245368","5":[{"2":"2","3":"JVdp-1659231245366","7":[{"8":"在事务T1提交之后，就会把该事务生成的锁结构释放掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的is_waiting属性设置为false，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。"}]}]},{"3":"I3Yb-1659231245491","4":{"l":"h5"},"5":[{"2":"2","3":"Qqjj-1659231245489","7":[{"8":"小结","9":[{"0":"#000000","2":"c"}]}]}],"6":"h"},{"3":"6Q2G-1659231245579","4":{"li":"WeMx-1659234432386","lt":"unordered","ll":1},"5":[{"2":"2","3":"19J6-1659231245577","7":[{"8":"不加锁"}]}],"6":"l"},{"3":"47Pv-1659234418704","4":{"version":1},"5":[{"2":"2","3":"OO1M-1659234418703","7":[{"8":"意思就是不需要在内存中生成对应的锁结构，可以直接执行操作。"}]}]},{"3":"C5gq-1659234426582","4":{"li":"D3FJ-1659234434024","lt":"unordered","ll":1},"5":[{"2":"2","3":"k4HT-1659234426579","7":[{"8":"获取锁成功，或者加锁成功"}]}],"6":"l"},{"3":"ve2O-1659234418706","4":{"version":1},"5":[{"2":"2","3":"QZGI-1659234418705","7":[{"8":"意思就是在内存中生成了对应的锁结构，而且锁结构的is_waiting属性为false，也就是事务可以继续执行操作。"}]}]},{"3":"tpsu-1659234418708","4":{"li":"PhA6-1659234435308","lt":"unordered","ll":1},"5":[{"2":"2","3":"THIb-1659234418707","7":[{"8":"获取锁失败，或者加锁失败，或者没有获取到锁"}]}],"6":"l"},{"3":"CzhQ-1659234418710","4":{"version":1},"5":[{"2":"2","3":"uu0M-1659234418709","7":[{"8":"意思就是在内存中生成了对应的锁结构，不过锁结构的is_waiting属性为true，也就是事务需要等待，不可以继续执行操作。"}]}]},{"3":"mHYe-1659231255565","4":{"l":"h3"},"5":[{"2":"2","3":"D1AU-1659231255562","7":[{"8":"读","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"-","9":[{"0":"#34495e","2":"c"}]},{"8":"写或写","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"-","9":[{"0":"#34495e","2":"c"}]},{"8":"读情况 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"eowM-1659231256066","5":[{"2":"2","3":"siZ8-1659231256063","7":[{"8":"读","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"或 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"写","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"脏读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不可重复读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"幻读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的问题。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"f6jx-1659234564328","4":{"version":1},"5":[{"2":"2","3":"ySpj-1659234564326","7":[{"8":"各个数据库厂商对 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"SQL","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"标准 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的支持都可能不一样。比如MySQL在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"REPEATABLE READ ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隔离级别上就已经解决了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"幻读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"问题","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"zhzM-1659235111959","4":{"l":"h3"},"5":[{"2":"2","3":"Bfli-1659235111958","7":[{"8":"并发问题的解决方案","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Ai8B-1659231256252","5":[{"2":"2","3":"WDNi-1659231256249","7":[{"8":"怎么解决 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"脏读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不可重复读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"幻读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"这些问题呢？其实有两种可选的解决方案：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"7nUR-1659231256341","4":{"l":"h6","s":{"in":0}},"5":[{"2":"2","3":"LCTF-1659231256338","7":[{"8":"方案一：读操作利用多版本并发控制（ ","9":[{"0":"#34495e","2":"c"}]},{"8":"MVCC ","9":[{"0":"#e96900","2":"c"}]},{"8":"，下章讲解），写操作进行 ","9":[{"0":"#34495e","2":"c"}]},{"8":"加锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"fAgu-1659231256434","5":[{"2":"2","3":"vXj4-1659231256432","7":[{"8":"所谓的MVCC，就是生成一个"},{"8":"ReadView","9":[{"0":"#E96900FF","2":"c"}]},{"8":"，通过ReadView找到符合条件的记录版本（历史版本由undo日志构建)。查询语句只能读到在生成ReadView之前已提交事务所做的更改，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而写操作肯定针对的是最新版本的记录，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，读-写操作并不冲突。"}]}]},{"3":"PIcq-1659231256542","5":[{"2":"2","3":"N9RX-1659231256541","7":[{"8":"普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。","9":[{"0":"#777777","2":"c"}]}]}]},{"3":"qKu6-1659236816562","4":{"version":1},"5":[{"2":"2","3":"ankz-1659236816561","7":[{"8":"在 ","9":[{"0":"#777777","2":"c"}]},{"8":"READ COMMITTED ","9":[{"0":"#e96900","2":"c"}]},{"8":"隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了 ","9":[{"0":"#777777","2":"c"}]},{"8":"事务不可以读取到未提交的事务所做的更改 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"，也就是避免了脏读现象；","9":[{"0":"#777777","2":"c"}]}]}]},{"3":"jrqK-1659236816568","4":{"version":1},"5":[{"2":"2","3":"xQng-1659236816567","7":[{"8":"在 ","9":[{"0":"#777777","2":"c"}]},{"8":"REPEATABLE READ ","9":[{"0":"#e96900","2":"c"}]},{"8":"隔离级别下，一个事务在执行过程中只有 ","9":[{"0":"#777777","2":"c"}]},{"8":"第一次执行","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"SELECT","9":[{"0":"#e96900","2":"c"}]},{"8":"操作 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"才会生成一个ReadView，之后的SELECT操作都 ","9":[{"0":"#777777","2":"c"}]},{"8":"复用 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"这个ReadView，这样也就避免了不可重复读和幻读的问题。","9":[{"0":"#777777","2":"c"}]}]}]},{"3":"7Gx7-1659236864771","4":{"l":"h6"},"5":[{"2":"2","3":"vp5V-1659236864769","7":[{"8":"方案二：读、写操作都采用 ","9":[{"0":"#34495e","2":"c"}]},{"8":"加锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"的方式。","9":[{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"qCfw-1659236870162","4":{"version":1},"5":[{"2":"2","3":"EdZ8-1659236870160","7":[{"8":"如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去读取记录的最新版本。比如，在银行存款的事务中，你需要先把账户的余额读出来，然后将其加上本次存款的数额，最后再写到数据库中。在将账户余额读取出来后，就不想让别的事务再访问该余额，直到本次存款事务执行完成，其他事务才可以访问账户的余额。这样在读取记录的时候就需要对其进行加锁操作，这样也就意味着读操作和写操作也像写-写操作那样排队执行。"}]}]},{"3":"k63F-1659236866398","4":{"l":"h6"},"5":[{"2":"2","3":"JonG-1659236866395","7":[{"8":"小结对比发现：","9":[{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Wm21-1659237441101","4":{"li":"Pbpz-1659237464190","lt":"unordered","ll":1},"5":[{"2":"2","3":"KOM4-1659237441100","7":[{"8":"采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"MVCC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"方式的话， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"操作彼此并不冲突， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"性能更高 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Mvrd-1659237441105","4":{"li":"Pbpz-1659237464190","lt":"unordered","ll":1},"5":[{"2":"2","3":"Zb1K-1659237441103","7":[{"8":"采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"加锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"方式的话， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"操作彼此需要 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"排队执行 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，影响性能。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"RfIB-1659237441108","4":{"version":1},"5":[{"2":"2","3":"VWPj-1659237441106","7":[{"8":"一般情况下我们当然愿意采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"MVCC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"来解决 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"-","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"加锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的方式执行。下面就讲解下MySQL中不同类别的锁。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"hzc1-1659236871294","4":{"l":"h1"},"5":[{"2":"2","3":"RG2m-1659236871292","7":[{"8":"锁的不同角度分类","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"y9Xj-1659236871799","4":{"l":"h2"},"5":[{"2":"2","3":"PLa2-1659236871798","7":[{"8":"从数据操作的类型划分：读锁、写锁 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"ymMx-1659238070330","4":{"version":1},"5":[{"2":"2","3":"fS4W-1659238070331","7":[{"8":"对于数据库中并发事务的读-读情况并不会引起什么问题。对于写-写`、读-写或写-读这些情况可能会引起一些问题，需要使用WVCC或者加锁的方式来解决它们。在使用加锁的方式解决问题时，由于既要允许读-读情况不受影响，又要使写-写、读-写或写-读情况中的操作"},{"8":"相互阻塞","9":[{"0":"#E96900FF","2":"c"}]},{"8":"，所以MysQL实现一个由两种类型的锁组成的锁系统来解决。这两种类型的锁通常被称为"},{"8":"共享锁(Shared Lock，SLock)","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"和"},{"8":"排他锁(Exclusive Lock，X Lock)","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":" ，也叫"},{"8":"读锁(readlock)","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"和","9":[{"0":"#000000","2":"c"}]},{"8":"写锁(write lock)","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":" 。"}]}]},{"3":"DdEW-1659236871911","4":{"li":"5sYV-1659237985930","lt":"unordered","ll":1},"5":[{"2":"2","3":"t1PK-1659236871908","7":[{"8":"读锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：也称为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"共享锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、英文用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"S ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"VrhT-1659237980219","4":{"li":"5sYV-1659237985930","lt":"unordered","ll":1},"5":[{"2":"2","3":"QoVo-1659237980218","7":[{"8":"写锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：也称为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"排他锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、英文用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"JALz-1659236871996","4":{"version":1},"5":[{"2":"2","3":"Nq6d-1659236871994","7":[{"8":"需要注意的是对于 ","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"InnoDB ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"引擎来说，读锁和写锁可以加在表上，也可以加在行上。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"P42B-1659236872101","4":{"l":"h3"},"5":[{"2":"2","3":"FNeL-1659236872099","7":[{"8":"锁定读"}]}],"6":"h"},{"3":"3W0H-1659238875425","4":{"version":1},"5":[{"2":"2","3":"96rA-1659238875426","7":[{"8":"在采用加锁方式解决脏读、不可重复读、幻读这些问题时，读取一条记录时需要获取该记录的S锁，其实是不严谨的，有时候需要在读取记录时就获取记录的x锁，来禁止别的事务读写该记录，为此MysQL提出了两种比较特殊的SELECT语句格式:"}]}]},{"3":"pNn2-1659238935368","4":{"version":1},"5":[{"2":"2","3":"Ez5D-1659238935365","7":[{"8":"对读取的记录加S锁："}]}]},{"3":"Ular-1659238968333","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"E9dC-1659238968332","5":[{"2":"2","3":"EdCn-1659238964833","7":[{"8":"SELECT ... LOCK IN SHARE MODE;"}]}],"6":"cl"},{"3":"WOwq-1659238983865","5":[{"2":"2","3":"VRP4-1659238983863","7":[{"8":"SELECT ... FOR SHARE;"}]}],"6":"cl"}],"6":"cd"},{"3":"HDKR-1659238935761","4":{"version":1},"5":[{"2":"2","3":"255V-1659238935759","7":[{"8":"对读取的记录加X锁："}]}]},{"3":"779s-1659239336072","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"DPns-1659239336070","5":[{"2":"2","3":"ZBxl-1659239332917","7":[{"8":"SELECT ... FOR UPDATE;"}]}],"6":"cl"}],"6":"cd"},{"3":"4KNI-1659238935909","4":{"version":1},"5":[{"2":"2","3":"uo0s-1659238935908","7":[{"8":"MySQL8.0新特性:","9":[{"0":"#A00E0EFF","2":"c"}]}]}]},{"3":"2Akq-1659239701170","4":{"version":1},"5":[{"2":"2","3":"T4G8-1659239701169","7":[{"8":"在5.7及之前的版本，SELECT ... FOR UPDATE，如果获取不到锁，会一直等待，直到"},{"8":"innodb_lock_wait_timeput","9":[{"0":"#E96900FF","2":"c"}]},{"8":"超时。在8.0版本中，SELECT ... FOR UPDATE，SELECT ... FOR SHARE后添加"},{"8":"NOWAIT、SKIP LOCKED","9":[{"0":"#E96900FF","2":"c"}]},{"8":"语法，跳过锁等待，或者跳过锁定。"}]}]},{"3":"Ntr0-1659238936058","4":{"version":1},"5":[{"2":"2","3":"tAp5-1659238936056","7":[{"8":"通过添加NOWAIT、SKIP LOCKED语法，能够立即返回。如果查询的行已经加锁:"}]}]},{"3":"E9EH-1659239817407","4":{"li":"QlFl-1659239820467","lt":"unordered","ll":1},"5":[{"2":"2","3":"G5GV-1659239817404","7":[{"8":"那么NOWAIT会立即报错返回"}]}],"6":"l"},{"3":"eeLT-1659239812427","4":{"li":"QlFl-1659239820467","lt":"unordered","ll":1},"5":[{"2":"2","3":"gwyn-1659239812426","7":[{"8":"而SKIP LOCKED也会立即返回，只是返回的结果中不包含被锁定的行"}]}],"6":"l"},{"3":"zaIt-1659236872215","4":{"l":"h3"},"5":[{"2":"2","3":"5D7m-1659236872212","7":[{"8":"写操作"}]}],"6":"h"},{"3":"0E7j-1659236872302","4":{"li":"hi73-1659245995426","lt":"unordered","ll":1},"5":[{"2":"2","3":"FFwu-1659236872300","7":[{"8":"DELETE:对一条记录做DELETE操作的过程其实是先在B+树中定位到这条记录的位置，然后获取这条记录的X锁，再执行delete mark 操作。我们也可以把这个定位待删除记录在B+树中位置的过程看成是一个获取X锁的锁定读。"}]}],"6":"l"},{"3":"wTr4-1659245979256","4":{"li":"XE7g-1659246021821","lt":"unordered","ll":1,"s":{"in":0}},"5":[{"2":"2","3":"TAOw-1659245979255","7":[{"8":"UPDATE∶在对一条记录做UPDATE操作时分为三种情况:"}]}],"6":"l"},{"3":"f4Ef-1659245979259","4":{"li":"XE7g-1659246021821","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"TSL7-1659245979258","7":[{"8":"情况1:珠修改该记录的键值，并且被更新的列占用的存储空间在修改前后未发生变化。则先在B+树中定位到这条记录的位置，然后再获取一下记录的X锁，最后在原记录的位置进行修改操作。我们也可以把这个定位待修改记录在B+树中位置的过程看成是一个获取X锁的锁定读。"}]}],"6":"l"},{"3":"HKdM-1659245979263","4":{"li":"XE7g-1659246021821","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"SFoX-1659245979262","7":[{"8":"情况2∶未修改该记录的键值，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。则先在B+树中定位到这条记录的位置，然后获取一下记录的X锁，将该记录彻底删除掉（就是把记录彻底移入垃圾链表)，最后再插入一条新记录。这个定位待修改记录在B+树中位置的过程看成是一个获取X锁的锁定读，新插入的记录由INSERT操作提供的隐式锁进行保护。"}]}],"6":"l"},{"3":"EYxp-1659245979267","4":{"li":"XE7g-1659246021821","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"Uzk5-1659245979266","7":[{"8":"情况3∶修改了该记录的键值，则相当于在原记录上做DELETE 操作之后再来一次INSERT操作，加锁操作就需要按照DELETE 和INSERT的规则进行了。"}]}],"6":"l"},{"3":"MPv5-1659236872404","4":{"li":"XE7g-1659246021821","lt":"unordered","ll":1},"5":[{"2":"2","3":"ySBQ-1659236872403","7":[{"8":"INSERT: 一般情况下，新插入一条记录的操作并不加锁，通过一种称之为隐式锁的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。"}]}],"6":"l"},{"3":"8dJ6-1659236872614","4":{"l":"h2"},"5":[{"2":"2","3":"oQ7S-1659236872612","7":[{"8":"从数据操作的粒度划分：表级锁、页级锁、行锁 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"eVAV-1659236872708","4":{"version":1},"5":[{"2":"2","3":"ANBw-1659236872706","7":[{"8":"为了尽可能提高数据库的并发度,每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很耗资源的事情（涉及获取、检查、释放锁等动作)。因此数据库系统需要在高并发响应和系统性能两方面进行平衡，这样就产生了"},{"8":"“锁粒度(Lock granularity)”","9":[{"0":"#E96900FF","2":"c"}]},{"8":"的概念。"}]}]},{"3":"Et08-1659248923917","4":{"version":1},"5":[{"2":"2","3":"VOA4-1659248923916","7":[{"8":"对一条记录加锁影响的也只是这条记录而已，我们就说这个锁的粒度比较细;其实一个事务也可以在表级别进行加锁，自然就被称之为表级锁或者表锁，对一个表加锁影响整个表中的记录，我们就说这个锁的粒度比较粗。锁的粒度主要分为表级锁、页级锁和行锁。"}]}]},{"3":"mzdn-1659236872806","4":{"l":"h3"},"5":[{"2":"2","3":"P8pG-1659236872805","7":[{"8":"表锁"}]}],"6":"h"},{"3":"zunu-1659236866906","4":{"version":1},"5":[{"2":"2","3":"U5ar-1659236866903","7":[{"8":"该锁会锁定整张表，它是MysQL中最基本的锁策略，并不依赖于存储引擎（不管你是MySQL的什么存储引擎，对于表锁的策略都是一样的)，并且表锁是开销最小的策略（因为粒度比较大)。由于表级锁一次会将整个表锁定，所以可以很好的避免死锁问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致并发率大打折扣。"}]}]},{"3":"k4OK-1659236867403","4":{"l":"h6"},"5":[{"2":"2","3":"rO0O-1659236867402","7":[{"8":"①表级别的s锁、x锁"}]}],"6":"h"},{"3":"yxyT-1659252929017","4":{"version":1},"5":[{"2":"2","3":"uPDZ-1659252929016","7":[{"8":"在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的 ","9":[{"0":"#34495e","2":"c"}]},{"8":"S","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"或者 ","9":[{"0":"#34495e","2":"c"}]},{"8":"X","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"的。在对某个表执行一些诸如 ","9":[{"0":"#34495e","2":"c"}]},{"8":"ALTER TABLE ","9":[{"0":"#e96900","2":"c"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"}]},{"8":"DROP TABLE ","9":[{"0":"#e96900","2":"c"}]},{"8":"这类的 ","9":[{"0":"#34495e","2":"c"}]},{"8":"DDL ","9":[{"0":"#e96900","2":"c"}]},{"8":"语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行 ","9":[{"0":"#34495e","2":"c"}]},{"8":"DDL ","9":[{"0":"#e96900","2":"c"}]},{"8":"语句也会发生阻塞。这个过程其实是通过在 ","9":[{"0":"#34495e","2":"c"}]},{"8":"server","9":[{"0":"#e96900","2":"c"}]},{"8":"层 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"使用一种称之为 ","9":[{"0":"#34495e","2":"c"}]},{"8":"元数据锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"（英文名： ","9":[{"0":"#34495e","2":"c"}]},{"8":"Metadata Locks ","9":[{"0":"#e96900","2":"c"}]},{"8":"，简称 ","9":[{"0":"#34495e","2":"c"}]},{"8":"MDL ","9":[{"0":"#e96900","2":"c"}]},{"8":"）结构来实现的。","9":[{"0":"#34495e","2":"c"}]}]}]},{"3":"ESEo-1659253181180","4":{"version":1},"5":[{"2":"2","3":"HHaK-1659253181178","7":[{"8":"一般情况下，不会使用InnoDB存储引擎提供的表级别的 ","9":[{"0":"#34495e","2":"c"}]},{"8":"S","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"}]},{"8":"X","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"。只会在一些特殊情况下，比方说 ","9":[{"0":"#34495e","2":"c"}]},{"8":"崩 溃恢复 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"过程中用到。比如，在系统变量 ","9":[{"0":"#34495e","2":"c"}]},{"8":"autocommit=0","9":[{"0":"#e96900","2":"c"}]},{"8":"，","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"innodb_table_locks = 1 ","9":[{"0":"#e96900","2":"c"}]},{"8":"时， ","9":[{"0":"#34495e","2":"c"}]},{"8":"手动 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"获取InnoDB存储引擎提供的表t 的 ","9":[{"0":"#34495e","2":"c"}]},{"8":"S","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"或者 ","9":[{"0":"#34495e","2":"c"}]},{"8":"X","9":[{"0":"#e96900","2":"c"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"}]},{"8":"可以这么写：","9":[{"0":"#34495e","2":"c"}]}]}]},{"3":"VZwe-1659236867504","4":{"li":"CuuJ-1659253072051","lt":"unordered","ll":1},"5":[{"2":"2","3":"vLKb-1659236867503","7":[{"8":"LOCK TABLES t READ : InnoDB存储引擎会对表t加表级别的S锁。"}]}],"6":"l"},{"3":"8D1o-1659253066532","4":{"li":"CuuJ-1659253072051","lt":"unordered","ll":1},"5":[{"2":"2","3":"gHRi-1659253066531","7":[{"8":"LOCK TABLES t WRITE : InnoDB存储引擎会对表t加表级别的X锁。"}]}],"6":"l"},{"3":"CUX7-1659253144927","4":{"wrap":false,"la":"sql","th":"default"},"5":[{"3":"FEjr-1659253144926","5":[{"2":"2","3":"eJt6-1659236867611","7":[{"8":"show open tables where in_use>0; #查看表锁"}]}],"6":"cl"},{"3":"UKod-1659255665646","5":[{"2":"2","3":"sZ6K-1659255665643","7":[{"8":"show processlist;#查看执行流程，可以查看到执行过程中，被锁阻塞的过程"}]}],"6":"cl"},{"3":"AJxw-1659253398746","5":[{"2":"2","3":"m1lD-1659253398744","7":[{"8":"unlock tables; #解锁"}]}],"6":"cl"}],"6":"cd"},{"3":"Q4O0-1659236867711","4":{"version":1},"5":[{"2":"2","3":"h0mt-1659236867709","7":[{"8":"不过尽量避免在使用InnoDB存储引擎的表上使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK TABLES ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，关于InnoDB表级别的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"S","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"大家了解一下就可以了。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"I3uP-1659253510115","4":{"version":1,"u":"https://note.youdao.com/yws/res/7/WEBRESOURCEf2b6ca3386291127d37b97ea765181a7","w":585,"h":105},"6":"im"},{"3":"SeAG-1659236867804","5":[{"2":"2","3":"PflE-1659236867802","7":[{"8":"总结:"}]}]},{"3":"IoM9-1659253628008","4":{"version":1},"5":[{"2":"2","3":"Hymv-1659253628007","7":[{"8":"MyISAM在执行查询语句(SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。InnoDB存储引擎是不会为这个表添加表级别的读锁或者写锁的。"}]}]},{"3":"R0U0-1659253632017","4":{"l":"h6"},"5":[{"2":"2","3":"rMDS-1659253632015","7":[{"8":"② 意向锁 （","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"intention lock","9":[{"0":"#34495e","2":"c"}]},{"8":"） ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"g1UE-1659236867914","4":{"version":1},"5":[{"2":"2","3":"JCvm-1659236867912","7":[{"8":"InnoDB 支持 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"多粒度锁（","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"multiple granularity locking","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"） ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，它允许 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行级锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"与 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"表级锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"共存，而","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"意向锁","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"就是其中的一种 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"表锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"SlFd-1659236868010","4":{"version":1},"5":[{"2":"2","3":"C8fE-1659236868009","7":[{"8":"1、意向锁的存在是为了协调行锁和表锁的关系，支持多粒度(表锁与行锁)的锁并存。"}]}]},{"3":"gR4Q-1659253779375","4":{"version":1},"5":[{"2":"2","3":"2y9o-1659253779372","7":[{"8":"2、意向锁是一种不与行级锁冲突表级锁，这一点非常重要。"}]}]},{"3":"Lev4-1659253778319","4":{"version":1},"5":[{"2":"2","3":"ExOd-1659253778318","7":[{"8":"3、表明“某个事务正在某些行持有了锁或该事务准备去持有锁”"}]}]},{"3":"r5Ug-1659253639816","4":{"li":"JVVo-1659253793305","lt":"unordered","ll":1},"5":[{"2":"2","3":"QS2N-1659253639814","7":[{"8":"意向共享锁","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（intention shared lock, IS）：事务有意向对表中的某些行加","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"共享锁","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（S锁）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"yqJn-1659253797193","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"hX2q-1659253797192","5":[{"2":"2","3":"79Pw-1659253640329","7":[{"8":"-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。 "}]}],"6":"cl"},{"3":"JmC7-1659253800776","5":[{"2":"2","3":"chYQ-1659253800775","7":[{"8":"SELECT column FROM table ... LOCK IN SHARE MODE;"}]}],"6":"cl"}],"6":"cd"},{"3":"Cxw5-1659253640429","4":{"li":"mLDm-1659253805791","lt":"unordered","ll":1},"5":[{"2":"2","3":"q5zZ-1659253640427","7":[{"8":"意向排他锁","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（intention exclusive lock, IX）：事务有意向对表中的某些行加","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"排他锁","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（X锁）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"7uTs-1659253868373","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"oeTn-1659253868372","5":[{"2":"2","3":"Nw0Y-1659253832982","7":[{"8":"-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。 "}]}],"6":"cl"},{"3":"9htH-1659253872465","5":[{"2":"2","3":"jKRV-1659253872464","7":[{"8":"SELECT column FROM table ... FOR UPDATE;"}]}],"6":"cl"}],"6":"cd"},{"3":"a1yc-1659253640732","4":{"version":1},"5":[{"2":"2","3":"Ul43-1659253640731","7":[{"8":"即：意向锁是由存储引擎 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"自己维护的 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前，InooDB 会先获取该数据行 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"所在数据表的对应意向锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"YgiT-1659253640828","4":{"version":1},"5":[{"2":"2","3":"huGh-1659253640826","7":[{"8":"1.意向锁要解决的问题","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]}]}]},{"3":"2KLW-1659253640931","4":{"version":1},"5":[{"2":"2","3":"Qpkh-1659253640930","7":[{"8":"现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁;如果存在意向锁，那么此时就会受到由T1控制的表级别意向锁的阻塞。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是给更大一级别的空间示意里面是否已经上过锁。"}]}]},{"3":"Tnw2-1659253641046","4":{"version":1},"5":[{"2":"2","3":"xBSg-1659253641044","7":[{"8":"在数据表的场景中，"},{"8":"如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了","9":[{"0":"#A00E0EFF","2":"c"}]},{"8":"，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排他锁即可。"}]}]},{"3":"BVcW-1659254109410","4":{"li":"WMB0-1659254144116","lt":"unordered","ll":1},"5":[{"2":"2","3":"3hhw-1659254109408","7":[{"8":"如果事务想要获得数据表中某些记录的共享锁，就需要在数据表上添加意向共享锁。"}]}],"6":"l"},{"3":"75VG-1659254141831","4":{"li":"WMB0-1659254144116","lt":"unordered","ll":1},"5":[{"2":"2","3":"YfCQ-1659254141829","7":[{"8":"如果事务想要获得数据表中某些记录的排他锁，就需要在数据表上添加意向排他锁。"}]}],"6":"l"},{"3":"xBzx-1659254789043","5":[{"2":"2","3":"VL4r-1659254789041","7":[{"8":"表级："}]}]},{"3":"JKcq-1659254716429","4":{"version":1,"u":"https://note.youdao.com/yws/res/c/WEBRESOURCE0b514ea5f61b24d1f00251d34fe7561c","w":585,"h":87},"6":"im"},{"3":"V3dR-1659236868190","4":{"version":1},"5":[{"2":"2","3":"LX68-1659236868188","7":[{"8":"从上面的案例可以得到如下结论：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"eysu-1659254306121","4":{"version":1},"5":[{"2":"2","3":"oY35-1659254306120","7":[{"8":"1. InnoDB 支持 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"多粒度锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"，特定场景下，行级锁可以与表级锁共存。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"ko3B-1659254306123","4":{"version":1},"5":[{"2":"2","3":"LNOm-1659254306122","7":[{"8":"2. 意向锁之间互不排斥，但除了 IS 与 S 兼容外， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"意向锁会与 共享锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"/ ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"排他锁 互斥 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"7spO-1659254306125","4":{"version":1},"5":[{"2":"2","3":"8FqN-1659254306124","7":[{"8":"3. IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"nGF8-1659254306128","4":{"version":1},"5":[{"2":"2","3":"gC78-1659254306127","7":[{"8":"4. 意向锁在保证并发性的前提下，实现了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁和表锁共存 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"且 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"满足事务隔离性 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"的要求。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"nVQt-1659236868287","4":{"l":"h6"},"5":[{"2":"2","3":"bsrD-1659236868285","7":[{"8":"③ 自增锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"AUTO-INC","9":[{"0":"#34495e","2":"c"}]},{"8":"锁）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"P8kz-1659254357611","4":{"version":1},"5":[{"2":"2","3":"fA8Z-1659254357610","7":[{"8":"在使用MySQL过程中，我们可以为表的某个列添加 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"AUTO_INCREMENT ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性。由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Rn8G-1659236868375","4":{"version":1},"5":[{"2":"2","3":"91JW-1659236868374","7":[{"8":"现在我们看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是“ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Simple inserts ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"”，“ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Bulk inserts ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"”和“ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Mixed-mode inserts ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"”。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"lWwr-1659253456219","4":{"version":1},"5":[{"2":"2","3":"9gz1-1659253456217","7":[{"8":"1. “Simple inserts” ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（简单插入）","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"HIBv-1659254393571","4":{"version":1},"5":[{"2":"2","3":"9TN2-1659254393570","7":[{"8":"可以 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"预先确定要插入的行数 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"INSERT...VALUES() ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"REPLACE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行数。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"5GBq-1659254393577","4":{"version":1},"5":[{"2":"2","3":"sSCf-1659254393576","7":[{"8":"2. “Bulk inserts” ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（批量插入）","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"LhVl-1659254393579","4":{"version":1},"5":[{"2":"2","3":"J3zY-1659254393578","7":[{"8":"事先不知道要插入的行数 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（和所需自动递增值的数量）的语句。比如 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"INSERT ... SELECT ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"REPLACE ... SELECT ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOAD DATA ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"k4VT-1659254393586","4":{"version":1},"5":[{"2":"2","3":"NFdT-1659254393585","7":[{"8":"3. “Mixed-mode inserts” ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"（混合模式插入）","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Pl5Y-1659254393588","4":{"version":1},"5":[{"2":"2","3":"pGut-1659254393587","7":[{"8":"这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"INSERT INTO teacher (id,name) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d'); ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"只是指定了部分id的值。另一种类型的“混合模式插入”是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"INSERT ... ON DUPLICATE KEY UPDATE","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"iuyA-1659253456714","4":{"version":1},"5":[{"2":"2","3":"xUtk-1659253456712","7":[{"8":"对于上面数据插入的案例，MySQL中采用了"},{"8":"自增锁","9":[{"0":"#E96900FF","2":"c"}]},{"8":"的方式来实现，"},{"8":"AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"，在执行插入语句时就在表级别加一个AUTO-INC锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INC锁释放掉。"},{"8":"一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"，可以保证一个语句中分配的递增值是连续的。也正因为此，其并发性显然并不高，"},{"8":"当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"，这样的并发潜力其实是很低下的，所以innodb通过innodb_autoinc_lock_mode的不同取值来提供不同的锁定机制，来显著提高sQL语句的可伸缩性和性能。"}]}]},{"3":"E0ge-1659253456807","5":[{"2":"2","3":"tXVg-1659253456805","7":[{"8":"innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：","9":[{"0":"#34495e","2":"c"},{"2":"u"},{"2":"b"}]}]}]},{"3":"JwSf-1659255040644","4":{"version":1},"5":[{"2":"2","3":"spoF-1659255040643","7":[{"8":"（","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"1","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"innodb_autoinc_lock_mode = 0(“","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"传统","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"”","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁定模式","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":")","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"gM5W-1659253456902","4":{"version":1},"5":[{"2":"2","3":"WBJL-1659253456900","7":[{"8":"在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的时候，对于AUTO-INC锁的争夺会 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"限制并发 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"能力。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"rWNd-1659255081609","4":{"version":1},"5":[{"2":"2","3":"ODaw-1659255081608","7":[{"8":"（","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"2","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"innodb_autoinc_lock_mode = 1(“","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"连续","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"”","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁定模式","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":") ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"YTq8-1659255081611","4":{"version":1},"5":[{"2":"2","3":"Krpo-1659255081610","7":[{"8":"在 MySQL 8.0 之前，连续锁定模式是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"默认 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的。在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT ... SELECT，REPLACE ... SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"btf3-1659255154320","4":{"version":1},"5":[{"2":"2","3":"LViL-1659255154318","7":[{"8":"对于“Simple inserts”（要插入的行数事先已知，直接申请n个值就释放锁），则通过在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"mutex","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（轻量锁） ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"vMmh-1659255081626","4":{"version":1},"5":[{"2":"2","3":"baIY-1659255081625","7":[{"8":"（","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"3","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"innodb_autoinc_lock_mode = 2(“","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"交错","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"”","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁定模式","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":") ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"0UFH-1659255081628","4":{"version":1},"5":[{"2":"2","3":"N456-1659255081627","7":[{"8":"从 MySQL 8.0 开始，交错锁模式是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"默认 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"设置。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"mcGU-1659255262020","4":{"version":1},"5":[{"2":"2","3":"BBAU-1659255262017","7":[{"8":"在这种锁定模式下，所有类INSERT语句都不会使用表级AUTO-INC锁，并且可以同时执行多个语句这是最快和最可扩展的锁定模式，但是当使用基于语句的复制或恢复方案时，"},{"8":"从二进制日志重播SQL语句时，这是不安全的","9":[{"2":"b"},{"0":"#A00E0EFF","2":"c"}]},{"8":"。"}]}]},{"3":"UwQb-1659255081631","4":{"version":1},"5":[{"2":"2","3":"9GNr-1659255081630","7":[{"8":"在此锁定模式下，自动递增值 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"保证 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"在所有并发执行的所有类型的insert语句中是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"唯一 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"且 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"单调递增 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"为任何给定语句插入的行生成的值可能不是连续的。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"KsTG-1659253456998","4":{"version":1},"5":[{"2":"2","3":"jeoP-1659253456996","7":[{"8":"如果执行的语句是\"“simple inserts”，其中要插入的行数已提前知道，除了“Mixed-mode inserts\"之外，为单个语句生成的数字不会有间隙。然而，当执行“bulk inserts\"时，在由任何给定语句分配的自动递增值中可能存在间隙"}]}]},{"3":"lE3m-1659253457090","4":{"l":"h6"},"5":[{"2":"2","3":"XtZ3-1659253457089","7":[{"8":"④ 元数据锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"MDL","9":[{"0":"#34495e","2":"c"}]},{"8":"锁）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"7Tb7-1659253457202","4":{"version":1},"5":[{"2":"2","3":"KJLE-1659253457200","7":[{"8":"MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。"}]}]},{"3":"j9YT-1659255388520","4":{"version":1},"5":[{"2":"2","3":"En9l-1659255388519","7":[{"8":"因此，"},{"8":"当对一个表做增删改查操作的时候，加MDL读锁;当要对表做结构变更操作的时候，加MDL写锁","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]},{"8":"。"}]}]},{"3":"EjJC-1659255404061","4":{"version":1},"5":[{"2":"2","3":"MAmd-1659255404058","7":[{"8":"读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。"},{"8":"不需要显式使用","9":[{"0":"#E96900FF","2":"c"}]},{"8":"，在访问一个表的时候会被自动加上。"}]}]},{"3":"opuX-1659253457298","4":{"l":"h3"},"5":[{"2":"2","3":"WRqZ-1659253457297","7":[{"8":"InnoDB","9":[{"0":"#34495e","2":"c"}]},{"8":"中的行锁 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"mPeg-1659253457394","4":{"version":1},"5":[{"2":"2","3":"wl78-1659253457393","7":[{"8":"行锁(Row Lock)也称为记录锁，顾名朋义，就是锁住某一行(某条记录row)。需要的注意的是MySQL服务器层并没有实现行锁机制，行级锁只在存储引擎层实现。"}]}]},{"3":"uONd-1659253457505","4":{"version":1},"5":[{"2":"2","3":"IzaP-1659253457503","7":[{"8":"优点","9":[{"0":"#A00E0EFF","2":"c"}]},{"8":"：锁定力度小，发生锁冲突概率低，可以实现的并发度高"}]}]},{"3":"vAHt-1659255885453","4":{"version":1},"5":[{"2":"2","3":"7iEe-1659255885452","7":[{"8":"缺点","9":[{"0":"#A00E0EFF","2":"c"}]},{"8":"：对于锁的开销比较大，加锁会比较慢，容易出现死锁的情况"}]}]},{"3":"EC4K-1659255885965","4":{"version":1},"5":[{"2":"2","3":"MFni-1659255885962","7":[{"8":"InnoDB与MylSAM的最大不同有两点:一是支持事务(TRANSACTION);二是采用了行级锁。"}]}]},{"3":"AM4x-1659255886071","4":{"l":"h6"},"5":[{"2":"2","3":"c4If-1659255886069","7":[{"8":"① 记录锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Record Locks","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"JPaA-1659255886169","4":{"version":1},"5":[{"2":"2","3":"6mhf-1659255886168","7":[{"8":"记录锁也就是仅仅把一条记录锁上，官方的类型名称为： ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK_REC_NOT_GAP ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。比如我们把id值为8的那条记录加一个记录锁的示意图如图所示。仅仅是锁住了id值为8的记录，对周围的数据没有影响。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"YvTa-1659255886263","4":{"version":1},"5":[{"2":"2","3":"BSOG-1659255886262","7":[{"8":"记录锁是有S锁和X锁之分的，称之为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"S","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"型记录锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"型记录锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"EqXP-1659256317931","4":{"li":"hLDx-1659256322906","lt":"unordered","ll":1},"5":[{"2":"2","3":"p6h0-1659256317930","7":[{"8":"当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"zc8g-1659256317936","4":{"li":"hLDx-1659256322906","lt":"unordered","ll":1},"5":[{"2":"2","3":"fRxX-1659256317935","7":[{"8":"当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"XyXr-1659255886359","4":{"l":"h6"},"5":[{"2":"2","3":"pmzN-1659255886358","7":[{"8":"② 间隙锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Gap Locks","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"yFCs-1659255886468","4":{"version":1},"5":[{"2":"2","3":"PRJk-1659255886467","7":[{"8":"MySQL ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"REPEATABLE READ ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"MVCC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"方案解决，也可以采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"加锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"幻影记录 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"加上 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"记录锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。InnoDB提出了一种称之为","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Gap Locks ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的锁，官方的类型名称为： ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK_GAP ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，我们可以简称为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。比如，把id值为8的那条记录加一个gap锁的示意图如下。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"aPuy-1659256945527","4":{"version":1,"u":"https://note.youdao.com/yws/res/6/WEBRESOURCEb23e93bd89cd80c7803328e6f13514a6","w":481,"h":211},"6":"im"},{"3":"Uc7C-1659257848359","5":[{"2":"2","3":"1jod-1659257848361","7":[{"8":"添加间隙锁：在3和8之间添加"}]}]},{"3":"UaK8-1659257848358","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"tMbv-1659257848357","5":[{"2":"2","3":"cu6h-1659255886674","7":[{"8":"SELECT * FROM TABLES WHERE id=5 LOCK IN SHARE MODE;"}]}],"6":"cl"},{"3":"qfbc-1659258359177","5":[{"2":"2","3":"YQGt-1659258359174","7":[{"8":"SELECT * FROM TABLES WHERE id=5 FOR UPDATE;"}]}],"6":"cl"}],"6":"cd"},{"3":"VqWh-1659257842297","4":{"version":1},"5":[{"2":"2","3":"Mk4R-1659257842294","7":[{"8":"图中id值为8的记录加了gap锁，意味着 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不允许别的事务在","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"id","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"值为","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"8","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的记录前边的间隙插入新记录 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，其实就是id列的值(3, 8)这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新记录，它定位到该条新记录的下一条记录的id值为8，而这条记录上又有一个gap锁，所以就会阻塞插入操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"kOfg-1659255886774","4":{"version":1},"5":[{"2":"2","3":"OWfc-1659255886772","7":[{"8":"gap","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁的提出仅仅是为了防止插入幻影记录而提出的，","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁(不论是共享gap锁还是独占gap锁)，并不会限制其他事务对这条记录加记录锁或者继续加gap锁。","9":[{"0":16,"2":"fs"}]}]}]},{"3":"olGS-1659255886868","5":[{"2":"2","3":"BV27-1659255886866","7":[{"8":"注意，给一条记录加了"},{"8":"gap锁","9":[{"0":"#E96900FF","2":"c"}]},{"8":"只是"},{"8":"不允许","9":[{"0":"#E96900FF","2":"c"}]},{"8":"其他事务往这条记录前边的间隙"},{"8":"插入新记录","9":[{"0":"#E96900FF","2":"c"}]},{"8":"，那对于最后一条记录之后的间隙，也就是student表中id值为"},{"8":"20","9":[{"0":"#E96900FF","2":"c"}]},{"8":"的记录之后的间隙该咋办呢?也就是说给哪条记录加"},{"8":"gap锁","9":[{"0":"#E96900FF","2":"c"}]},{"8":".才能阻止其他事务插入"},{"8":"id值","9":[{"0":"#E96900FF","2":"c"}]},{"8":"在"},{"8":"(20，+无穷)","9":[{"0":"#E96900FF","2":"c"}]},{"8":"这个区间的新记录呢?这时候我们在讲数据页时介绍的两条伪记录派上用场了:"}]}]},{"3":"dm1H-1659258135532","4":{"li":"9Ekf-1659258132202","lt":"unordered","ll":1},"5":[{"2":"2","3":"Gm1Q-1659258135530","7":[{"8":" Infimum记录，表示该页面中最小的记录。"}]}],"6":"l"},{"3":"GH7j-1659258126509","4":{"li":"9Ekf-1659258132202","lt":"unordered","ll":1},"5":[{"2":"2","3":"zTgQ-1659258126508","7":[{"8":"Supremum记录，表示该页面中最大的记录。"}]}],"6":"l"},{"3":"teNG-1659258263780","4":{"version":1,"u":"https://note.youdao.com/yws/res/c/WEBRESOURCE89bf2ac9c307afb9dba7b517f9f41b9c","w":495,"h":224},"6":"im"},{"3":"mcgZ-1659255887078","4":{"l":"h6"},"5":[{"2":"2","3":"9iZc-1659255887076","7":[{"8":"③ 临键锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Next-Key Locks","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"LTbN-1659258621865","4":{"version":1},"5":[{"2":"2","3":"01DW-1659258621864","7":[{"8":"有时候我们既想 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁住某条记录 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，又想 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"阻止 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"其他事务在该记录前边的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"间隙插入新记录 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，所以InnoDB就提出了一种称之为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Next-Key Locks ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的锁，官方的类型名称为： ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK_ORDINARY ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，我们也可以简称为","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"next-key","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。Next-Key Locks是在存储引擎 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"innodb ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"、事务级别在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"可重复读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"TUmO-1659255887170","4":{"version":1},"5":[{"2":"2","3":"igLx-1659255887168","7":[{"8":"next-key锁的本质就是一个记录锁和一个gap锁的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的间隙。"}]}]},{"3":"vYFJ-1659258745280","4":{"version":1,"u":"https://note.youdao.com/yws/res/6/WEBRESOURCEfc86fcd1ba1577b6a27df7c752d41e36","w":585,"h":68},"6":"im"},{"3":"QPJ8-1659255887348","4":{"l":"h6"},"5":[{"2":"2","3":"xaAi-1659255887347","7":[{"8":"④ 插入意向锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Insert Intention Locks","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"FC46-1659258812211","4":{"version":1},"5":[{"2":"2","3":"lByD-1659258812210","7":[{"8":"我们说一个事务在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"插入 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"一条记录时需要判断一下插入位置是不是被别的事务加了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"next-key","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"也包含 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"），如果有的话，插入操作需要等待，直到拥有 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的那个事务提交。但是","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"InnoDB","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"规定事务在等待的时候也需要在内存中生成一个锁结构","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"，表明有事务想在某个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"间隙 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"中 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"插入 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"新记录，但是现在在等待。InnoDB就把这种类型的锁命名为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Insert Intention Locks ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，官方的类型名称为：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK_INSERT_INTENTION ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，我们称为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"插入意向锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。插入意向锁是一种 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，不是意向锁，在insert操作时产生。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"JXBY-1659258812227","4":{"version":1},"5":[{"2":"2","3":"Dt82-1659258812226","7":[{"8":"插入意向锁是在插入一条记录行前，由INSERT 操作产生的一种","9":[{"0":16,"2":"fs"}]},{"8":"间隙锁","9":[{"0":16,"2":"fs"},{"0":"#E96900FF","2":"c"}]},{"8":"。该锁用以表示插入意向，当多个事务在同一区间(gap）插入位置不同的多条数据时，事务之间不需要互相等待。假设存在两条值分别为4和7的记录，两个不同的事务分别试图插入值为5和6的两条记录，每个事务在获取插入行上独占的(排他）锁前，都会获取(4，7)之间的间隙锁，但是因为数据行之间并不冲突，所以两个事务之间并不会产生冲突（(阻塞等待)。","9":[{"0":16,"2":"fs"}]}]}]},{"3":"3Oib-1659258812229","4":{"version":1},"5":[{"2":"2","3":"9P8D-1659258812228","7":[{"8":"事实上","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"9oBh-1659255887540","4":{"l":"h3"},"5":[{"2":"2","3":"Wcy9-1659255887539","7":[{"8":"页锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Of5K-1659255887656","4":{"version":1},"5":[{"2":"2","3":"IFeb-1659255887653","7":[{"8":"页锁就是在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"页的粒度 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"GaBP-1659259904443","4":{"version":1},"5":[{"2":"2","3":"TjwO-1659259904442","7":[{"8":"每个层级的锁数量是有限制的，因为锁会占用内存空间， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁空间的大小是有限的 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。当某个层级的锁数量超过了这个层级的阈值时，就会进行 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁升级 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"qMSx-1659260141112","4":{"l":"h2"},"5":[{"2":"2","3":"QuHP-1659260141111","7":[{"8":"从对待锁的态度划分","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":":","9":[{"0":"#34495e","2":"c"}]},{"8":"乐观锁、悲观锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"zQe4-1659255887843","4":{"version":1},"5":[{"2":"2","3":"R9KI-1659255887841","7":[{"8":"从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"数据并发的思维方式 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"设计思想 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"3FIP-1659255887962","4":{"l":"h3"},"5":[{"2":"2","3":"AKw4-1659255887960","7":[{"8":"悲观锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Pessimistic Locking","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"PEhD-1659259993148","4":{"version":1},"5":[{"2":"2","3":"vwoW-1659259993144","7":[{"8":"悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"qA7h-1659317502005","4":{"version":1},"5":[{"2":"2","3":"6Fjq-1659317502004","7":[{"8":"悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"阻塞 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"直到它拿到锁（","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"synchronized ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"ReentrantLock ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"等独占锁就是悲观锁思想的实现。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Q4vN-1659318100672","4":{"version":1,"u":"https://note.youdao.com/yws/res/2/WEBRESOURCE6ed36cb36710eaf2f416e499141615f2","w":585,"h":132},"6":"im"},{"3":"0EQF-1659259993719","4":{"version":1},"5":[{"2":"2","3":"8gNd-1659259993717","7":[{"8":"注意: select .. for update语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住。"}]}]},{"3":"Wb8L-1659259993831","4":{"version":1},"5":[{"2":"2","3":"jL4R-1659259993829","7":[{"8":"悲观锁不适用的场景较多，它存在一些不足，因为悲观锁大多数情况下依靠数据库的锁机制来实现，以保证程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受，这时就需要乐观锁。"}]}]},{"3":"a2xe-1659318277516","4":{"l":"h3"},"5":[{"2":"2","3":"GF9J-1659318277515","7":[{"8":"乐观锁（","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Optimistic Locking","9":[{"0":"#34495e","2":"c"}]},{"8":"）","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"XmIe-1659259994052","4":{"version":1},"5":[{"2":"2","3":"R60h-1659259994051","7":[{"8":"乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不采用数据库自身的锁机制，而是通过程序来实现","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"。在程序上，我们可以采用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"版本号机制 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"或者 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"CAS","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"机制 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"实现。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"乐观锁适用于多读的应用类型，这样可以提高吞吐量","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"。在Java中 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"java.util.concurrent.atomic ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"包下的原子变量类就是使用了乐观锁","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"LiVA-1659259994162","4":{"version":1},"5":[{"2":"2","3":"KsEu-1659259994161","7":[{"8":"1. ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"乐观锁的版本号机制","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"BwAf-1659318445634","4":{"version":1},"5":[{"2":"2","3":"iv9a-1659318445633","7":[{"8":"在表中设计一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"版本字段 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"version ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"UPDATE ... SET version=version+1 WHERE version=version ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。此时如果已经有事务对这条数据进行了更改，修改就不会成功。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"DHMx-1659318445640","4":{"version":1},"5":[{"2":"2","3":"u9k6-1659318445639","7":[{"8":"2. ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"乐观锁的时间戳机制","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"4oLz-1659318445642","4":{"version":1},"5":[{"2":"2","3":"EQPU-1659318445641","7":[{"8":"时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行比较，如果两者一致则更新成功，否则就是版本冲突。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"zDvB-1659318445646","4":{"version":1},"5":[{"2":"2","3":"uAQg-1659318445645","7":[{"8":"你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"h60P-1659259994258","4":{"l":"h3"},"5":[{"2":"2","3":"UgxM-1659259994256","7":[{"8":"两种锁的适用场景","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"h3O7-1659259994368","4":{"version":1},"5":[{"2":"2","3":"F8h5-1659259994366","7":[{"8":"从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"6dps-1659318659803","4":{"version":1},"5":[{"2":"2","3":"9tr6-1659318659802","7":[{"8":"1. ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"乐观锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"适合 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读操作多 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的场景，相对来说写的操作比较少。它的优点在于 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"程序实现 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不存在死锁","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"6Aiz-1659318659807","4":{"version":1},"5":[{"2":"2","3":"0U27-1659318659806","7":[{"8":"2. ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"悲观锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"适合 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"写操作多 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的场景，因为写的操作具有 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"排它性 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"读 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"- ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"- ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"写 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的冲突。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"VMig-1659259994461","4":{"l":"h2"},"5":[{"2":"2","3":"98O6-1659259994460","7":[{"8":"按加锁的方式划分：显式锁、隐式锁 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"tsXU-1659259994566","4":{"l":"h3"},"5":[{"2":"2","3":"5cjL-1659259994565","7":[{"8":"隐式锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"A78D-1659259994670","4":{"version":1},"5":[{"2":"2","3":"qJLW-1659259994669","7":[{"8":"一个事务在执行INSERT操作时，如果即将插入的间隙已经被其他事务加了gap锁，那么本次INSERT操作会阻塞，并且当前事务会在该间隙上加一个插入意向锁，否则一般情况下INSERT操作是不加锁的。那如果一个事务首先插入了一条记录（此时并没有在内存生产与该记录关联的锁结构)，然后另一个事务:"}]}]},{"3":"Jkhy-1659259994765","4":{"li":"iPb9-1659319841511","lt":"unordered","ll":1},"5":[{"2":"2","3":"znmI-1659259994763","7":[{"8":"立即使用SELECT ... LOCK IN SHARE MODE语句读取这条记录，也就是要获取这条记录的S锁，或者使用SELECT ... FOR UPDATE语句读取这条记录，也就是要获取这条记录的X锁，怎么办?如果允许这种情况的发生，那么可能产生脏读问题。"}]}],"6":"l"},{"3":"tres-1659319827955","4":{"li":"iPb9-1659319841511","lt":"unordered","ll":1},"5":[{"2":"2","3":"TG30-1659319827954","7":[{"8":"立即修改这条记录，也就是要获取这条记录的x锁，怎么办?如果允许这种情况的发生，那么可能产生脏写问题。"}]}],"6":"l"},{"3":"2cRU-1659319827957","4":{"version":1},"5":[{"2":"2","3":"Izn5-1659319827956","7":[{"8":"这时候我们前边提过的事务id又要起作用了。我们把聚簇索引和二级索引中的记录分开看一下:"}]}]},{"3":"j7tR-1659318587112","4":{"version":1},"5":[{"2":"2","3":"7nRf-1659318587110","7":[{"8":"情景一：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"对于聚簇索引记录来说，有一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"trx_id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隐藏列，该隐藏列记录着最后改动该记录的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"trx_id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隐藏列代表的的就是当前事务的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，如果其他事务此时想对该记录添加 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"S","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"或者 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"时，首先会看一下该记录的","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"trx_id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（也就是为当前事务创建一个锁结构， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"false ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），然后自己进入等待状态（也就是为自己也创建一个锁结构， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"true ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"KbPc-1659319905130","4":{"version":1},"5":[{"2":"2","3":"7XPc-1659319905129","7":[{"8":"情景二：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"对于二级索引记录来说，本身并没有 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"trx_id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"隐藏列，但是在二级索引页面的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"PageHeader ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"部分有一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"PAGE_MAX_TRX_ID ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性，该属性代表对该页面做改动的最大的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，如果 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"PAGE_MAX_TRX_ID ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性值小于当前最小的活跃 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"id ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"情景一 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的做法。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"42Jl-1659318587625","4":{"version":1},"5":[{"2":"2","3":"6pxA-1659318587623","7":[{"8":"隐式锁在实际内存对象中并不含有这个锁信息。只有当产生锁等待时,隐式锁转化为显式锁。"}]}]},{"3":"gIb4-1659320900675","4":{"version":1},"5":[{"2":"2","3":"SIfT-1659320900674","7":[{"8":"InnoDB的insert操作，对插入的记录不加锁，但是此时如果另一个线程进行当前读，类似以下的用例,session 2会锁等待session 1，那么这是如何实现的呢?"}]}]},{"3":"NGvu-1659318587720","4":{"l":"h3"},"5":[{"2":"2","3":"4TAP-1659318587718","7":[{"8":"显式锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"RIGU-1659318587816","4":{"version":1},"5":[{"2":"2","3":"bjLI-1659318587814","7":[{"8":"通过特定的语句进行加锁，我们一般称之为显示加锁","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Fjob-1659320986453","4":{"l":"h2"},"5":[{"2":"2","3":"EtBD-1659320986452","7":[{"8":"其它锁之：全局锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Sm24-1659318588023","4":{"version":1},"5":[{"2":"2","3":"kqYK-1659318588021","7":[{"8":"全局锁就是对 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"整个数据库实例 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"加锁。当你需要让整个库处于 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"只读状态 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。全局锁的典型使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"场景 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"是：做 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"全库逻辑备份 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"5rLH-1659320999091","4":{"version":1},"5":[{"2":"2","3":"5Evl-1659320999090","7":[{"8":"全局锁的命令：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"CAAo-1659321007269","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"JDrB-1659321007268","5":[{"2":"2","3":"zDlx-1659318588131","7":[{"8":"Flush tables with read lock"}]}],"6":"cl"}],"6":"cd"},{"3":"eK4H-1659318588229","4":{"l":"h2"},"5":[{"2":"2","3":"tNbS-1659318588228","7":[{"8":"其它锁之：死锁","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"jUuM-1659318588325","4":{"version":1},"5":[{"2":"2","3":"XNk0-1659318588324","7":[{"8":"死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"gBrD-1659318588421","4":{"version":1},"5":[{"2":"2","3":"LsdZ-1659318588419","7":[{"8":"死锁示例：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"YS3r-1659321092945","4":{"version":1,"u":"https://note.youdao.com/yws/res/6/WEBRESOURCE340d4a033572cbd05364fddae46a8026","w":585,"h":182},"6":"im"},{"3":"lKYA-1659318588628","4":{"version":1},"5":[{"2":"2","3":"Zppu-1659318588626","7":[{"8":"这时候，事务1在等待事务2释放id=2的行锁，而事务2在等待事务1释放id=1的行锁。 事务1和事务2在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"两种策略 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"FBgE-1659321097856","4":{"li":"U7Kg-1659321107815","lt":"unordered","ll":1},"5":[{"2":"2","3":"p1Jx-1659321097855","7":[{"8":"一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"innodb_lock_wait_timeout ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"来设置。默认50s？","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"JPVR-1659321097860","4":{"li":"U7Kg-1659321107815","lt":"unordered","ll":1},"5":[{"2":"2","3":"lgQ2-1659321097859","7":[{"8":"另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务（将持有最少行级排他锁的事务进行回滚），让其他事务得以继续执行。将参数 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"innodb_deadlock_detect ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"设置为","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"on ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，表示开启这个逻辑。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"3usm-1659322009927","5":[{"2":"2","3":"4Qwl-1659322009925","7":[{"8":"一旦检测到回路、有死锁，这时候InnoDB存储引擎会选择回滚undo量最小的事务，让其他事务继续执行( innodb_deadlock_detect=on表示开启这个逻辑)。"}]}]},{"3":"4dNe-1659321705122","4":{"version":1},"5":[{"2":"2","3":"UUMd-1659321705121","7":[{"8":"缺点:每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是o(n)。如果100个并发线程同时更新同一行，意味着要检测100*100= 1万次，1万个线程就会有1千万次检测。"}]}]},{"3":"Psix-1659321973259","5":[{"2":"2","3":"dcEp-1659321973258","7":[{"8":"第二种策略的成本分析","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"muIH-1659321150636","4":{"version":1},"5":[{"2":"2","3":"nC19-1659321150635","7":[{"8":"方法","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"1","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"业务无损 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的。而关掉死锁检测意味着可能会出现大量的超时，这是","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"业务有损 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"tuC8-1659321150644","4":{"version":1},"5":[{"2":"2","3":"WCLV-1659321150643","7":[{"8":"方法","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"2","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：控制并发度。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"如果并发能够控制住，比如同一行同时最多只有10个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"4ef5-1659321156162","4":{"version":1},"5":[{"2":"2","3":"2IQI-1659321156160","7":[{"8":"这个并发控制要做在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"数据库服务端 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。如果你有中间件，可以考虑在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"中间件实现 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"；甚至有能力修改MySQL源码的人，也可以做在MySQL里面。基本思路就是，对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作了。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"bs5M-1659321884420","4":{"l":"h3"},"5":[{"2":"2","3":"nXDO-1659321884419","7":[{"8":"产生死锁的必要条件"}]}],"6":"h"},{"3":"6n9U-1659321288913","4":{"version":1,"li":"ojhN-1659321306465","lt":"ordered","ll":1},"5":[{"2":"2","3":"HnC1-1659321288911","7":[{"8":"两个或者两个以上事务"}]}],"6":"l"},{"3":"wbin-1659321291976","4":{"version":1,"li":"ojhN-1659321306465","lt":"ordered","ll":1},"5":[{"2":"2","3":"37Wv-1659321291975","7":[{"8":"每个事务都已经持有锁并且申请新的锁"}]}],"6":"l"},{"3":"cb6Q-1659321133254","4":{"version":1,"li":"ojhN-1659321306465","lt":"ordered","ll":1},"5":[{"2":"2","3":"vK6c-1659321133252","7":[{"8":"锁资源同时只能被同一个事务持有或者不兼容"}]}],"6":"l"},{"3":"q7CD-1659321296661","4":{"version":1,"li":"ojhN-1659321306465","lt":"ordered","ll":1},"5":[{"2":"2","3":"YQcR-1659321296660","7":[{"8":"事务之间因为持有锁和申请锁导致彼此循环等待"}]}],"6":"l"},{"3":"zvR6-1659321133346","4":{"version":1},"5":[{"2":"2","3":"pauy-1659321133345","7":[{"8":"死锁的关键在于:两个(或以上)的Session加锁的顺序不一致。"}]}]},{"3":"pBOF-1659321784125","4":{"l":"h3"},"5":[{"2":"2","3":"fuoU-1659321784124","7":[{"8":"如何解决?","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]}]}],"6":"h"},{"3":"6BBO-1659321784487","4":{"li":"e4UQ-1659321795158","lt":"unordered","ll":1},"5":[{"2":"2","3":"byG5-1659321784486","7":[{"8":"方式1:关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。"}]}],"6":"l"},{"3":"d1jq-1659321784489","4":{"li":"e4UQ-1659321795158","lt":"unordered","ll":1},"5":[{"2":"2","3":"znIs-1659321784488","7":[{"8":"方式2:控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作。"}]}],"6":"l"},{"3":"T9KF-1659321784491","4":{"version":1},"5":[{"2":"2","3":"bSlQ-1659321784490","7":[{"8":"进一步的思路:","9":[{"0":"#A00E0EFF","2":"c"},{"2":"b"}]}]}]},{"3":"KjTm-1659321804660","4":{"version":1},"5":[{"2":"2","3":"SiVC-1659321804659","7":[{"8":"可以考虑通过将一行改成逻辑上的多行来减少锁冲突。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。"}]}]},{"3":"vm4S-1659321848730","4":{"l":"h3"},"5":[{"2":"2","3":"WEad-1659321848729","7":[{"8":"如何避免死锁"}]}],"6":"h"},{"3":"yUlv-1659322033770","4":{"li":"sHKC-1659322059102","lt":"unordered","ll":1},"5":[{"2":"2","3":"AEmb-1659322033769","7":[{"8":"合理设计索引，使业务SQL尽可能通过索引定位更少的行，减少锁竞争。"}]}],"6":"l"},{"3":"NhtE-1659322033772","4":{"li":"sHKC-1659322059102","lt":"unordered","ll":1},"5":[{"2":"2","3":"0iX4-1659322033771","7":[{"8":"调整业务逻辑sQL执行顺序，避免update/delete长时间持有锁的sQL在事务前面。"}]}],"6":"l"},{"3":"qofC-1659322033775","4":{"li":"sHKC-1659322059102","lt":"unordered","ll":1},"5":[{"2":"2","3":"8iqj-1659322033774","7":[{"8":"避免大事务，尽量将大事务拆成多个小事务来处理，小事务缩短锁定资源的时间，发生锁冲突的几率也更小。"}]}],"6":"l"},{"3":"NsiP-1659322033777","4":{"li":"sHKC-1659322059102","lt":"unordered","ll":1},"5":[{"2":"2","3":"ymvT-1659322033776","7":[{"8":"在并发比较高的系统中，不要显式加锁，特别是是在事务里显式加锁。如select ... for update语句，如果是在事务里运行了start transaction或设置了autocommit等于o，那么就会锁定所查找到的记录。"}]}],"6":"l"},{"3":"CJ0l-1659322033779","4":{"li":"sHKC-1659322059102","lt":"unordered","ll":1},"5":[{"2":"2","3":"ISGd-1659322033778","7":[{"8":"降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。"}]}],"6":"l"},{"3":"cFa1-1659321132738","4":{"l":"h1"},"5":[{"2":"2","3":"Z3lV-1659321132736","7":[{"8":"锁结构"}]}],"6":"h"},{"3":"iRuv-1659321133454","5":[{"2":"2","3":"TP6K-1659321133453","7":[{"8":"我们前边说对一条记录加锁的本质就是在内存中创建一个锁结构与之关联，那么是不是一个事务对多条记录加锁，就要创建多个锁结构呢?比如:"}]}]},{"3":"XnZd-1659322498618","4":{"version":1},"5":[{"2":"2","3":"a3Te-1659322498617","7":[{"8":"SELECT * FROM user LOCK IN SHARE MODE;"}]}]},{"3":"BgFw-1659322498620","4":{"version":1},"5":[{"2":"2","3":"rAYn-1659322498619","7":[{"8":"理论上创建多个锁结构没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了!所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放到一个锁结构中。"}]}]},{"3":"LKhr-1659321133551","4":{"li":"OqW7-1659322808221","lt":"unordered","ll":1},"5":[{"2":"2","3":"Y1eO-1659321133549","7":[{"8":"在同一个事务中进行加锁操作"}]}],"6":"l"},{"3":"HzmM-1659322798909","4":{"li":"OqW7-1659322808221","lt":"unordered","ll":1},"5":[{"2":"2","3":"48Hy-1659322798907","7":[{"8":"被加锁的记录在同一个页面中"}]}],"6":"l"},{"3":"Noac-1659322804288","4":{"li":"OqW7-1659322808221","lt":"unordered","ll":1},"5":[{"2":"2","3":"Fapf-1659322804286","7":[{"8":"加锁的类型是一样的"}]}],"6":"l"},{"3":"CLj0-1659322796200","4":{"li":"OqW7-1659322808221","lt":"unordered","ll":1},"5":[{"2":"2","3":"0NaQ-1659322796199","7":[{"8":"等待状态是一样的"}]}],"6":"l"},{"3":"X6OQ-1659321133646","5":[{"2":"2","3":"tr7j-1659321133645","7":[{"8":"InnoDB ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"存储引擎中的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"如下：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"XjpT-1659322882412","4":{"version":1,"u":"https://note.youdao.com/yws/res/c/WEBRESOURCEafde88c643d8030cb4ffcf0b9f42ea0c","w":459,"h":348},"6":"im"},{"3":"m86H-1659321133855","5":[{"2":"2","3":"fbzw-1659321133854","7":[{"8":"1. ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁所在的事务信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"iTTR-1659323079597","4":{"version":1},"5":[{"2":"2","3":"fwUB-1659323079596","7":[{"8":"不论是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"表锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"还是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，都是在事务执行过程中生成的，哪个事务生成了这个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，这里就记录这个事务的信息。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"8ioh-1659323079601","4":{"version":1},"5":[{"2":"2","3":"xUJH-1659323079600","7":[{"8":"此 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁所在的事务信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"pgQL-1659323079606","4":{"version":1},"5":[{"2":"2","3":"mQL9-1659323079605","7":[{"8":"2. ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"索引信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"fP3o-1659323079608","4":{"version":1},"5":[{"2":"2","3":"ccrP-1659323079607","7":[{"8":"对于 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"1Jih-1659323079610","4":{"version":1},"5":[{"2":"2","3":"XtUa-1659323079609","7":[{"8":"3. ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"表锁／行锁信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"： ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"UCrt-1659323079612","4":{"version":1},"5":[{"2":"2","3":"uRph-1659323079611","7":[{"8":"表锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"在这个位置的内容是不同的：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"C64l-1659323079614","4":{"li":"w46C-1659323111879","lt":"unordered","ll":1},"5":[{"2":"2","3":"GYdU-1659323079613","7":[{"8":"表锁：记载着是对哪个表加的锁，还有其他的一些信息。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"lUZP-1659323079618","4":{"li":"w46C-1659323111879","lt":"unordered","ll":1},"5":[{"2":"2","3":"eb51-1659323079617","7":[{"8":"行锁：记载了三个重要的信息：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"gBRy-1659323079622","4":{"li":"w46C-1659323111879","lt":"unordered","ll":2},"5":[{"2":"2","3":"3fmp-1659323079621","7":[{"8":"Space ID ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：记录所在表空间。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"nxjk-1659323079624","4":{"li":"w46C-1659323111879","lt":"unordered","ll":2},"5":[{"2":"2","3":"Dlnj-1659323079623","7":[{"8":"Page Number ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：记录所在页号。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"BMSl-1659323079626","4":{"li":"w46C-1659323111879","lt":"unordered","ll":2},"5":[{"2":"2","3":"G14X-1659323079625","7":[{"8":"n_bits ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"KLl9-1659323079630","4":{"li":"w46C-1659323111879","lt":"unordered","ll":2},"5":[{"2":"2","3":"rYfA-1659323079629","7":[{"8":"n_bits ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性代表使用了多少比特位。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"VpRv-1659323117446","5":[{"2":"2","3":"z6eO-1659323117444","7":[{"8":"n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后也不至于重新分配锁结构","9":[{"0":"#777777","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"ySx7-1659321134049","5":[{"2":"2","3":"yJAe-1659321134047","7":[{"8":"4. type_mode ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：这是一个32位的数，被分成了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"lock_mode ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"lock_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"和 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"rec_lock_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"三个部分","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"mftv-1659323152556","4":{"version":1,"u":"https://note.youdao.com/yws/res/d/WEBRESOURCE11ba3a2343cb53d764695c8c5ce7f97d","w":576,"h":199},"6":"im"},{"3":"LOoC-1659323122365","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":1},"5":[{"2":"2","3":"2zCE-1659323122363","7":[{"8":"锁的模式（ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"lock_mode ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），占用低4位，可选的值如下：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Odk1-1659323206477","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"rEgc-1659323206476","7":[{"8":"LOCK_IS ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"0 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示共享意向锁，也就是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"IS","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"lppU-1659323206479","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"ypR4-1659323206478","7":[{"8":"LOCK_IX ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"1 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示独占意向锁，也就是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"IX","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"yPUX-1659323206481","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"FmTR-1659323206480","7":[{"8":"LOCK_S ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"2 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示共享锁，也就是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"S","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"oXrV-1659323206483","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"CQHK-1659323206482","7":[{"8":"LOCK_X ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"3 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示独占锁，也就是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"X","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"I7tu-1659323206485","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"qRrY-1659323206484","7":[{"8":"LOCK_AUTO_INC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"4 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"AUTO-INC","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"YrEB-1659323122460","5":[{"2":"2","3":"XucK-1659323122459","7":[{"8":"在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和 LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"0JOb-1659323220161","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":1},"5":[{"2":"2","3":"3v1e-1659323220160","7":[{"8":"锁的类型（ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"lock_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），占用第5～8位，不过现阶段只有第5位和第6位被使用：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"ghLf-1659323232932","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"k9o9-1659323232931","7":[{"8":"LOCK_TABLE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"16 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），也就是当第5个比特位置为1时，表示表级锁。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"kPxr-1659323235837","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"ngjy-1659323235835","7":[{"8":"LOCK_REC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"32 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），也就是当第6个比特位置为1时，表示行级锁","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"NOop-1659323122555","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":1},"5":[{"2":"2","3":"TY6E-1659323122553","7":[{"8":"行锁的具体类型（ ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"rec_lock_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"），使用其余的位来表示。只有在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"lock_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的值为","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOCK_REC ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"hfCm-1659323256239","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"TSXE-1659323256238","7":[{"8":"LOCK_ORDINARY ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"0 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"next-key","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"63fV-1659323258248","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"0KEg-1659323258246","7":[{"8":"LOCK_GAP ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"512 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：也就是当第10个比特位置为1时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"gap","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"5P5w-1659323259280","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"9v4N-1659323259279","7":[{"8":"LOCK_REC_NOT_GAP ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"1024 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：也就是当第11个比特位置为1时，表示正经 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"记录锁 ","9":[{"0":"#e96900","2":"c"},{"0":"NSimSun","2":"ff"},{"0":16,"2":"fs"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"OHFe-1659323262807","4":{"li":"GmD2-1659323210072","lt":"unordered","ll":2},"5":[{"2":"2","3":"QG64-1659323262805","7":[{"8":"LOCK_INSERT_INTENTION ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"2048 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"）：也就是当第12个比特位置为1时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"iIWb-1659323122652","4":{"li":"DoPF-1659323897414","lt":"unordered","ll":1},"5":[{"2":"2","3":"w8kN-1659323122650","7":[{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性呢？基于内存空间的节省，所以把 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性放到了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"type_mode ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"这个32位的数字中：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"kQj1-1659323890063","4":{"li":"DoPF-1659323897414","lt":"unordered","ll":2},"5":[{"2":"2","3":"8P7E-1659323890062","7":[{"8":"LOCK_WAIT ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（十进制的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"256 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"） ：当第9个比特位置为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"1 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"true ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，也就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"0 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"is_waiting ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"false ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，也就是当前事务获取锁成功。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"kh97-1659323122762","5":[{"2":"2","3":"mWtx-1659323122760","7":[{"8":"5. ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"其他信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"poPc-1659323926041","4":{"version":1},"5":[{"2":"2","3":"QDHV-1659323926040","7":[{"8":"为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"wS3k-1659323926043","4":{"version":1},"5":[{"2":"2","3":"SRPZ-1659323926042","7":[{"8":"6. ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"一堆比特位 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"d2Y7-1659323926045","4":{"version":1},"5":[{"2":"2","3":"T5El-1659323926044","7":[{"8":"如果是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"行锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"n_bits ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性表示的。InnoDB数据页中的每条记录在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"记录头信息 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"中都包含一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"heap_no ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"属性，伪记录 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Infimum ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"heap_no ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"值为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"0 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Supremum ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"heap_no ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"值为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"1 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，之后每插入一条记录， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"heap_no ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"值就增1。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁结构 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"heap_no ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，即一个比特位映射到页内的一条记录。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"OR3E-1659323122860","4":{"l":"h1"},"5":[{"2":"2","3":"7tQm-1659323122859","7":[{"8":"锁监控    工具","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"doHZ-1659323122955","5":[{"2":"2","3":"2ASW-1659323122954","7":[{"8":"关于MySQL锁的监控，我们一般可以通过检查 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"InnoDB_row_lock ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"等状态变量来分析系统上的行锁的争夺情况","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"HZJz-1659323995108","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"XPlq-1659323995107","5":[{"2":"2","3":"3s3F-1659323123065","7":[{"8":"show status like 'innodb_row_lock%'; "}]}],"6":"cl"}],"6":"cd"},{"3":"QErG-1659323941638","5":[{"2":"2","3":"qtNv-1659323941637","7":[{"8":"对各个状态量的说明如下：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"h5vm-1659324001277","4":{"li":"VhQF-1659324003735","lt":"unordered","ll":1},"5":[{"2":"2","3":"LaAJ-1659324001276","7":[{"8":"Innodb_row_lock_current_waits：当前正在等待锁定的数量；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"7D4f-1659324001279","4":{"li":"VhQF-1659324003735","lt":"unordered","ll":1},"5":[{"2":"2","3":"hF20-1659324001278","7":[{"8":"Innodb_row_lock_time ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：从系统启动到现在锁定总时间长度；（等待总时长）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"dtwF-1659324001281","4":{"li":"VhQF-1659324003735","lt":"unordered","ll":1},"5":[{"2":"2","3":"8Ab9-1659324001280","7":[{"8":"Innodb_row_lock_time_avg ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：每次等待所花平均时间；（等待平均时长）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"gkGO-1659324001283","4":{"li":"VhQF-1659324003735","lt":"unordered","ll":1},"5":[{"2":"2","3":"IqGz-1659324001282","7":[{"8":"Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Pvbj-1659324001286","4":{"li":"VhQF-1659324003735","lt":"unordered","ll":1},"5":[{"2":"2","3":"eK0h-1659324001284","7":[{"8":"Innodb_row_lock_waits ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：系统启动后到现在总共等待的次数；（等待总次数）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"e1IX-1659323942145","5":[{"2":"2","3":"epSw-1659323942143","7":[{"8":"对于这5个状态变量，比较重要的3个见上面（橙色）。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"KrrV-1659323942243","4":{"l":"h3"},"5":[{"2":"2","3":"EFlT-1659323942241","7":[{"8":"其他监控方法：","9":[{"2":"b"},{"0":"#880000","2":"c"}]}]}],"6":"h"},{"3":"FHUn-1659324096756","4":{"version":1},"5":[{"2":"2","3":"wq65-1659324096755","7":[{"8":"MySQL把事务和锁的信息记录在了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"information_schema ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"库中，涉及到的三张表分别是","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"INNODB_TRX ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"、","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":" ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"},{"2":"d"}]},{"8":"INNODB_LOCKS","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"2":"d"}]},{"8":" ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"和","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":" ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"},{"2":"d"}]},{"8":"INNODB_LOCK_WAITS","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"2":"d"}]},{"8":" ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"gZkB-1659324096760","4":{"version":1},"5":[{"2":"2","3":"mvIs-1659324096759","7":[{"8":"MySQL5.7","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"及之前 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"aifc-1659324102907","4":{"version":1},"5":[{"2":"2","3":"qMpU-1659324102905","7":[{"8":"MySQL8.0删除了information_schema.INNODB_LOCKS，添加了 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"performance_schema.data_locks ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同，performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。同时，information_schema.INNODB_LOCK_WAITS也被","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"performance_schema.data_lock_waits ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"所代替。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"KZY5-1659324204154","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"Yuxl-1659324204153","5":[{"2":"2","3":"FIwb-1659323942349","7":[{"8":"#查询正在被锁阻塞的sql语句"}]}],"6":"cl"},{"3":"69OR-1659324215094","5":[{"2":"2","3":"KazA-1659324215093","7":[{"8":"SELECT * FROM information_schema.INNODB_TRX\\G; "}]}],"6":"cl"},{"3":"wQGT-1659324222488","5":[{"2":"2","3":"baMx-1659324222486","7":[{"8":"#查询锁等待情况"}]}],"6":"cl"},{"3":"pal7-1659324222619","5":[{"2":"2","3":"vyEU-1659324222617","7":[{"8":"SELECT * FROM data_lock_waits\\G;"}]}],"6":"cl"},{"3":"nEHD-1659324307122","5":[{"2":"2","3":"Tn0P-1659324307119","7":[{"8":"SELECT * FROM performance_schema.data_lock_waits\\G;"}]}],"6":"cl"}],"6":"cd"},{"3":"l4sI-1659324369075","5":[{"2":"2","3":"nL2t-1659324369076"}]}],"title":"","__compress__":true}
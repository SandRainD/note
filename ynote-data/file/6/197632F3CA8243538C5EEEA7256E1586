<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>8951-1636706111679</coId><text>将应用和环境打包成一个镜像！</text><inline-styles><font-size><from>0</from><to>14</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4833-1636706748643</coId><text>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</text><inline-styles><font-size><from>0</from><to>39</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2637-1636706748643</coId><text>MySQL，容器删了，删库跑路！需求：MySQL数据可以存储在本地！</text><inline-styles><font-size><from>0</from><to>34</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9336-1636706748643</coId><text>容器之间可以有一个数据共享技术！Docker容器中产生的数据，同步到本地！</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6231-1636706748643</coId><text>这就是卷技术，目录的挂载，将我们容器内的目录挂载到linux目录上面！</text><inline-styles><font-size><from>0</from><to>35</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>0034-1636706748643</coId><text/><inline-styles/><styles/></para><heading compat="true" level="1"><coId>4137-1636706763460</coId><text>1、使用数据卷</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>7</to><value>28</value></font-size></inline-styles><styles/></heading><para><coId>8930-1636706775484</coId><text>方式一，直接使用命令来挂载，同步是永久性的，重启容器效果依旧存在(生效)</text><inline-styles/><styles/></para><para><coId>7144-1636706906190</coId><text>docker run -it -v 主机目录：容器目录 【centos /bin/bash】</text><inline-styles/><styles/></para><para><coId>7388-1636707215837</coId><text/><inline-styles/><styles/></para><para><coId>8683-1636707398516</coId><text>实战mysql：</text><inline-styles><font-size><from>0</from><to>8</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>8995-1636711167153</coId><text>1获取镜像</text><inline-styles><font-size><from>0</from><to>5</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2729-1636711183459</coId><text>2启动运行docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw --name some-mysql mysql:tag（-d后台运行，-p端口映射，-v挂载卷，-e环境配置，--name容器名字）</text><inline-styles><font-size><from>0</from><to>207</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7418-1636707398664</coId><text/><inline-styles/><styles/></para><para><coId>9244-1636713900061</coId><text/><inline-styles/><styles/></para><para><coId>7131-1636713900218</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>4619-1636713900355</coId><text>匿名挂载和具名挂载</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>8736-1636715511087</coId><text>匿名挂载：</text><inline-styles><font-size><from>0</from><to>5</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2438-1636715606817</coId><text>-v 容器内路径</text><inline-styles><color><from>0</from><to>8</to><value>#383a42</value></color></inline-styles><styles/></para><para><coId>4450-1636715511087</coId><text>docker run -d -P --name nginx01 -v /etc/nginx nginx     # -P 随机指定端口</text><inline-styles><italic><from>56</from><to>67</to><value>true</value></italic><color><from>0</from><to>56</to><value>#383a42</value></color><color><from>56</from><to>67</to><value>#a0a1a7</value></color></inline-styles><styles/></para><para><coId>4112-1636715511087</coId><text/><inline-styles/><styles/></para><para><coId>4727-1636715636786</coId><text># 查看所有volume的情况</text><inline-styles/><styles/></para><para><coId>8340-1636715636786</coId><text>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker volume ls</text><inline-styles/><styles/></para><para><coId>4300-1636715636786</coId><text>DRIVER              VOLUME NAME</text><inline-styles/><styles/></para><para><coId>6092-1636715636786</coId><text>local               561b81a03506f31d45ada3f9fb7bd8d7c9b5e0f826c877221a17e45d4c80e096</text><inline-styles/><styles/></para><para><coId>1070-1636715636786</coId><text>local               36083fb6ca083005094cbd49572a0bffeec6daadfbc5ce772909bb00be760882</text><inline-styles/><styles/></para><para><coId>5556-1636715756322</coId><text># 这里发现，这种情况就是匿名挂载，我们在-v 后面只写了容器内的路径，没有写容器外的路径！</text><inline-styles><italic><from>0</from><to>46</to><value>true</value></italic><color><from>0</from><to>46</to><value>#a0a1a7</value></color></inline-styles><styles/></para><para><coId>6838-1636715756322</coId><text/><inline-styles/><styles/></para><para><coId>3259-1636713900609</coId><text>具名挂载</text><inline-styles><font-size><from>0</from><to>4</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5610-1636707398812</coId><text>docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</text><inline-styles><font-size><from>0</from><to>64</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>8114-1636715926343</coId><text>26da1ec7d4994c76e80134d24d82403a254a4e1d84ec65d5f286000105c3da17</text><inline-styles><font-size><from>0</from><to>64</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9817-1636715926343</coId><text/><inline-styles/><styles/></para><para><coId>2595-1636715926343</coId><text>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker volume ls</text><inline-styles><font-size><from>0</from><to>50</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4255-1636715926343</coId><text>DRIVER              VOLUME NAME</text><inline-styles><font-size><from>0</from><to>31</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2553-1636715926343</coId><text>local               juming-nginx</text><inline-styles><font-size><from>0</from><to>32</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3777-1636715926343</coId><text> </text><inline-styles><font-size><from>0</from><to>1</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7772-1636715926343</coId><text># 通过-v 卷名：容器内的路径</text><inline-styles><font-size><from>0</from><to>16</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3523-1636715926343</coId><text># 查看一下这个卷</text><inline-styles><font-size><from>0</from><to>9</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4329-1636715926343</coId><text># docker volume inspect juming-nginx</text><inline-styles><font-size><from>0</from><to>36</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5135-1636715926343</coId><text>所有docker容器内的卷，没有指定目录的情况下都是在/var/lib/docker/volumes/xxxxx/_data</text><inline-styles><font-size><from>0</from><to>62</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6735-1636716192401</coId><text>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下使用的是具名挂载</text><inline-styles><font-size><from>0</from><to>36</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>2241-1636716208718</coId><resource-list/><content>{"cells":[{"value":"# 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！\n-v  容器内路径                   # 匿名挂载\n-v  卷名:容器内路径               # 具名挂载\n-v /主机路径:容器内路径            # 指定路径挂载"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>2192-1636716192401</coId><text>拓展：</text><inline-styles><font-size><from>0</from><to>3</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>7300-1636716505130</coId><resource-list/><content>{"cells":[{"value":"# 通过 -v 容器内容路径 ro rw 改变读写权限\nro  readonly    # 只读\nrw  readwrite   # 可读可写\n \ndocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx\ndocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx\n \n# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内容无法操作"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>9123-1636707398950</coId><text/><inline-styles/><styles/></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>5831-1640758592534</coId><text>SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</text><inline-styles><font-size><from>0</from><to>74</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3060-1640764455993</coId><text/><inline-styles/><styles/></para><para><coId>3700-1640764456117</coId><text>一方面因为Zuul1.0已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，是亲儿子产品，值得信赖。而且很多功能Zuul都没有用起来也非常的简单便捷。</text><inline-styles><font-size><from>0</from><to>86</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3936-1640764458211</coId><text>Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Neflix早就发布了最新的Zuul 2.x,但Spring Cloud貌似没有整合计划。而且Netflix相关组件都宣布进入维护期;不知前景如何?</text><inline-styles><font-size><from>0</from><to>110</to><value>16</value></font-size><color><from>10</from><to>17</to><value>#df402a</value></color></inline-styles><styles/></para><para><coId>1724-1640764458211</coId><text>多方面综合考虑Gateway是很理想的网关选择。</text><inline-styles><font-size><from>0</from><to>24</to><value>16</value></font-size></inline-styles><styles/></para><heading compat="true" level="3"><coId>2545-1640764458211</coId><text/><inline-styles/><styles/></heading><heading compat="true" level="3"><coId>6953-1640764543278</coId><text>Spring Cloud Gateway特性:</text><inline-styles><bold><from>0</from><to>23</to><value>true</value></bold><font-size><from>0</from><to>23</to><value>16</value></font-size><back-color><from>0</from><to>23</to><value>#FAE220</value></back-color></inline-styles><styles/></heading><para><coId>2279-1640764539575</coId><text>基于Spring Framework 5, Project Reactor和Spring Boot 2.0进行构建;</text><inline-styles/><styles/></para><para><coId>2572-1640764558552</coId><text>动态路由:能够匹配任何请求属性;</text><inline-styles/><styles/></para><para><coId>5367-1640764539575</coId><text>可以对路由指定Predicate(断言）和Filter (过滤器)；</text><inline-styles/><styles/></para><para><coId>3645-1640764577595</coId><text>集成Hystrix的断路器功能;</text><inline-styles/><styles/></para><para><coId>4335-1640764539575</coId><text>集成 Spring Cloud服务发现功能;</text><inline-styles/><styles/></para><para><coId>2783-1640764539575</coId><text>易于编写的 Predicate (断言）和Filter (过滤器);</text><inline-styles/><styles/></para><para><coId>7593-1640764591203</coId><text>请求限流功能;</text><inline-styles/><styles/></para><para><coId>1053-1640764539575</coId><text>支持路径重写。</text><inline-styles/><styles/></para><para><coId>7858-1640764539575</coId><text/><inline-styles/><styles/></para><para><coId>5448-1640764456249</coId><text>在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是Netflix提供的Zuul:</text><inline-styles><font-size><from>0</from><to>60</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5062-1640764712993</coId><text>1、Zuul 1.x，是一个基于阻塞I/O的APl Gateway</text><inline-styles><font-size><from>0</from><to>33</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9934-1640764712993</coId><text>2、Zuul 1.x基于Servlet 2.5使用阻塞架构它不支持任何长连接(如WebSocket)Zuul的设计模式和Nginx较像，每次V/О操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java 实现，而VM本身会有第—次加载较慢的情况，使得Zuul的性能相对较差。</text><inline-styles><font-size><from>0</from><to>167</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7840-1640764712993</coId><text>3、Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul 2.x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway的RPS(每秒请求数）是Zuul的1.6倍。</text><inline-styles><font-size><from>0</from><to>140</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4564-1640764712993</coId><text>4、Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot2之上，使用非阻塞API。</text><inline-styles><font-size><from>0</from><to>84</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6521-1640764712993</coId><text>5、Spring Cloud Gateway还支持WebSocket，并且与Spring紧密集成拥有更好的开发体验</text><inline-styles><font-size><from>0</from><to>57</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3050-1640764712993</coId><text/><inline-styles/><styles/></para><para><coId>5429-1640764870036</coId><text>传统的Web框架，比如说: struts2，springmvc等都是基于Servlet APl与Servlet容器基础之上运行的。但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程(Spring5必须让你使用java8）</text><inline-styles><font-size><from>67</from><to>221</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5532-1640764976293</coId><text>Spring WebFlux是Spring 5.0引入的新的响应式框架，区别于Spring MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</text><inline-styles><font-size><from>0</from><to>100</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3170-1640764456463</coId><text/><inline-styles/><styles/></para><para><coId>7019-1640764456593</coId><text/><inline-styles/><styles/></para><para><coId>6330-1640764456722</coId><text>三大核心概念：</text><inline-styles><font-size><from>0</from><to>7</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7114-1640765096746</coId><text>Route路由 路由是构建网关的基本模块，它由ID，目标url，一系列的断言和过滤器组成，如果断言为true则匹配该路由</text><inline-styles><font-size><from>0</from><to>60</to><value>16</value></font-size><back-color><from>0</from><to>7</to><value>#FAE220</value></back-color></inline-styles><styles/></para><para><coId>7517-1640765103710</coId><text>Predicate断言 参考的是Java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果</text><inline-styles><font-size><from>0</from><to>85</to><value>16</value></font-size><back-color><from>0</from><to>12</to><value>#FAE220</value></back-color></inline-styles><styles/></para><para><coId>1030-1640765111372</coId><text>Filter过滤   指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size><back-color><from>0</from><to>9</to><value>#FAE220</value></back-color></inline-styles><styles/></para><para><coId>5752-1640764456829</coId><text/><inline-styles/><styles/></para><para><coId>4035-1640764457070</coId><text>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</text><inline-styles><font-size><from>0</from><to>48</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5812-1640766928345</coId><text>predicate就是我们的匹配条件;</text><inline-styles><font-size><from>0</from><to>19</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2844-1640766965075</coId><text>而flter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</text><inline-styles><font-size><from>0</from><to>54</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2895-1640766928345</coId><text/><inline-styles/><styles/></para><para><coId>2013-1640764457161</coId><text>Gateway的核心逻辑：路由转发+执行过滤器链</text><inline-styles><font-size><from>0</from><to>24</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#df402a</value></color></inline-styles><styles/></para><para><coId>8359-1640767107637</coId><text>官网解释：</text><inline-styles><font-size><from>0</from><to>5</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>0027-1640767103515</coId><text>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</text><inline-styles><font-size><from>0</from><to>48</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9839-1640767104699</coId><text>predicate就是我们的匹配条件;而flter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</text><inline-styles><font-size><from>0</from><to>73</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>0064-1640767104699</coId><text/><inline-styles/><styles/></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>3718-1611632405185</coId><text> AOP(Aspect Oriented Programming)</text><inline-styles/><styles/></para><para><coId>7830-1611640354780</coId><text>（1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</text><inline-styles/><styles/></para><para><coId>7671-1611640361948</coId><text>​ （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</text><inline-styles/><styles/></para><para><coId>1831-1611640709081</coId><text/><inline-styles/><styles/></para><para><coId>2414-1611640709900</coId><text/><inline-styles/><styles/></para><heading compat="true" level="1"><coId>6656-1611640710192</coId><text>AOP底层原理：</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>28</value></font-size></inline-styles><styles/></heading><para><coId>2856-1611640922739</coId><text>AOP 底层使用动态代理 ，动态代理有两种情况：</text><inline-styles/><styles/></para><para><coId>7678-1611640926607</coId><text>第一种 有接口情况，使用 JDK 动态代理 ；创建接口实现类代理对象，增强类的方法</text><inline-styles/><styles/></para><image><coId>8046-1611640969160</coId><source>https://note.youdao.com/yws/res/11014/B2BDA9A414E6467D98B814F010965CFF</source><text/><styles><width>620</width><height>146</height></styles></image><para><coId>2423-1611640969160</coId><text>第二种 没有接口情况，使用 CGLIB 动态代理；创建子类的代理对象，增强类的方法</text><inline-styles/><styles/></para><image><coId>1064-1611642555583</coId><source>https://note.youdao.com/yws/res/11021/783959ED8B944609910D9AE66A7FE6AB</source><text/><styles><width>620</width><height>221</height></styles></image><heading compat="true" level="2"><coId>1794-1611642467709</coId><text>使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</text><inline-styles><bold><from>0</from><to>33</to><value>true</value></bold><font-size><from>0</from><to>33</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>6291-1611642467859</coId><text>调用 newProxyInstance 方法，方法有三个参数：</text><inline-styles/><styles/></para><code><coId>4690-1611644437641</coId><text>public static Object newProxyInstance(ClassLoader loader,
                                      Class&lt;?&gt;[] interfaces,
                                      InvocationHandler h)
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>2355-1611642474528</coId><text>​ 第一参数，类加载器</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size><color><from>0</from><to>11</to><value>#555666</value></color></inline-styles><styles><line-height>1.375</line-height></styles></para><para><coId>6098-1611644455655</coId><text>​ 第二参数，增强方法所在的类，这个类实现的接口，支持多个接口</text><inline-styles><italic><from>25</from><to>31</to><value>true</value></italic><font-size><from>0</from><to>31</to><value>16</value></font-size><color><from>0</from><to>31</to><value>#555666</value></color></inline-styles><styles><line-height>1.375</line-height></styles></para><para><coId>4257-1611644455655</coId><text>​ 第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size><color><from>0</from><to>45</to><value>#555666</value></color></inline-styles><styles><line-height>1.375</line-height></styles></para><code><coId>5157-1611652550770</coId><text>public interface UserDao {
    public int add(int a,int b);
    public String update(String id);
}
public class UserDaoImpl implements UserDao{
    @Override
    public int add(int a, int b) {
        return a+b;
    }
    @Override
    public String update(String id) {
        return id;
    }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>6862-1611652609716</coId><text/><inline-styles/><styles/></para><code><coId>5079-1611652609716</coId><text>public class JDKProxy {
    public static void main(String[] args) {
        Class[] interfaces={UserDao.class};
//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() {
//            @Override
//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
//                return null;
//            }
//        });
        UserDaoImpl userDaoImpl = new UserDaoImpl();
        UserDao userdao = (UserDao)Proxy.newProxyInstance(
                JDKProxy.class.getClassLoader(),
                interfaces,
                new UserDaoProxy(userDaoImpl));
        userdao.add(1,2);
    }
}
class UserDaoProxy implements InvocationHandler{
    private  Object obj;
    //把被创建代理对象的类的方法传入
    public UserDaoProxy(Object obj){
        this.obj=obj;
    }
    //增强的逻辑方法
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //代理类的方法之前
        System.out.println("被增强方法之前执行"+method.getName()+"传递的参数"+ Arrays.toString(args));
        //被增强的方法执行
        Object res = method.invoke(obj, args);
        //代理类的方法之后
        System.out.println("被增强方法之后执行"+obj);
        return res;
    }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>6058-1611652606445</coId><text>术语</text><inline-styles><bold><from>0</from><to>2</to><value>true</value></bold><font-size><from>0</from><to>2</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>3167-1611652526729</coId><text>​ a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</text><inline-styles/><styles/></para><para><coId>1079-1611652526729</coId><text>​ b）切入点：实际被真正增强的方法称为切入点</text><inline-styles/><styles/></para><para><coId>3472-1611652526729</coId><text>​ c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</text><inline-styles/><styles/></para><para><coId>0061-1611652526729</coId><text>​ 1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</text><inline-styles/><styles/></para><para><coId>4251-1611652526729</coId><text>​ d）切面：把通知应用到切入点过程</text><inline-styles/><styles/></para><heading compat="true" level="1"><coId>8310-1611642474654</coId><text>AOP操作</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>28</value></font-size></inline-styles><styles/></heading><para><coId>9029-1611654645212</coId><text>​ a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</text><inline-styles/><styles/></para><para><coId>7086-1611654673212</coId><text>​ b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现 （2）基于注解方式实现（使用）</text><inline-styles/><styles/></para><para><coId>3255-1611642474689</coId><text> c )  切入点表达式：</text><inline-styles/><styles/></para><para><coId>1718-1611655300549</coId><text>（1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>1010-1611655309686</coId><text>（2）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>2230-1611655309686</coId><text>（3）例子如下：</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7477-1611655309686</coId><text>    例 1：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>9935-1611655309686</coId><text>		execution(* com.atguigu.dao.BookDao.* (..))</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><heading compat="true" level="2"><coId>3536-1611724546825</coId><text>有多个增强类对同一个方法进行增强，设置增强类优先级</text><inline-styles><bold><from>0</from><to>25</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>20</value></font-size></inline-styles><styles/></heading><code><coId>7188-1611724568810</coId><text>//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高
@Component
@Aspect
@Order(1)
public class PersonProxy{ }
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>5490-1611655309686</coId><text>1.AspectJ 注解</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size></inline-styles><styles/></heading><code><coId>2673-1611716211077</coId><text>//1、创建类，在类里面定义方法
@Component
public class User {
 public void add() {
 System.out.println("add.......");
 }
}
//2、创建增强类（编写增强逻辑）
//（1）在增强类里面，创建方法，让不同方法代表不同通知类型
//增强的类
@Component
@Aspect//生成代理对象
public class UserProxy {
    //相同切入点抽取
    @Pointcut(value = "execution(* com.atguigu.spring5.aopanno.User.add(..))")
    public void pointdemo() {
    }
    //前置通知
    //@Before注解表示作为前置通知
    @Before(value = "pointdemo()")//相同切入点抽取使用！
    public void before() {
        System.out.println("before.........");
    }
    //后置通知（返回通知）
    @AfterReturning(value = "execution(* com.atguigu.spring5.aopanno.User.add(..))")
    public void afterReturning() {
        System.out.println("afterReturning.........");
    }
    //最终通知
    @After(value = "execution(* com.atguigu.spring5.aopanno.User.add(..))")
    public void after() {
        System.out.println("after.........");
    }
    //异常通知
    @AfterThrowing(value = "execution(* com.atguigu.spring5.aopanno.User.add(..))")
    public void afterThrowing() {
        System.out.println("afterThrowing.........");
    }
    //环绕通知
    @Around(value = "execution(* com.atguigu.spring5.aopanno.User.add(..))")
    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
        System.out.println("环绕之前.........");
        //被增强的方法执行
        proceedingJoinPoint.proceed();
        System.out.println("环绕之后.........");
    }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>1647-1611716424395</coId><text/><inline-styles/><styles/></para><code><coId>1729-1611716424395</coId><text>&lt;!--3、进行通知的配置--&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;
    &lt;!-- 开启注解扫描 --&gt;
    &lt;context:component-scan base-package="com.atguigu.spring5.aopanno"&gt;&lt;/context:component-scan&gt;

    &lt;!-- 开启Aspect生成代理对象--&gt;
    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;
&lt;/beans&gt;
</text><inline-styles/><styles/><language>xml</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>8946-1611721621192</coId><text>AspectJ 配置文件</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size></inline-styles><styles/></heading><code><coId>6947-1611726647538</coId><text>&lt;!--1、创建两个类，增强类和被增强类，创建方法（同上一样）--&gt;
&lt;!--2、在 spring 配置文件中创建两个类对象--&gt;
&lt;!--创建对象--&gt;
&lt;bean id="book" class="com.atguigu.spring5.aopxml.Book"&gt;&lt;/bean&gt;
&lt;bean id="bookProxy" class="com.atguigu.spring5.aopxml.BookProxy"&gt;&lt;/bean&gt;
&lt;!--3、在 spring 配置文件中配置切入点--&gt;
&lt;!--配置 aop 增强--&gt;
&lt;aop:config&gt;
 &lt;!--切入点--&gt;
 &lt;aop:pointcut id="p" expression="execution(* com.atguigu.spring5.aopxml.Book.buy(..))"/&gt;
 &lt;!--配置切面--&gt;
 &lt;aop:aspect ref="bookProxy"&gt;
 &lt;!--增强作用在具体的方法上--&gt;
 &lt;aop:before method="before" pointcut-ref="p"/&gt;
 &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</text><inline-styles/><styles/><language>xml</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>6329-1611721621192</coId><text>完全注解开发</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>2943-1611728668008</coId><text>（1）创建配置类，不需要创建 xml 配置文件 </text><inline-styles/><styles/></para><para><coId>7430-1611728826830</coId><text>@Configuration</text><inline-styles/><styles/></para><para><coId>9779-1611728826830</coId><text>@ComponentScan(basePackages = {"com.atguigu"})</text><inline-styles/><styles/></para><para><coId>3580-1611728826830</coId><text>@EnableAspectJAutoProxy(proxyTargetClass = true)</text><inline-styles/><styles/></para><para><coId>5523-1611728826830</coId><text>public class ConfigAop {</text><inline-styles/><styles/></para><para><coId>3320-1611728826830</coId><text>}</text><inline-styles/><styles/></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="1395-1611124717100" type="unordered"/></head><body><heading compat="true" level="1"><coId>7737-1611124679000</coId><text>（Ioc—Inversion of Control 控制反转）</text><inline-styles><bold><from>0</from><to>31</to><value>true</value></bold><font-size><from>0</from><to>31</to><value>28</value></font-size></inline-styles><styles/></heading><heading compat="true" level="1"><coId>9834-1611637802709</coId><text>IOC容器</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>28</value></font-size></inline-styles><styles/></heading><list-item level="1" list-id="1395-1611124717100"><coId>7248-1611124715917</coId><text>IOC底层原理</text><inline-styles/><styles/></list-item><list-item level="1" list-id="1395-1611124717100"><coId>7090-1611124727071</coId><text>IOC接口（BeanFactory）</text><inline-styles/><styles/></list-item><list-item level="1" list-id="1395-1611124717100"><coId>1059-1611124744036</coId><text>IOC操作Bean管理（基于xml）</text><inline-styles/><styles/></list-item><list-item level="1" list-id="1395-1611124717100"><coId>1982-1611124766370</coId><text>IOC操作Bean管理（基于注解）</text><inline-styles/><styles/></list-item><para><coId>1129-1611124707823</coId><text>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</text><inline-styles/><styles/></para><para><coId>3585-1611128270946</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><heading compat="true" level="3"><coId>3032-1611128239028</coId><text>Spring提供IOC容器实现两种方式：（两个接口）</text><inline-styles><bold><from>0</from><to>26</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>16</value></font-size></inline-styles><styles/></heading><para><coId>6472-1611128279727</coId><text>(1) BeanFactory：IOC容器基本实现，是Spring内部使用的接口，不提供开发人员使用</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>2350-1611128489679</coId><text>*加载配置文件的时候不会创建对象，使用对象的时候才会创建</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>9116-1611128352750</coId><text>(2) ApplicationContext：BeanFactory的子接口</text><inline-styles><color><from>4</from><to>22</to><value>#df402a</value></color></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>2232-1611128265160</coId><text>*加载配置文件的时候就会创建对象</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><image><coId>3563-1611129568467</coId><source>https://note.youdao.com/yws/res/10671/7A4DB35AA9E849BD8434F9CCB620DF49</source><text/><styles><width>367</width><float>right</float><height>154</height></styles></image><para><coId>6820-1611128757771</coId><text/><inline-styles/><styles/></para><para><coId>6174-1611129571441</coId><text>ApplicationContext接口的实现类：</text><inline-styles/><styles/></para><para><coId>8048-1611128779151</coId><text>FileSystem表示需要写出文件的绝对路径，</text><inline-styles/><styles/></para><para><coId>2776-1611129088312</coId><text>CLassPath表示需要写出文件的相对(相对于SRC目录)路径</text><inline-styles/><styles/></para><para><coId>4056-1611129121476</coId><text/><inline-styles/><styles/></para><para><coId>3014-1611129587720</coId><text/><inline-styles/><styles/></para><code><coId>1089-1611631975965</coId><text>public void  test(){
    ApplicationContext context=new ClassPathXmlApplicationContext("bean1.xml");
    UserService service=context.getBean("userService",UserService.class);
    System.out.println(service);
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>3325-1611631975965</coId><text/><inline-styles/><styles/></para></body></note>
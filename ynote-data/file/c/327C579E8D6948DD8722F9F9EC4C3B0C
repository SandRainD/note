<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="7980-1611821228899" type="ordered"/></head><body><para><coId>5398-1587349142586</coId><text>事务由单独单元的一个或多个SQL语句组成，在这个单元中，每个mysql语句是相互依赖的。</text><inline-styles/><styles/></para><para><coId>3070-1587350223768</coId><text>而整个单独单元作为一个不可分割的整体，如果单元中每条SQL语句一旦执行失败或产生错误，整个单元将回滚.</text><inline-styles/><styles/></para><para><coId>2240-1587360345393</coId><text>每启动一个mysql程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量@@tx_isolation,表示当前的事务隔离级别。</text><inline-styles/><styles/></para><para><coId>9979-1587350702199</coId><text/><inline-styles/><styles/></para><para><coId>6027-1587360459384</coId><text>select @@tx_isolation;查看当前的mysql隔离级别</text><inline-styles/><styles/></para><para><coId>3960-1587360497137</coId><text>set transaction isolation level reed committed;设置当前mysql连接的隔离级别</text><inline-styles/><styles/></para><para><coId>2320-1587360527486</coId><text>set global transaction isolation level reed committed;设置数据库系统的全局隔离级别</text><inline-styles/><styles/></para><para><coId>7681-1587350674162</coId><text>show ENGINES;   展示使用的存储引擎</text><inline-styles/><styles/></para><para><coId>9081-1587350814243</coId><text/><inline-styles/><styles/></para><para><coId>8048-1587350814430</coId><text>事物的属性ACID：</text><inline-styles/><styles/></para><para><coId>7740-1587350829342</coId><text>原子性：指事务是一个不可分割的单位，事务中的操作要么都发生，要么都不发生</text><inline-styles/><styles/></para><para><coId>2534-1587350953780</coId><text>一致性：事务必须使数据库从一个一致状态变换到另一个一致的状态；</text><inline-styles/><styles/></para><para><coId>7055-1587351057014</coId><text>隔离性：事物的执行不能被其他事物干扰；</text><inline-styles/><styles/></para><para><coId>4053-1587351096435</coId><text>持久性：事务一旦被提交，他对数据库的改变就是永久性的。</text><inline-styles/><styles/></para><para><coId>9585-1587351330584</coId><text/><inline-styles/><styles/></para><para><coId>1990-1587351330760</coId><text/><inline-styles/><styles/></para><para><coId>1438-1587351331052</coId><text>事务的创建：</text><inline-styles/><styles/></para><para><coId>9098-1587351387215</coId><text>隐式事务：事务没有明显的开启和结束标记</text><inline-styles/><styles/></para><para><coId>6425-1587351739202</coId><text>show VARIABLES LIKE 'autocommit';</text><inline-styles/><styles/></para><para><coId>8669-1587351500208</coId><text>显式事务：先设置自动提交功能禁用 Set autocommit=0;</text><inline-styles/><styles/></para><para><coId>6531-1587351588078</coId><text>①：开启事务</text><inline-styles/><styles/></para><para><coId>5860-1587351610575</coId><text>Set autocommit=0;</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>5570-1587351615808</coId><text>start transaction;可选</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>3477-1587351641609</coId><text>②：编写事务中的SQL语句</text><inline-styles/><styles/></para><para><coId>6130-1587351672105</coId><text>③：结束事务：</text><inline-styles/><styles/></para><para><coId>3063-1587351685383</coId><text>commit;提交事务</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>3036-1587351700562</coId><text>rollback;回滚事务</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>3134-1587361208638</coId><text>回滚点   savapoint   的使用</text><inline-styles/><styles/></para><image><coId>4612-1587361295251</coId><source>https://note.youdao.com/yws/res/5136/57EE6D0BC1B64E97907FA8B5ADB1B960</source><text/><styles><width>484</width><height>203</height></styles></image><para><coId>9323-1587361295251</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>1425-1587361300256</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>4221-1587361300503</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><image><coId>1010-1587352435538</coId><source>https://note.youdao.com/yws/res/5101/D868A04A17704AB4A7E87D2643E8E5D7</source><text/><styles><width>620</width><height>315</height></styles></image><para><coId>7020-1587352459000</coId><text/><inline-styles/><styles/></para><image><coId>9659-1587352459000</coId><source>https://note.youdao.com/yws/res/5104/77B7675D6FCD4D76A1E15C2525E8992A</source><text/><styles><width>620</width><height>176</height></styles></image><para><coId>2725-1587352563041</coId><text>　　1、脏读</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold></inline-styles><styles/></para><para><coId>9850-1611821102090</coId><text>　　　　　脏读指一个事务读取了另外一个事务未提交的数据。</text><inline-styles><bold><from>5</from><to>27</to><value>true</value></bold><font-size><from>0</from><to>28</to><value>13</value></font-size><color><from>5</from><to>27</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>4023-1611821102090</coId><text>　　　　　这是非常危险的，假设Ａ向Ｂ转帐100元，对应sql语句如下所示</text><inline-styles><font-size><from>0</from><to>36</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8558-1611821102090</coId><text>    　　　　　　1.update account set money=money+100 where name='B';    </text><inline-styles><font-size><from>0</from><to>66</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>9687-1611821102090</coId><text>    　　　　　　2.update account set money=money-100  where name='A';</text><inline-styles><font-size><from>0</from><to>63</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8433-1611821102090</coId><text>    　　　 当第1条sql执行完，第2条还没执行(A未提交时)，如果此时Ｂ查询自己的帐户，就会发现自己多了100元钱。如果A等B走后再回滚，B就会损失100元。　　</text><inline-styles><font-size><from>0</from><to>84</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8577-1611821102090</coId><text>　　2、不可重复读</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold></inline-styles><styles/></para><para><coId>4770-1611821102090</coId><text>　　不可重复读指在一个事务内读取表中的某一行数据，多次读取结果不同。</text><inline-styles><bold><from>2</from><to>34</to><value>true</value></bold><font-size><from>0</from><to>34</to><value>13</value></font-size><color><from>2</from><to>34</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>6900-1611821102090</coId><text>　　例如银行想查询A帐户余额，第一次查询A帐户为200元，此时A向帐户内存了100元并提交了，银行接着又进行了一次查询，此时A帐户为300元了。银行两次查询不一致，可能就会很困惑，不知道哪次查询是准的。</text><inline-styles><font-size><from>0</from><to>101</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>9310-1611821102090</coId><text>　　不可重复读和脏读的区别是，脏读是读取前一事务未提交的脏数据，不可重复读是重新读取了前一事务已提交的数据。</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><bold><from>15</from><to>53</to><value>true</value></bold><font-size><from>0</from><to>54</to><value>13</value></font-size><color><from>0</from><to>13</to><value>#ff0000</value></color><color><from>15</from><to>53</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>4693-1611821102090</coId><text>　　很多人认为这种情况就对了，无须困惑，当然是后面的为准。我们可以考虑这样一种情况，比如银行程序需要将查询结果分别输出到电脑屏幕和写到文件中，结果在一个事务中针对输出的目的地，进行的两次查询不一致，导致文件和屏幕中的结果不一致，银行工作人员就不知道以哪个为准了。</text><inline-styles><font-size><from>0</from><to>131</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5939-1611821102090</coId><text>　　3、虚读(幻读)</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold></inline-styles><styles/></para><para><coId>7983-1611821102090</coId><text>　　虚读(幻读)是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</text><inline-styles><bold><from>2</from><to>39</to><value>true</value></bold><font-size><from>0</from><to>40</to><value>13</value></font-size><color><from>2</from><to>39</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>1713-1611821102090</coId><text>　　如丙存款100元未提交，这时银行做报表统计account表中所有用户的总额为500元，然后丙提交了，这时银行再统计发现帐户为600元了，造成虚读同样会使银行不知所措，到底以哪个为准。</text><inline-styles><font-size><from>0</from><to>93</to><value>13</value></font-size></inline-styles><styles/></para><heading compat="true" level="2"><coId>1977-1587352563041</coId><text>MySQL数据库共定义了四种隔离级别：</text><inline-styles><bold><from>0</from><to>19</to><value>true</value></bold><font-size><from>0</from><to>19</to><value>20</value></font-size></inline-styles><styles/></heading><list-item level="1" list-id="7980-1611821228899"><coId>6558-1611821228908</coId><text>Serializable(串行化)：可避免脏读、不可重复读、虚读情况的发生。</text><inline-styles><font-size><from>0</from><to>38</to><value>13</value></font-size></inline-styles><styles/></list-item><list-item level="1" list-id="7980-1611821228899"><coId>6855-1611821228908</coId><text>Repeatable read(可重复读)：可避免脏读、不可重复读情况的发生。</text><inline-styles><font-size><from>0</from><to>39</to><value>13</value></font-size></inline-styles><styles/></list-item><list-item level="1" list-id="7980-1611821228899"><coId>2020-1611821228908</coId><text>Read committed(读已提交)：可避免脏读情况发生。</text><inline-styles><font-size><from>0</from><to>31</to><value>13</value></font-size></inline-styles><styles/></list-item><list-item level="1" list-id="7980-1611821228899"><coId>7939-1611821228908</coId><text>Read uncommitted(读未提交)：最低级别，以上情况均无法保证。</text><inline-styles><font-size><from>0</from><to>38</to><value>13</value></font-size></inline-styles><styles/></list-item><para><coId>5870-1611821228908</coId><text>　　mysql数据库查询当前事务隔离级别：select @@tx_isolation</text><inline-styles><bold><from>21</from><to>42</to><value>true</value></bold><font-size><from>0</from><to>42</to><value>13</value></font-size><color><from>21</from><to>42</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>3141-1611821228908</coId><text>　　例如：</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>13</value></font-size><color><from>0</from><to>2</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>6070-1611821228908</coId><text>　　</text><inline-styles><font-size><from>0</from><to>2</to><value>13</value></font-size></inline-styles><styles/></para><image><coId>3162-1611821228908</coId><source>https://note.youdao.com/yws/res/11122/12A7909EF04D434BAD13ABE34392925E</source><text/><styles><width>261</width><height>150</height></styles></image><para><coId>6967-1611821228908</coId><text>　　mysql数据库默认的事务隔离级别是：Repeatable read(可重复读)</text><inline-styles><bold><from>2</from><to>19</to><value>true</value></bold><bold><from>21</from><to>42</to><value>true</value></bold><font-size><from>0</from><to>42</to><value>13</value></font-size><color><from>2</from><to>19</to><value>#ff0000</value></color><color><from>21</from><to>42</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>6085-1611821228908</coId><text>　　mysql数据库设置事务隔离级别：set transaction isolation level 隔离级别名</text><inline-styles><bold><from>19</from><to>56</to><value>true</value></bold><font-size><from>0</from><to>56</to><value>13</value></font-size><color><from>19</from><to>56</to><value>#ff0000</value></color></inline-styles><styles/></para><para><coId>8460-1611821299064</coId><text/><inline-styles/><styles/></para><para><coId>2578-1611821299211</coId><text/><inline-styles/><styles/></para><para><coId>8820-1611821299357</coId><text>5.3、使用MySQL数据库演示不同隔离级别下的并发问题</text><inline-styles><bold><from>0</from><to>28</to><value>true</value></bold><font-size><from>0</from><to>28</to><value>16</value></font-size></inline-styles><styles><line-height>1.5</line-height></styles></para><para><coId>7375-1611821299957</coId><text>　　同时打开两个窗口模拟2个用户并发访问数据库</text><inline-styles><font-size><from>0</from><to>23</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>6432-1611821299957</coId><text>1、当把事务的隔离级别设置为read uncommitted时，会引发脏读、不可重复读和虚读</text><inline-styles><bold><from>0</from><to>46</to><value>true</value></bold></inline-styles><styles/></para><para><coId>8748-1611821299957</coId><text>　　A窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>6095-1611821299957</coId><text>　　　　set transaction isolation level  read uncommitted;--设置A用户的数据库隔离级别为Read uncommitted(读未提交)</text><inline-styles><font-size><from>0</from><to>92</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>1982-1611821299957</coId><text>　　　　start transaction;--开启事务</text><inline-styles><font-size><from>0</from><to>28</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>1298-1611821299957</coId><text>　　　　select * from account;--查询A账户中现有的钱，转到B窗口进行操作</text><inline-styles><font-size><from>0</from><to>48</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>2869-1611821299957</coId><text>　　　　select * from account--发现a多了100元，这时候A读到了B未提交的数据（脏读）</text><inline-styles><font-size><from>0</from><to>55</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>2770-1611821299957</coId><text>　　B窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8377-1611821299957</coId><text>　　　　start transaction;--开启事务</text><inline-styles><font-size><from>0</from><to>28</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3981-1611821299957</coId><text>　　　　update account set money=money+100 where name='A';--不要提交，转到A窗口查询</text><inline-styles><font-size><from>0</from><to>68</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5768-1611821299957</coId><text>2、当把事务的隔离级别设置为read committed时，会引发不可重复读和虚读，但避免了脏读</text><inline-styles><bold><from>0</from><to>48</to><value>true</value></bold></inline-styles><styles/></para><para><coId>6443-1611821299957</coId><text>　　A窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>9131-1611821299957</coId><text>　　　　set transaction isolation level  read committed;</text><inline-styles><font-size><from>0</from><to>52</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>9661-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5854-1611821299957</coId><text>　　　　select * from account;--发现a帐户是1000元，转到b窗口</text><inline-styles><font-size><from>0</from><to>45</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3594-1611821299957</coId><text>　　　　select * from account;--发现a帐户多了100,这时候，a读到了别的事务提交的数据，两次读取a帐户读到的是不同的结果（不可重复读）</text><inline-styles><font-size><from>0</from><to>80</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5472-1611821299957</coId><text>　　B窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>4489-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3891-1611821299957</coId><text>　　　　update account set money=money+100 where name='aaa';</text><inline-styles><font-size><from>0</from><to>56</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8580-1611821299957</coId><text>　　　　commit;--转到a窗口</text><inline-styles><font-size><from>0</from><to>18</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3189-1611821299957</coId><text>3、当把事务的隔离级别设置为repeatable read(mysql默认级别)时，会引发虚读，但避免了脏读、不可重复读</text><inline-styles><bold><from>0</from><to>60</to><value>true</value></bold></inline-styles><styles/></para><para><coId>9778-1611821299957</coId><text>　　A窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>2085-1611821299957</coId><text>　　　　set transaction isolation level repeatable read;</text><inline-styles><font-size><from>0</from><to>52</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5467-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3470-1611821299957</coId><text>　　　　select * from account;--发现表有4个记录，转到b窗口</text><inline-styles><font-size><from>0</from><to>42</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8048-1611821299957</coId><text>　　　　select * from account;--可能发现表有5条记录，这时候发生了a读取到另外一个事务插入的数据（虚读）</text><inline-styles><font-size><from>0</from><to>64</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>9378-1611821299957</coId><text>　　B窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>8230-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>7149-1611821299957</coId><text>　　　　insert into account(name,money) values('ggg',1000);</text><inline-styles><font-size><from>0</from><to>55</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>7399-1611821299957</coId><text>　　　　commit;--转到a窗口</text><inline-styles><font-size><from>0</from><to>18</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>3030-1611821299957</coId><text>4、当把事务的隔离级别设置为Serializable时，会避免所有问题</text><inline-styles><bold><from>0</from><to>35</to><value>true</value></bold></inline-styles><styles/></para><para><coId>8358-1611821299957</coId><text>　　A窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>7260-1611821299957</coId><text>　　　　set transaction isolation level Serializable;</text><inline-styles><font-size><from>0</from><to>49</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>5852-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>6331-1611821299957</coId><text>　　　　select * from account;--转到b窗口</text><inline-styles><font-size><from>0</from><to>33</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>2723-1611821299957</coId><text/><inline-styles/><styles/></para><para><coId>6666-1611821299957</coId><text>　　B窗口</text><inline-styles><font-size><from>0</from><to>5</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>1917-1611821299957</coId><text>　　　　start transaction;</text><inline-styles><font-size><from>0</from><to>22</to><value>13</value></font-size></inline-styles><styles/></para><para><coId>6422-1611821299957</coId><text>　　　　insert into account(name,money) values('ggg',1000);--发现不能插入，只能等待a结束事务才能插入</text><inline-styles><font-size><from>0</from><to>77</to><value>13</value></font-size></inline-styles><styles/></para></body></note>
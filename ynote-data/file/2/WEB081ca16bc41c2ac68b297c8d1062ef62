{"2":"1","3":"Ju9C-1621846617594","4":{"version":1,"incompatibleVersion":0,"fv":"0"},"5":[{"3":"3060-1621846615933","4":{"l":"h1"},"5":[{"2":"2","3":"p5PQ-1621846617594","7":[{"8":"数据库调优的措施","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Lwyl-1659062816436","4":{"l":"h3"},"5":[{"2":"2","3":"Cu5y-1659062816435","7":[{"8":"调优的目标","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"kglB-1659062799952","4":{"li":"bE05-1659062824407","lt":"unordered","ll":1},"5":[{"2":"2","3":"cTBT-1659062799951","7":[{"8":"尽可能 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"节省系统资源 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，以便系统可以提供更大负荷的服务。（吞吐量更大）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"KBKV-1659062799955","4":{"li":"bE05-1659062824407","lt":"unordered","ll":1},"5":[{"2":"2","3":"x3YZ-1659062799954","7":[{"8":"合理的结构设计和参数调整，以提高用户操作 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"响应的速度 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。（响应速度更快）","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"q2Mk-1659062799957","4":{"li":"bE05-1659062824407","lt":"unordered","ll":1},"5":[{"2":"2","3":"zmvc-1659062799956","7":[{"8":"减少系统的瓶颈，提高MySQL数据库整体的性能。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"N1Ab-1659062799959","4":{"l":"h3"},"5":[{"2":"2","3":"UxlZ-1659062799958","7":[{"8":"如何定位调优问题","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"gcdl-1659062799961","4":{"version":1},"5":[{"2":"2","3":"kilp-1659062799960","7":[{"8":"如何确定呢？一般情况下，有如下几种方式：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"rI3R-1659062799963","4":{"li":"q49w-1659062835299","lt":"unordered","ll":1},"5":[{"2":"2","3":"w50q-1659062799962","7":[{"8":"用户的反馈（主要）","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Rhjy-1659062799965","4":{"li":"q49w-1659062835299","lt":"unordered","ll":1},"5":[{"2":"2","3":"nlJE-1659062799964","7":[{"8":"日志分析（主要）","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"QT71-1659062799967","4":{"li":"q49w-1659062835299","lt":"unordered","ll":1},"5":[{"2":"2","3":"j2aJ-1659062799966","7":[{"8":"服务器资源使用监控","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"WDC6-1659062799969","4":{"li":"q49w-1659062835299","lt":"unordered","ll":1},"5":[{"2":"2","3":"EDoq-1659062799968","7":[{"8":"数据库内部状况监控","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"OGBj-1659062799971","4":{"li":"q49w-1659062835299","lt":"unordered","ll":1},"5":[{"2":"2","3":"t0pl-1659062799970","7":[{"8":"其它","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"a8u5-1659062775350","5":[{"2":"2","3":"JDMA-1659062775348","7":[{"8":"除了活动会话监控以外，我们也可以对 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"锁等待 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"等进行监控，这些都可以帮助我们对数据库的运行状态有更全面的认识。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"jl1z-1659062775489","4":{"l":"h3"},"5":[{"2":"2","3":"iV6A-1659062775488","7":[{"8":"调优的维度和步骤","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"PLoH-1659062775761","4":{"l":"h5"},"5":[{"2":"2","3":"CBcf-1659062775760","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"1","9":[{"0":"#34495e","2":"c"}]},{"8":"步：选择适合的 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"DBMS ","9":[{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"ho5t-1659063864617","4":{"version":1},"5":[{"2":"2","3":"Dqvi-1659063864618","7":[{"8":"如果对事务性处理以及安全性要求高的话，可以选择商业的数据库产品。这些数据库在事务处理和查询性能上都比较强，比如采用sQL Server、Oracle，那么单表存储上亿条数据是没有问题的。如果数据表设计得好，即使不采用分库分表的方式，查询效率也不差。"}]}]},{"3":"a8Eo-1659063864755","4":{"version":1},"5":[{"2":"2","3":"jhav-1659063864754","7":[{"8":"除此以外，你也可以采用开源的MySQL进行存储，它有很多存储引擎可以选择，如果进行事务处理的话可以选择InnoDB，非事务处理可以选择MylSAM。"}]}]},{"3":"BvWW-1659063878717","4":{"version":1},"5":[{"2":"2","3":"9fQS-1659063878716","7":[{"8":"NoSQL阵营包括键值型数据库、文档型数据库、搜索引擎、列式存储和图形数据库。这些数据库的优缺点和使用场景各有不同，比如咧式存储数据库可以大幅度降低系统的I/o，适合于分布式文件系统，但如果数据需要频繁地增删改，那么列式存储就不太适用了。"}]}]},{"3":"lpS1-1659063878813","4":{"version":1},"5":[{"2":"2","3":"VCu1-1659063878812","7":[{"8":"DBMS的选择关系到了后面的整个设计过程，所以第一步就是要选择适合的DBMS。如果已经确定好了DBMS，那么这步可以跳过。"}]}]},{"3":"VoOE-1659063801906","4":{"l":"h5"},"5":[{"2":"2","3":"dMzv-1659063801905","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"2","9":[{"0":"#34495e","2":"c"}]},{"8":"步：优化表设计 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"0Klk-1659063887401","4":{"li":"5Ap5-1659064021881","lt":"ordered","ll":1},"5":[{"2":"2","3":"AQPM-1659063887402","7":[{"8":"表结构要尽量遵循三范式的原则。这样可以让数据结构更加清晰规范，减少冗余字段，同时也减少了在更新，插入和删除数据时等异常情况的发生。"}]}],"6":"l"},{"3":"FtQV-1659064013301","4":{"li":"5Ap5-1659064021881","lt":"ordered","ll":1},"5":[{"2":"2","3":"KLvE-1659064013300","7":[{"8":"如果查询应用比较多，尤其是需要进行多表联查的时候，可以采用反范式进行优化。反范式采用空间换时间的方式，通过增加冗余字段提高查询的效率。"}]}],"6":"l"},{"3":"Qo38-1659064030340","4":{"li":"5Ap5-1659064021881","lt":"ordered","ll":1},"5":[{"2":"2","3":"f9p4-1659064030339","7":[{"8":"表字段的数据类型选择，关系到了查询效率的高低以及存储空间的大小。一般来说，如果字段可以采用数值类型就不要采用字符类型;字符长度要尽可能设计得短一些。针对字符类型来说，当确定字符长度固定时，就可以采用CHAR类型;当长度不固定时，通常采用VARCHAR类型。"}]}],"6":"l"},{"3":"dhXm-1659064041644","5":[{"2":"2","3":"0P9Z-1659064041643","7":[{"8":"数据表的结构设计很基础，也很关键。好的表结构可以在业务发展和用户量增加的情况下依然发挥作用，不好的表结构设计会让数据表变得非常臃肿，查询效率也会降低。"}]}]},{"3":"HhXg-1659063801908","4":{"l":"h5"},"5":[{"2":"2","3":"RdCm-1659063801907","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"3","9":[{"0":"#34495e","2":"c"}]},{"8":"步：优化逻辑查询","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"D6RO-1659062789011","5":[{"2":"2","3":"63By-1659062789010","7":[{"8":"当我们建立好数据表之后，就可以对数据表进行增删改查的操作了。这时我们首先需要考虑的是逻辑查询优化。"}]}]},{"3":"vJGl-1659064072237","5":[{"2":"2","3":"d2lZ-1659064072236","7":[{"8":"SQL查询优化，可以分为"},{"8":"逻辑查询优化和物理查询优化","9":[{"0":"#E96900FF","2":"c"}]},{"8":"。逻辑查询优化就是通过改变SQL语句的内容让SQL执行效率更高效，采用的方式是对sQL语句进行等价变换，对查询进行重写。"}]}]},{"3":"71i4-1659064064307","4":{"version":1},"5":[{"2":"2","3":"V3Pd-1659064064306","7":[{"8":"SQL的查询重写包括了"},{"8":"子查询优化、等价谓词重写、视图重写、条件简化、连接消除和嵌套连接消除","9":[{"0":"#FF0001","2":"c"}]},{"8":"等。"}]}]},{"3":"VuKM-1659064108295","4":{"version":1},"5":[{"2":"2","3":"WNMn-1659064108294","7":[{"8":"比如我们在讲解EXISTS子查询和N子查询的时候，会根据小表驱动大表的原则选择适合的子查询。在WHERE子句中会尽量避免对字段进行函数运算，它们会让字段的索引失效。"}]}]},{"3":"5uso-1659062789521","4":{"l":"h5"},"5":[{"2":"2","3":"f85h-1659062789520","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"4","9":[{"0":"#34495e","2":"c"}]},{"8":"步：优化物理查询","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"D8im-1659064167632","4":{"version":1},"5":[{"2":"2","3":"fKjk-1659064167633","7":[{"8":"物理查询优化是在确定了逻辑查询优化之后，采用物理优化技术（比如索引等），通过计算代价模型对各种可能的访问路径进行估算，从而找到执行方式中代价最小的作为执行计划。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"在这个部分中，我们需要掌握的重点是对索引的创建和使用。","9":[{"0":"#ff0000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"7r5Q-1659064200809","4":{"version":1,"u":"https://note.youdao.com/yws/res/3/WEBRESOURCE96d3738f93be94b1c8767ab30f1f7173","w":583,"h":152},"6":"im"},{"3":"uAdJ-1659062789615","4":{"l":"h5"},"5":[{"2":"2","3":"AvGJ-1659062789614","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"5","9":[{"0":"#34495e","2":"c"}]},{"8":"步：使用 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Redis ","9":[{"0":"#34495e","2":"c"}]},{"8":"或 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"Memcached ","9":[{"0":"#34495e","2":"c"}]},{"8":"作为缓存","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"csJX-1659064204730","4":{"version":1},"5":[{"2":"2","3":"nsPN-1659064204731","7":[{"8":"除了可以对 SQL 本身进行优化以外，我们还可以请外援提升查询的效率。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"f53g-1659064211154","4":{"version":1},"5":[{"2":"2","3":"tyQ6-1659064211153","7":[{"8":"因为数据都是存放到数据库中，我们需要从数据库层中取出数据放到内存中进行业务逻辑的操作，当用户量增大的时候，如果频繁地进行数据查询，会消耗数据库的很多资源。如果我们将常用的数据直接放到内存中，就会大幅提升查询的效率。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"B6RU-1659064211160","4":{"version":1},"5":[{"2":"2","3":"J7GW-1659064211159","7":[{"8":"键值存储数据库可以帮我们解决这个问题。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"gV7j-1659064219234","4":{"version":1},"5":[{"2":"2","3":"jlVy-1659064219233","7":[{"8":"常用的键值存储数据库有 Redis 和 Memcached，它们都可以将数据存放到内存中。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"X7j1-1659064239927","4":{"version":1},"5":[{"2":"2","3":"ZA2p-1659064239926","7":[{"8":"从可靠性来说，Redis 支持持久化，可以让我们的数据保存在硬盘上，不过这样一来性能消耗也会比较大。而Memcached仅仅是内存存储，不支持持久化。"}]}]},{"3":"pwlp-1659064240184","4":{"version":1},"5":[{"2":"2","3":"mYTt-1659064240183","7":[{"8":"从支持的数据类型来说，Redis 比 Memcached 要多，它不仅支持 key-value类型的数据，还支持List,Set，Hash等数据结构。当我们有持久化需求或者是更高级的数据处理需求的时候，就可以使用Redis。如果是简单的key-value存储，则可以使用Memcached。"}]}]},{"3":"g7Zv-1659064240190","4":{"version":1},"5":[{"2":"2","3":"bLBG-1659064240189","7":[{"8":"通常我们对于查询响应要求高的场景（响应时间短，吞吐量大)，可以考虑内存数据库，毕竟术业有专攻。传统的RDBMS都是将数据存储在硬盘上，而内存数据库则存放在内存中，查询起来要快得多。不过使用不同的工具，也增加了开发人员的使用成本。"}]}]},{"3":"YCdw-1659062789725","4":{"l":"h5"},"5":[{"2":"2","3":"nfUS-1659062789724","7":[{"8":"第","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"6","9":[{"0":"#34495e","2":"c"}]},{"8":"步：库级优化 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"I6aC-1659062789820","5":[{"2":"2","3":"X6PG-1659062789818","7":[{"8":"库级优化是站在数据库的维度上进行的优化策略，比如控制一个库中的数据表数量。另外，单一的数据库总会遇到各种限制，不如取长补短，利用\"外援\"的方式。通过主从架构优化我们的读写策略，通过对数据库进行垂直或者水平切分，突破单一数据库或数据表的访问限制，提升查询的性能。"}]}]},{"3":"8ykG-1659062789931","5":[{"2":"2","3":"qRA4-1659062789929","7":[{"8":"1","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"、读写分离","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"BKtj-1659062790025","5":[{"2":"2","3":"eveX-1659062790024","7":[{"8":"如果读和写的业务量都很大，并且它们都在同一个数据库服务器中进行操作，那么数据库的性能就会出现瓶颈，这时为了提升系统的性能，优化用户体验，我们可以采用读写分离的方式降低主数据库的负载，比如用主数据库(master)完成写操作，用从数据库(slave)完成读操作。"}]}]},{"3":"2QUa-1659064425043","4":{"version":1,"u":"https://note.youdao.com/yws/res/f/WEBRESOURCE6e7be580b741203d19df1e9f6eefd5af","w":583,"h":216},"6":"im"},{"3":"N5xh-1659064440037","4":{"version":1,"u":"https://note.youdao.com/yws/res/f/WEBRESOURCEde45fc20deac8e6b62b2970910715bdf","w":583,"h":182},"6":"im"},{"3":"51tT-1659062790329","5":[{"2":"2","3":"kHfx-1659062790327","7":[{"8":"2","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"、数据分片","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"58I7-1659062790423","5":[{"2":"2","3":"eQGg-1659062790422","7":[{"8":"对数据库分库分表。当数据量级达到千万级以上时，有时候我们需要把一个数据库切成多份，放到不同的数据库服务器上，减少对单一数据库服务器的访问压力。如果你使用的是MySQL，就可以使用MysQL自带的分区表功能，当然你也可以考虑自己做垂直拆分（分库）、水平拆分（分表)、垂直+水平拆分(分库分表"}]}]},{"3":"PZKs-1659064472074","4":{"version":1,"u":"https://note.youdao.com/yws/res/a/WEBRESOURCEcade9292635fa6d745ad7f43bc75edfa","w":467,"h":354},"6":"im"},{"3":"5H2a-1659064482476","4":{"version":1,"u":"https://note.youdao.com/yws/res/b/WEBRESOURCE65b14327a0830112275e73fff7938a3b","w":583,"h":227},"6":"im"},{"3":"mE31-1659062790727","5":[{"2":"2","3":"aTmi-1659062790726","7":[{"8":"但需要注意的是，分拆在提升数据库性能的同时，也会增加维护和使用成本。","9":[{"0":"#777777","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"dk7X-1659062790840","4":{"l":"h1"},"5":[{"2":"2","3":"goaw-1659062790839","7":[{"8":"优化","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"MySQL","9":[{"0":"#34495e","2":"c"}]},{"8":"服务器","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"h4OT-1659062790933","4":{"l":"h3"},"5":[{"2":"2","3":"8QLZ-1659062790932","7":[{"8":"优化服务器硬件","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"xVRp-1659062791027","5":[{"2":"2","3":"9kp6-1659062791025","7":[{"8":"服务器的硬件性能直接决定着","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"MySQL","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"数据库的性能。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"硬件的性能瓶颈直接决定MySQL数据库的运行速度和效率。针对性能瓶颈提高硬件配置，可以提高MySQL数据库查询、更新的速度。 （1） ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"配置较大的内存 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（2） ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"配置高速磁盘系统 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"（3） ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"合理分布磁盘","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"I/O ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"（4） ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"配置多处理器 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]}]}]},{"3":"6cxC-1659062791141","4":{"l":"h3"},"5":[{"2":"2","3":"9IVV-1659062791140","7":[{"8":"优化","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"MySQL","9":[{"0":"#34495e","2":"c"}]},{"8":"的参数 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"4aLj-1659062791234","5":[{"2":"2","3":"F80p-1659062791233","7":[{"8":"通过优化MySQL的参数可以提高资源利用率，从而达到提高MySQL服务器性能的目的。"}]}]},{"3":"53iW-1659066424600","4":{"version":1},"5":[{"2":"2","3":"iXUS-1659066424599","7":[{"8":"MySQL服务的配置参数都在my .cnf或者my .ini文件的[mysqld]组中。配置完参数以后，需要重新启动MysQL服务才会生效。"}]}]},{"3":"n2w3-1659062791331","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"OYQJ-1659062791330","7":[{"8":"innodb_buffer_pool_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"#FFF2CC","2":"bg"}]},{"8":"：这个参数是Mysql数据库最重要的参数之一，表示InnoDB类型的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"表和索引的最大缓存 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。它不仅仅缓存 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"索引数据 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，还会缓存 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"表的数据 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。这个值越大，查询的速度就会越快。但是这个值太大会影响操作系统的性能。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"0PSl-1659066436511","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"Mgl1-1659066436510","7":[{"8":"key_buffer_size","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"#FFF2CC","2":"bg"}]},{"8":" ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"索引缓冲区的大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。索引缓冲区是所有的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"线程共享 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。增加索引缓冲区可以得到更好处理的索引（对所有读和多重写）。当然，这个值不是越大越好，它的大小取决于内存的大小。如果这个值太大，就会导致操作系统频繁换页，也会降低系统性能。对于内存在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"4GB ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"左右的服务器该参数可设置为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"256M ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"或 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"384M ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"7wgN-1659062791441","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"c7Ew-1659062791440","7":[{"8":"table_cache ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"同时打开的表的个数 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。这个值越大，能够同时打开的表的个数越多。物理内存越大，设置就越大。默认为2402，调到512-1024最佳。这个值不是越大越好，因为同时打开的表太多会影响操作系统的性能。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"5DMo-1659066484554","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"3Bqi-1659066484553","7":[{"8":"query_cache_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"查询缓冲区的大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。可以通过在MySQL控制台观察，如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，就要增加Query_cache_size的值；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓存；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。MySQL8.0之后失效。该参数需要和query_cache_type配合使用。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Yo0O-1659062791536","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"MTZV-1659062791535","7":[{"8":"query_cache_type ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的值是0时，所有的查询都不使用查询缓存区。但是query_cache_type=0并不会导致MySQL释放query_cache_size所配置的缓存区内存。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"58QI-1659066534168","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":2},"5":[{"2":"2","3":"67zn-1659066534167","7":[{"8":"当query_cache_type=1时，所有的查询都将使用查询缓存区，除非在查询语句中指定","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"SQL_NO_CACHE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"，如SELECT SQL_NO_CACHE * FROM tbl_name。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"TEs0-1659066508470","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":2},"5":[{"2":"2","3":"AsGi-1659066508469","7":[{"8":"当query_cache_type=2时，只有在查询语句中使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"SQL_CACHE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"关键字，查询才会使用查询缓存区。使用查询缓存区可以提高查询的速度，这种方式只适用于修改操作少且经常执行相同的查询操作的情况。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"G66D-1659062791647","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"DrNT-1659062791646","7":[{"8":"sort_buffer_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示每个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"需要进行排序的线程分配的缓冲区的大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。增加这个参数的值可以提高 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"ORDER BY ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"或 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"GROUP BY ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"操作的速度。默认数值是2 097 144字节（约2MB）。对于内存在4GB左右的服务器推荐设置为6-8M，如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"KMcM-1659066552466","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"jrWF-1659066552465","7":[{"8":"join_buffer_size = 8M ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"联合查询操作所能使用的缓冲区大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"2vlC-1659066560152","4":{"li":"F8tl-1659066579547","lt":"unordered","ll":1},"5":[{"2":"2","3":"Awvw-1659066560150","7":[{"8":"read_buffer_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"每个线程连续扫描时为扫描的每个表分配的缓冲区的大小（字节） ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。当线程从表中连续读取记录时需要用到这个缓冲区。SET SESSION read_buffer_size=n可以临时设置该参数的值。默认为64K，可以设置为4M。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"xkcM-1659066552477","4":{"li":"P1iE-1659066612689","lt":"unordered","ll":1,"s":{"in":0}},"5":[{"2":"2","3":"8wuY-1659066552476","7":[{"8":"innodb_flush_log_at_trx_commit","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"#FFF2CC","2":"bg"}]},{"8":" ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"何时将缓冲区的数据写入日志文件 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，并且将日志文件写入磁盘中。该参数对于innoDB引擎非常重要。该参数有3个值，分别为0、1和2。该参数的默认值为1。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"xuez-1659062791840","4":{"li":"P1iE-1659066612689","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"3otT-1659062791839","7":[{"8":"值为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"0 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"每秒","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"1","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"次 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"的频率将数据写入日志文件并将日志文件写入磁盘。每个事务的commit并不会触发前面的任何操作。该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"23yU-1659066589834","4":{"li":"P1iE-1659066612689","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"Kra1-1659066589833","7":[{"8":"值为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"1 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"每次提交事务时 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"将数据写入日志文件并将日志文件写入磁盘进行同步。该模式是最安全的，但也是最慢的一种方式。因为每次事务提交或事务外的指令都需要把日志写入（flush）硬盘。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Wfzr-1659066597115","4":{"li":"P1iE-1659066612689","lt":"unordered","ll":2,"s":{"in":0}},"5":[{"2":"2","3":"CsI7-1659066597114","7":[{"8":"值为 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"2 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"时，表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"每次提交事务时 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"将数据写入日志文件， ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"每隔","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"1","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"秒 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"将日志文件写入磁盘。该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"YIvl-1659062791955","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"9swm-1659062791954","7":[{"8":"innodb_log_buffer_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：这是 InnoDB 存储引擎的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"事务日志所使用的缓冲区 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。为了提高性能，也是先将信息写入 Innodb Log Buffer 中，当满足 innodb_flush_log_trx_commit 参数所设置的相应条件（或者日志缓冲区写满）之后，才会将日志写到文件（或者同步到磁盘）中。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"2gKc-1659066624394","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"Fl1r-1659066624393","7":[{"8":"max_connections ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"允许连接到","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"MySQL","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"数据库的最大数量 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，默认值是 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"151 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"。如果状态变量connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。这个连接数 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"不是越大越好 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，因为这些连接会浪费内存的资源。过多的连接可能会导致MySQL服务器僵死。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"qp0b-1659062792048","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"lC46-1659062792047","7":[{"8":"back_log ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：用于 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"控制","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"MySQL","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"监听","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"TCP","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"端口时设置的积压请求栈大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 对于Linux系统推荐设置为小于512的整数，但最大不超过900。如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"XuFe-1659066637940","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"jEmd-1659066637939","7":[{"8":"thread_cache_size ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"： ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"线程池缓存线程数量的大小 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，当客户端断开连接后将当前线程缓存起来，当在接到新的连接请求时快速响应无需创建新的线程 。这尤其对那些使用短连接的应用程序来说可以极大的提高创建连接的效率。那么为了提高性能可以增大该参数的值。默认为60，可以设置为120。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"fCgI-1659062792142","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"l9i6-1659062792141","7":[{"8":"wait_timeout ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：指定 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"一个请求的最大连接时间 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，对于4GB左右内存的服务器可以设置为5-10。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"DZ1d-1659071050616","4":{"li":"vr5X-1659071058975","lt":"unordered","ll":1},"5":[{"2":"2","3":"ZoNB-1659071050615","7":[{"8":"interactive_timeout ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：表示服务器在关闭连接前等待行动的秒数。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"kHqC-1659062792254","5":[{"2":"2","3":"k5SW-1659062792253","7":[{"8":"这里给出一份my.cnf的参考配置：建议的配置文件参考","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"dd5e-1659071112501","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"6rMu-1659071112500","5":[{"2":"2","3":"zMRy-1659062792346","7":[{"8":"[mysqld] "}]}],"6":"cl"},{"3":"6rJs-1659071112984","4":{},"5":[{"2":"2","3":"5xZF-1659071112983","7":[{"8":"port = 3306 serverid = 1 socket = /tmp/mysql.sock skip-locking #避免MySQL的外部锁定，减少"}]}],"6":"cl"},{"3":"hfoQ-1659071112986","4":{},"5":[{"2":"2","3":"61OZ-1659071112985","7":[{"8":"出错几率增强稳定性。 skip-name-resolve #禁止MySQL对外部连接进行DNS解析，使用这一选"}]}],"6":"cl"},{"3":"pk5p-1659071112988","4":{},"5":[{"2":"2","3":"Jamf-1659071112987","7":[{"8":"项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权"}]}],"6":"cl"},{"3":"A6Z9-1659071112990","4":{},"5":[{"2":"2","3":"CRxI-1659071112989","7":[{"8":"都要使用IP地址方式，否则MySQL将无法正常处理连接请求！ back_log = 384 "}]}],"6":"cl"},{"3":"MDYV-1659071112992","4":{},"5":[{"2":"2","3":"ZT4S-1659071112991","7":[{"8":"key_buffer_size = 256M max_allowed_packet = 4M thread_stack = 256K "}]}],"6":"cl"},{"3":"87Jq-1659071112994","4":{},"5":[{"2":"2","3":"VXUz-1659071112993","7":[{"8":"table_cache = 128K sort_buffer_size = 6M read_buffer_size = 4M "}]}],"6":"cl"},{"3":"HRDt-1659071112996","4":{},"5":[{"2":"2","3":"4RI9-1659071112995","7":[{"8":"read_rnd_buffer_size=16M join_buffer_size = 8M myisam_sort_buffer_size = "}]}],"6":"cl"},{"3":"LdVi-1659071112998","4":{},"5":[{"2":"2","3":"hm2I-1659071112997","7":[{"8":"64M table_cache = 512 thread_cache_size = 64 query_cache_size = 64M "}]}],"6":"cl"},{"3":"YRDu-1659071113000","4":{},"5":[{"2":"2","3":"6m4g-1659071112999","7":[{"8":"tmp_table_size = 256M max_connections = 768 max_connect_errors = 10000000 "}]}],"6":"cl"},{"3":"97Si-1659071113002","4":{},"5":[{"2":"2","3":"g6u3-1659071113001","7":[{"8":"wait_timeout = 10 thread_concurrency = 8 #该参数取值为服务器逻辑CPU数量*2，在本"}]}],"6":"cl"},{"3":"OKiM-1659071113004","4":{},"5":[{"2":"2","3":"jUCG-1659071113003","7":[{"8":"例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4*2=8 skip- "}]}],"6":"cl"},{"3":"fYnN-1659071113006","4":{},"5":[{"2":"2","3":"RSFe-1659071113005","7":[{"8":"networking #开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接"}]}],"6":"cl"},{"3":"HwBd-1659071113008","4":{},"5":[{"2":"2","3":"jP1W-1659071113007","7":[{"8":"的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！ table_cache=1024 "}]}],"6":"cl"},{"3":"J3xy-1659071113010","4":{},"5":[{"2":"2","3":"cA7w-1659071113009","7":[{"8":"innodb_additional_mem_pool_size=4M #默认为2M innodb_flush_log_at_trx_commit=1 "}]}],"6":"cl"},{"3":"tHPc-1659071113012","4":{},"5":[{"2":"2","3":"N7ZH-1659071113011","7":[{"8":"innodb_log_buffer_size=2M #默认为1M innodb_thread_concurrency=8 #你的服务器CPU"}]}],"6":"cl"},{"3":"bWc9-1659071113014","4":{},"5":[{"2":"2","3":"XfGU-1659071113013","7":[{"8":"有几个就设置为几。建议用默认一般为8 tmp_table_size=64M #默认为16M，调到64-256最挂"}]}],"6":"cl"},{"3":"iIXG-1659071113016","4":{},"5":[{"2":"2","3":"Sr9w-1659071113015","7":[{"8":"thread_cache_size=120 query_cache_size=32M"}]}],"6":"cl"}],"6":"cd"},{"3":"JYuL-1659062792459","4":{"l":"h1"},"5":[{"2":"2","3":"QBmX-1659062792458","7":[{"8":"优化数据库结构","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Gclj-1659062792554","4":{"l":"h3"},"5":[{"2":"2","3":"KWOB-1659062792553","7":[{"8":"拆分表：冷热数据分离","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"tM7b-1659062792650","5":[{"2":"2","3":"oBC0-1659062792649","7":[{"8":"拆分表的思路是，把1个包含很多字段的表拆分成2个或者多个相对较小的表。这样做的原因是，这些表中某些字段的操作频率很高（热数据），经常要进行查询或者更新操作，而另外一些字段的使用频率却很低（冷数据），冷热数据分离，可以减小表的宽度。如果放在一个表里面，每次查询都要读取大记录，会消耗较多的资源。"}]}]},{"3":"Dulc-1659071515164","4":{"version":1},"5":[{"2":"2","3":"Mnk0-1659071515163","7":[{"8":"MysQL限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节。表越宽，把表装载进内存缓冲池时所占用的内存也就越大，也会消耗更多的lO。冷热数据分离的目的是:①减少磁盘o，保证热数据的内存缓存命中率。②更有效的利用缓存，避免读入无用的冷数据。"}]}]},{"3":"eZQX-1659071557765","4":{"l":"h3"},"5":[{"2":"2","3":"QwPv-1659071557764","7":[{"8":"增加中间表","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"gIj6-1659062792858","5":[{"2":"2","3":"doqu-1659062792856","7":[{"8":"对于需要经常联合查询的表，可以建立中间表以提高查询效率。通过建立中间表，把需要经常联合查询的数据插入中间表中，然后将原来的联合查询改为对中间表的查询，以此来提高查询效率。"}]}]},{"3":"qukM-1659071729052","4":{"version":1},"5":[{"2":"2","3":"YCyA-1659071729051","7":[{"8":"首先，分析经常联合查询表中的字段;然后，使用这些字段建立一个中间表，并将原来联合查询的表的数据插入中间表中;最后，使用中间表来进行查询。"}]}]},{"3":"8x09-1659071789657","4":{"version":1,"u":"https://note.youdao.com/yws/res/0/WEBRESOURCEa0999427ac4a56e9f158a3d030ba0040","w":583,"h":109},"6":"im"},{"3":"bl0Z-1659062793063","4":{"l":"h3"},"5":[{"2":"2","3":"eR2z-1659062793062","7":[{"8":"增加冗余字段","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"3kLX-1659062793158","5":[{"2":"2","3":"LYgC-1659062793157","7":[{"8":"设计数据库表时应尽量遵循范式理论的规约，尽可能减少冗余字段，让数据库设计看起来精致、优雅。但是，合理地加入冗余字段可以提高查询速度。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"qzCl-1659071809847","4":{"version":1},"5":[{"2":"2","3":"FHWH-1659071809846","7":[{"8":"表的规范化程度越高，表与表之间的关系就越多，需要连接查询的情况也就越多。尤其在数据量大，而且需要频繁进行连接的时候，为了提升效率，我们也可以考虑增加冗余字段来减少连接。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"wkHK-1659071809851","4":{"version":1},"5":[{"2":"2","3":"T0Zx-1659071809850","7":[{"8":"这部分内容在 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"反范式化小节 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"中具体展开讲解了。这里省略。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"b1yq-1659062793366","4":{"l":"h3"},"5":[{"2":"2","3":"vdVU-1659062793364","7":[{"8":"优化数据类型","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"T8oV-1659062793464","5":[{"2":"2","3":"MNmT-1659062793462","7":[{"8":"改进表的设计时，可以考虑优化字段的数据类型。这个问题在大家刚从事开发时基本不算是问题。但是，随着你的经验越来越丰富，参与的项目越来越大，数据量也越来越多的时候，你就不能只从系统稳定性的角度来思考问题了，还要考虑到系统整体的稳定性和效率。此时，优先选择符合存储需要的最小的数据类型。"}]}]},{"3":"0wce-1659071946370","4":{"version":1},"5":[{"2":"2","3":"BkgU-1659071946369","7":[{"8":"列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少在遍历时所需要的IO次数也就越多，|索引的性能也就越差。"}]}]},{"3":"nC7B-1659062793558","5":[{"2":"2","3":"iPNM-1659062793557","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"1","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：对整数类型数据进行优化","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"2Li6-1659062793654","5":[{"2":"2","3":"XB87-1659062793653","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"2","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：既可以使用文本类型也可以使用整数类型的字段，要选择使用整数类型","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"tQqv-1659062793766","5":[{"2":"2","3":"gFE8-1659062793764","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"3","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：避免使用","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"TEXT","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"、","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"BLOB","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"数据类型","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"8zKS-1659062775884","5":[{"2":"2","3":"OZd1-1659062775883","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"4","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：避免使用","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"ENUM","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"类型","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"P647-1659072245173","5":[{"2":"2","3":"vVNq-1659072245172","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"5","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：使用","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"TIMESTAMP","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"存储时间","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"raaF-1659072245688","5":[{"2":"2","3":"bv2v-1659072245687","7":[{"8":"情况","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"6","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：用","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"DECIMAL","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"代替","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"FLOAT","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"和","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"DOUBLE","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"存储精确浮点数","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"0hPS-1659072245785","5":[{"2":"2","3":"j0Pm-1659072245784","7":[{"8":"总之，遇到数据量大的项目时，一定要在充分了解业务需求的前提下，合理优化数据类型，这样才能充分发挥资源的效率，使系统达到最优","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"SsDS-1659072245883","4":{"l":"h3"},"5":[{"2":"2","3":"MqX3-1659072245881","7":[{"8":"优化插入记录的速度 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"micC-1659072245980","5":[{"2":"2","3":"yfj5-1659072245979","7":[{"8":"1. MyISAM","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"引擎的表：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"bZC9-1659072302401","4":{"version":1},"5":[{"2":"2","3":"Oo1l-1659072302400","7":[{"8":"① 禁用索引","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"PING-1659072302403","4":{"version":1},"5":[{"2":"2","3":"wwhf-1659072302402","7":[{"8":"② 禁用唯一性检查","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"5zIk-1659072302405","4":{"version":1},"5":[{"2":"2","3":"23Q9-1659072302404","7":[{"8":"③ 使用批量插入","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Oamy-1659072246092","5":[{"2":"2","3":"QFsr-1659072246090","7":[{"8":"④ 使用","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"LOAD DATA INFILE ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"批量导入","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"t8C5-1659072246189","5":[{"2":"2","3":"OTmw-1659072246187","7":[{"8":"2. InnoDB","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"引擎的表：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"vfht-1659072355879","5":[{"2":"2","3":"DnKF-1659072355877","7":[{"8":"① 禁用唯一性检查","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"ehzA-1659072354929","4":{"version":1},"5":[{"2":"2","3":"yZK4-1659072354928","7":[{"8":"② 禁用外键检查","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Bsko-1659072354931","4":{"version":1},"5":[{"2":"2","3":"ds86-1659072354930","7":[{"8":"③ 禁止自动提交","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"LDsO-1659072285020","4":{"l":"h3"},"5":[{"2":"2","3":"9eco-1659072285019","7":[{"8":"使用非空约束","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"ZJXn-1659072285526","5":[{"2":"2","3":"5n4f-1659072285524","7":[{"8":"在设计字段的时候，如果业务允许，建议尽量使用非空约束","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"Y4ix-1659072285625","4":{"li":"5rQY-1659072441558","lt":"unordered","ll":1},"5":[{"2":"2","3":"Ju3w-1659072285624","7":[{"8":"进行比较和计算时，省去要对NULL值的字段判断是否为空的开销，提高存储效率。"}]}],"6":"l"},{"3":"BEuK-1659072435953","4":{"li":"5rQY-1659072441558","lt":"unordered","ll":1},"5":[{"2":"2","3":"2C68-1659072435952","7":[{"8":"非空字段也容易创建索引。因为索引NULL列需要额外的空间来保存，所以要占用更多的空间。使用非空约束，就可以节省存储空间(每个字段1个bit)。"}]}],"6":"l"},{"3":"JQGH-1659072285733","4":{"l":"h3"},"5":[{"2":"2","3":"ePNr-1659072285732","7":[{"8":"分析表、检查表与优化表","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"ficU-1659072285828","5":[{"2":"2","3":"pF16-1659072285827","7":[{"8":"MySQL提供了分析表、检查表和优化表的语句。分析表主要是分析关键字的分布，检查表主要是检查表是否存在错误，优化表主要是消除删除或者更新造成的空间浪费。"}]}]},{"3":"5P8f-1659072285924","5":[{"2":"2","3":"JmFS-1659072285922","7":[{"8":"1. ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"分析表 ","9":[{"2":"b"},{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"fXJW-1659072286036","5":[{"2":"2","3":"hLtP-1659072286035","7":[{"8":"MySQL中提供了ANALYZE TABLE语句分析表，ANALYZE TABLE语句的基本语法如下：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"xdHb-1659072498870","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"f0sm-1659072498869","5":[{"2":"2","3":"zA5Y-1659072496872","7":[{"8":"ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name]…"}]}],"6":"cl"},{"3":"XdVc-1659072817621","5":[{"2":"2","3":"YFq2-1659072817619","7":[{"8":"#分析之后可以show index查看"}]}],"6":"cl"}],"6":"cd"},{"3":"jgcq-1659072286131","5":[{"2":"2","3":"rMEa-1659072286130","7":[{"8":"默认的，MySQL服务会将 ANALYZE TABLE语句写到binlog中，以便在主从架构中，从服务能够同步数据。可以添加参数LOCAL 或者 NO_WRITE_TO_BINLOG取消将语句写到binlog中。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"hRMr-1659072509022","4":{"version":1},"5":[{"2":"2","3":"Kzk8-1659072509021","7":[{"8":"使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"ANALYZE TABLE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"分析表的过程中，数据库系统会自动对表加一个 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"只读锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。在分析期间，只能读取表中的记录，不能更新和插入记录。ANALYZE TABLE语句能够分析InnoDB和MyISAM类型的表，但是不能作用于视图。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"47rb-1659072286227","5":[{"2":"2","3":"0UJb-1659072286226","7":[{"8":"ANALYZE TABLE分析后的统计结果会反应到 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"cardinality ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"的值，该值统计了表中某一键所在的列不重复的值的个数。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"该值越接近表中的总行数，则在表连接查询或者索引查询时，就越优先被优化器选择使用。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"也就是索引列的cardinality的值与表中数据的总条数差距越大，即使查询的时候使用了该索引作为查询条件，存储引擎实际查询的时候使用的概率就越小。下面通过例子来验证下。cardinality可以通过SHOW INDEX FROM 表名查看。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"yiQ6-1659072286342","5":[{"2":"2","3":"IMhF-1659072286341","7":[{"8":"2. ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"检查表 （了解","9":[{"2":"b"},{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"4GAm-1659072286439","5":[{"2":"2","3":"JAtw-1659072286437","7":[{"8":"MySQL中可以使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"CHECK TABLE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"语句来检查表。CHECK TABLE语句能够检查InnoDB和MyISAM类型的表是否存在错误。CHECK TABLE语句在执行过程中也会给表加上 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"只读锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"3ja2-1659072872729","4":{"version":1},"5":[{"2":"2","3":"21O9-1659072872728","7":[{"8":"对于MyISAM类型的表，CHECK TABLE语句还会更新关键字统计数据。而且，CHECK TABLE也可以检查视图是否有错误，比如在视图定义中被引用的表已不存在。该语句的基本语法如下：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"aWLo-1659072886407","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"cdi4-1659072886406","5":[{"2":"2","3":"0Mqi-1659072286536","7":[{"8":"CHECK TABLE tbl_name [, tbl_name] ... [option] ... "}]}],"6":"cl"},{"3":"BJi4-1659072886612","4":{},"5":[{"2":"2","3":"1PTM-1659072886611","7":[{"8":"option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}"}]}],"6":"cl"}],"6":"cd"},{"3":"lzww-1659072286630","5":[{"2":"2","3":"P2Wv-1659072286629","7":[{"8":"其中，tbl_name是表名；option参数有5个取值，分别是QUICK、FAST、MEDIUM、EXTENDED和 CHANGED。各个选项的意义分别是：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"3x2b-1659072286743","4":{"li":"cgCL-1659072907508","lt":"unordered","ll":1},"5":[{"2":"2","3":"vfZH-1659072286742","7":[{"8":"QUICK ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：不扫描行，不检查错误的连接。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"GJjE-1659072903450","4":{"li":"cgCL-1659072907508","lt":"unordered","ll":1},"5":[{"2":"2","3":"XDxE-1659072903449","7":[{"8":"FAST ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：只检查没有被正确关闭的表。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"wSiy-1659072903452","4":{"li":"cgCL-1659072907508","lt":"unordered","ll":1},"5":[{"2":"2","3":"iAlK-1659072903451","7":[{"8":"CHANGED ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：只检查上次检查后被更改的表和没有被正确关闭的表。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"4Ilk-1659072903454","4":{"li":"cgCL-1659072907508","lt":"unordered","ll":1},"5":[{"2":"2","3":"TzBZ-1659072903453","7":[{"8":"MEDIUM ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：扫描行，以验证被删除的连接是有效的。也可以计算各行的关键字校验和，并使用计算出的校验和验证这一点。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"Q3rx-1659072903458","4":{"li":"cgCL-1659072907508","lt":"unordered","ll":1},"5":[{"2":"2","3":"2UI9-1659072903457","7":[{"8":"EXTENDED ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"：对每行的所有关键字进行一个全面的关键字查找。这可以确保表是100%一致的，但是花的时间较长。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"6jYm-1659072894124","5":[{"2":"2","3":"5b7W-1659072894123","7":[{"8":"option只对MyISAM类型的表有效，对InnoDB类型的表无效。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"NmqQ-1659072286839","5":[{"2":"2","3":"yHnu-1659072286838","7":[{"8":"该语句对于检查的表可能会产生多行信息。最后一行有一个状态的 Msg_type 值，Msg_text 通常为 OK。如果得到的不是 OK，通常要对其进行修复；是 OK 说明表已经是最新的了。表已经是最新的，意味着存储引擎对这张表不必进行检查。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"cytd-1659072894639","5":[{"2":"2","3":"vCiO-1659072894638","7":[{"8":"3. ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"优化表","9":[{"2":"b"},{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"gPGs-1659072894736","5":[{"2":"2","3":"L6rU-1659072894734","7":[{"8":"方式","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"1","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"：","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"OPTIMIZE TABLE ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"76y9-1659072985454","4":{"version":1},"5":[{"2":"2","3":"R6xp-1659072985453","7":[{"8":"MySQL中使用 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"OPTIMIZE TABLE ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"语句来优化表。但是，OPTILMIZE TABLE语句只能优化表中的","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"VARCHAR ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"、 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"BLOB ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"或 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"TEXT ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"类型的字段。一个表使用了这些字段的数据类型，若已经 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"删除 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"了表的一大部分数据，或者已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"更新 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，则应使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"碎片 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"9P7U-1659072985463","4":{"version":1},"5":[{"2":"2","3":"t5xY-1659072985462","7":[{"8":"OPTIMIZE TABLE 语句对InnoDB和MyISAM类型的表都有效。该语句在执行过程中也会给表加上 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"只读锁 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"wko6-1659073034543","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"4efl-1659073034542","5":[{"2":"2","3":"bkNh-1659072894830","7":[{"8":"OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ..."}]}],"6":"cl"}],"6":"cd"},{"3":"vNCL-1659073269126","4":{"version":1,"u":"https://note.youdao.com/yws/res/e/WEBRESOURCE7670e99bbf4038d80d700dd1d25ca68e","w":583,"h":139},"6":"im"},{"3":"poo4-1659072895147","4":{"l":"h3"},"5":[{"2":"2","3":"JJS8-1659072895146","7":[{"8":"小结","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"6FOP-1659072895242","4":{"li":"Fpud-1659073315472","lt":"unordered","ll":1},"5":[{"2":"2","3":"dzLM-1659072895241","7":[{"8":"修改数据类型，节省存储空间的同时，你要考虑到数据不能超过取值范围；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"tw5v-1659073313750","4":{"li":"Fpud-1659073315472","lt":"unordered","ll":1},"5":[{"2":"2","3":"oHjQ-1659073313749","7":[{"8":"增加冗余字段的时候，不要忘了确保数据一致性；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"TE1Q-1659073313752","4":{"li":"Fpud-1659073315472","lt":"unordered","ll":1},"5":[{"2":"2","3":"H28M-1659073313751","7":[{"8":"把大表拆分，也意味着你的查询会增加新的连接，从而增加额外的开销和运维的成本。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"7MZ4-1659072895339","5":[{"2":"2","3":"vdwg-1659072895338","7":[{"8":"因此，你一定要结合实际的业务需求进行权衡","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"SB5D-1659072895436","4":{"l":"h1"},"5":[{"2":"2","3":"CtJD-1659072895434","7":[{"8":"大表优化","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"Gw2T-1659073638643","4":{"l":"h3"},"5":[{"2":"2","3":"94eG-1659073638642","7":[{"8":"限定查询的范围","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"lHpl-1659073638645","4":{"version":1},"5":[{"2":"2","3":"z0kS-1659073638644","7":[{"8":"禁止不带任何限制数据范围条件的查询语句。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内；","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"za1Z-1659072895641","4":{"l":"h3"},"5":[{"2":"2","3":"v4KG-1659072895640","7":[{"8":"读","9":[{"2":"b"},{"0":"#34495e","2":"c"}]},{"8":"/","9":[{"0":"#34495e","2":"c"}]},{"8":"写分离","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"BjVz-1659072895737","5":[{"2":"2","3":"Z6oe-1659072895736","7":[{"8":"经典的数据库拆分方案，主库负责写，从库负责读。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"TPip-1659073651470","4":{"version":1},"5":[{"2":"2","3":"RmZc-1659073651469","7":[{"8":"","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"f7lw-1659072895850","4":{"l":"h3"},"5":[{"2":"2","3":"QdKI-1659072895849","7":[{"8":"垂直拆分","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"ZpUR-1659072895945","5":[{"2":"2","3":"rvYq-1659072895944","7":[{"8":"当数据量级达到 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"千万级 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"以上时，有时候我们需要把一个数据库切成多份，放到不同的数据库服务器上，减少对单一数据库服务器的访问压力。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"6cil-1659072896041","5":[{"2":"2","3":"yev6-1659072896039","7":[{"8":"垂直拆分的优点： ","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"tRdD-1659073698496","4":{"version":1},"5":[{"2":"2","3":"n4aE-1659073698495","7":[{"8":"垂直拆分的缺点： ","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"主键会出现冗余，需要管理冗余列，并会引起 JOIN 操作。此外，垂直拆分会让事务变得更加复杂。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"upzQ-1659073721802","4":{"version":1,"u":"https://note.youdao.com/yws/res/a/WEBRESOURCE104d4b52cfa9a1f9735b9ca4336f2c4a","w":368,"h":250},"6":"im"},{"3":"D2c9-1659072896245","4":{"l":"h3"},"5":[{"2":"2","3":"qrXV-1659072896243","7":[{"8":"水平拆分","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"G3bi-1659073747277","4":{"version":1,"u":"https://note.youdao.com/yws/res/a/WEBRESOURCEc4ffff1f6694cb301697d246872ed1aa","w":581,"h":247},"6":"im"},{"3":"VUlo-1659073726825","5":[{"2":"2","3":"k1ew-1659073726823","7":[{"8":"水平拆分能够支持非常大的数据量存储，应用端改造也少，但分片事务难以解决，跨节点Join性能较差，逻辑复杂。《Java工程师修炼之道》的作者推荐尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度，一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。如果实在要分片，尽量选择客户端分片架构，这样可以减少—次和中间件的网络l/O。"}]}]},{"3":"Gg3W-1659073807323","5":[{"2":"2","3":"tElI-1659073807322","7":[{"8":"下面补充一下数据库分片的两种常见方案：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"my5j-1659073753871","4":{"li":"yEuP-1659073759625","lt":"unordered","ll":1},"5":[{"2":"2","3":"QYVC-1659073753870","7":[{"8":"客户端代理： 分片逻辑在应用端，封装在","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"jar","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"包中，通过修改或者封装","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"JDBC","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"层来实现。 ","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"当当网的","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Sharding-JDBC ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"、阿里的TDDL是两种比较常用的实现。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"uC7Z-1659073753875","4":{"li":"yEuP-1659073759625","lt":"unordered","ll":1},"5":[{"2":"2","3":"mRBv-1659073753874","7":[{"8":"中间件代理： 在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。","9":[{"2":"b"},{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"我们现在谈的 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"Mycat ","9":[{"0":"#880000","2":"c"},{"0":16,"2":"fs"}]},{"8":"、360的Atlas、网易的DDB等等都是这种架构的实现。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}],"6":"l"},{"3":"vTEF-1659073727326","4":{"l":"h1"},"5":[{"2":"2","3":"4bdx-1659073727325","7":[{"8":"其它调优策略","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"iBM2-1659073727438","4":{"l":"h3"},"5":[{"2":"2","3":"fr1o-1659073727437","7":[{"8":"服务器语句超时处理 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"7soZ-1659073867264","4":{"version":1},"5":[{"2":"2","3":"CVnq-1659073867263","7":[{"8":"在MySQL 8.0中可以设置 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"服务器语句超时的限制 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"，单位可以达到 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"毫秒级别 ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"},{"0":"NSimSun","2":"ff"}]},{"8":"。当中断的执行语句超过设置的毫秒数后，服务器将终止查询影响不大的事务或连接，然后将错误报给客户端。","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"FU3X-1659073727534","5":[{"2":"2","3":"gyyJ-1659073727532","7":[{"8":"设置服务器语句超时的限制，可以通过设置系统变量 ","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]},{"8":"MAX_EXECUTION_TIME ","9":[{"0":"#e96900","2":"c"},{"0":16,"2":"fs"}]},{"8":"来实现。默认情况下，MAX_EXECUTION_TIME的值为0，代表没有时间限制。 例如：","9":[{"0":"#34495e","2":"c"},{"0":16,"2":"fs"}]}]}]},{"3":"hhIC-1659073897499","4":{"wrap":false,"la":"","th":"default"},"5":[{"3":"ubvP-1659073897498","5":[{"2":"2","3":"Vzso-1659073727627","7":[{"8":"SET GLOBAL MAX_EXECUTION_TIME=2000;"}]}],"6":"cl"},{"3":"vIy8-1659073908236","5":[{"2":"2","3":"WKyC-1659073908234","7":[{"8":"SET SESSION MAX_EXECUTION_TIME=2000; #指定该会话中SELECT语句的超时时间"}]}],"6":"cl"}],"6":"cd"},{"3":"s5Sv-1659073727838","4":{"l":"h3"},"5":[{"2":"2","3":"eMKX-1659073727836","7":[{"8":"创建全局通用表空间 ","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"zmo5-1659073932898","4":{"version":1},"5":[{"2":"2","3":"wCeM-1659073932899","7":[{"8":"MysQL 8使用CREATE TABLESPACE语句来创建一个全局通用表空间。全局表空间可以被所有的数据库的表共享，而且相比于独享表空间，使用手动创建共享表空间可以节约元数据方面的内存。可以在创建表的时候，指定属于哪个表空间，也可以对已有表进行表空间修改等。"}]}]},{"3":"Dx3U-1659073995178","4":{"version":1,"u":"https://note.youdao.com/yws/res/e/WEBRESOURCEa61ce24d1ada4358cf8fa6e8e9f6145e","w":581,"h":433},"6":"im"},{"3":"0Kxu-1659073916414","4":{"l":"h3"},"5":[{"2":"2","3":"Sl3O-1659073916413","7":[{"8":"MySQL 8.0","9":[{"0":"#34495e","2":"c"}]},{"8":"新特性：隐藏索引对调优的帮助","9":[{"2":"b"},{"0":"#34495e","2":"c"}]}]}],"6":"h"},{"3":"770T-1659073727933","5":[{"2":"2","3":"qS3U-1659073727932","7":[{"8":"","9":[{"0":"#000000","2":"c"}]}]}]}],"title":"","__compress__":true}
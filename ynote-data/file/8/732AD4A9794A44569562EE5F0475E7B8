<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="4581-1622720560658" type="unordered"/><list id="5451-1622721082640" type="unordered"/></head><body><heading compat="true" level="a"><coId>9029-1622190193911</coId><text>1、JUnit5 的变化</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>8978-1622720466722</coId><text>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</text><inline-styles><bold><from>0</from><to>42</to><value>true</value></bold><font-size><from>0</from><to>42</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#f5222d</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>5860-1622720466722</coId><text>作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>5913-1622720466722</coId><text>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</text><inline-styles><bold><from>0</from><to>56</to><value>true</value></bold><font-size><from>0</from><to>56</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2959-1622720466722</coId><text>JUnit Platform: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>76</to><value>16</value></font-size><color><from>0</from><to>76</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>8013-1622720466722</coId><text>JUnit Jupiter: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个测试引擎，用于在Junit Platform上运行。</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><bold><from>67</from><to>71</to><value>true</value></bold><font-size><from>0</from><to>93</to><value>16</value></font-size><color><from>0</from><to>93</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>4580-1622720466722</coId><text>JUnit Vintage: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>79</to><value>16</value></font-size><color><from>0</from><to>79</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><image><coId>2268-1622720466722</coId><source>https://note.youdao.com/yws/res/13760/D35BACB1880E49FBA8E5D5D3DE4D83F3</source><text/><styles><width>620</width><height>261</height></styles></image><para><coId>5944-1622720466722</coId><text>注意：</text><inline-styles><font-size><from>0</from><to>3</to><value>15</value></font-size><color><from>0</from><to>3</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>6920-1622720466722</coId><text>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</text><inline-styles><bold><from>0</from><to>77</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>15</value></font-size><font-size><from>26</from><to>77</to><value>16</value></font-size><color><from>0</from><to>77</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>7133-1622720466722</coId><text>JUnit 5’s Vintage Engine Removed from spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage</text><inline-styles><bold><from>0</from><to>90</to><value>true</value></bold><font-size><from>0</from><to>37</to><value>15</value></font-size><color><from>0</from><to>90</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>9038-1622720489880</coId><text>&lt;dependency&gt;
    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
            &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>6618-1622720538503</coId><text/><inline-styles/><styles/></para><code><coId>8626-1622720538503</coId><text>&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>2646-1622720538503</coId><text>现在版本：</text><inline-styles><font-size><from>0</from><to>5</to><value>15</value></font-size><color><from>0</from><to>5</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>7370-1622720564816</coId><text>@SpringBootTest
class Boot05WebAdminApplicationTests {
    @Test
    void contextLoads() {
    }
}

</text><inline-styles><color><from>0</from><to>15</to><value>#1f7f9a</value></color><color><from>15</from><to>16</to><value>#595959</value></color><color><from>16</from><to>21</to><value>#d73a49</value></color><color><from>21</from><to>22</to><value>#595959</value></color><color><from>22</from><to>52</to><value>#005cc5</value></color><color><from>52</from><to>59</to><value>#595959</value></color><color><from>59</from><to>64</to><value>#1f7f9a</value></color><color><from>64</from><to>69</to><value>#595959</value></color><color><from>69</from><to>73</to><value>#22863a</value></color><color><from>73</from><to>100</to><value>#595959</value></color><back-color><from>0</from><to>100</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>8828-1622720560660</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>1620-1622720560660</coId><text>以前：</text><inline-styles><font-size><from>0</from><to>3</to><value>15</value></font-size><color><from>0</from><to>3</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>7765-1622720560660</coId><text>@SpringBootTest + @RunWith(SpringTest.class)</text><inline-styles><font-size><from>0</from><to>44</to><value>15</value></font-size><color><from>0</from><to>44</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>8349-1622720560660</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>5260-1622720560660</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>7311-1622720560660</coId><text>SpringBoot整合Junit以后。</text><inline-styles><font-size><from>0</from><to>20</to><value>15</value></font-size><color><from>0</from><to>20</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><list-item level="1" list-id="4581-1622720560658"><coId>8660-1622720560660</coId><text>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</text><inline-styles><font-size><from>0</from><to>33</to><value>15</value></font-size><color><from>0</from><to>33</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="4581-1622720560658"><coId>5068-1622720560660</coId><text>Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</text><inline-styles><font-size><from>0</from><to>63</to><value>15</value></font-size><color><from>0</from><to>32</to><value>#404040</value></color><color><from>32</from><to>63</to><value>#808000</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><para><coId>4150-1622721080874</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><heading compat="true" level="a"><coId>9279-1622721082219</coId><text>2、JUnit5常用注解</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>1327-1622721082658</coId><text>JUnit5的注解与JUnit4的注解有所变化</text><inline-styles><font-size><from>0</from><to>23</to><value>16</value></font-size><color><from>0</from><to>23</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>9375-1622721082658</coId><text>https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</text><inline-styles><underline><from>0</from><to>75</to><value>true</value></underline><font-size><from>0</from><to>75</to><value>15</value></font-size><color><from>0</from><to>75</to><value>#003884</value></color><href><from>0</from><to>75</to><value>https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</value></href></inline-styles><styles><line-height>1.74</line-height></styles></para><list-item level="1" list-id="5451-1622721082640"><coId>4499-1622721082658</coId><text>@Test :表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>73</to><value>16</value></font-size><color><from>0</from><to>73</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>2025-1622721082658</coId><text>@ParameterizedTest :表示方法是参数化测试，下方会有详细介绍</text><inline-styles><bold><from>0</from><to>20</to><value>true</value></bold><font-size><from>0</from><to>39</to><value>16</value></font-size><color><from>0</from><to>39</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>8970-1622721082658</coId><text>@RepeatedTest :表示方法可重复执行，下方会有详细介绍</text><inline-styles><bold><from>0</from><to>15</to><value>true</value></bold><font-size><from>0</from><to>33</to><value>16</value></font-size><color><from>0</from><to>33</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>5760-1622721082658</coId><text>@DisplayName :为测试类或者测试方法设置展示名称</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>30</to><value>16</value></font-size><color><from>0</from><to>30</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>2338-1622721082658</coId><text>@BeforeEach :表示在每个单元测试之前执行</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>16</value></font-size><color><from>0</from><to>26</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>5176-1622721082658</coId><text>@AfterEach :表示在每个单元测试之后执行</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>3163-1622721082658</coId><text>@BeforeAll :表示在所有单元测试之前执行</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>7399-1622721082658</coId><text>@AfterAll :表示在所有单元测试之后执行</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>24</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>0083-1622721082658</coId><text>@Tag :表示单元测试类别，类似于JUnit4中的@Categories</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>37</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>1142-1622721082658</coId><text>@Disabled :表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>43</to><value>16</value></font-size><color><from>0</from><to>43</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>9616-1622721082658</coId><text>@Timeout :表示测试方法运行如果超过了指定时间将会返回错误</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>33</to><value>16</value></font-size><color><from>0</from><to>33</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><list-item level="1" list-id="5451-1622721082640"><coId>1282-1622721082658</coId><text>@ExtendWith :为测试类或测试方法提供扩展类引用</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></list-item><code><coId>7640-1622721088990</coId><text>import org.junit.jupiter.api.Test; //注意这里使用的是jupiter的Test注解！！
public class TestDemo {
  @Test
  @DisplayName("第一次测试")
  public void firstTest() {
      System.out.println("hello world");
  }
</text><inline-styles><color><from>0</from><to>6</to><value>#d73a49</value></color><color><from>6</from><to>35</to><value>#595959</value></color><color><from>35</from><to>61</to><value>#6a737d</value></color><color><from>61</from><to>62</to><value>#595959</value></color><color><from>62</from><to>68</to><value>#d73a49</value></color><color><from>68</from><to>69</to><value>#595959</value></color><color><from>69</from><to>74</to><value>#d73a49</value></color><color><from>74</from><to>75</to><value>#595959</value></color><color><from>75</from><to>83</to><value>#005cc5</value></color><color><from>83</from><to>88</to><value>#595959</value></color><color><from>88</from><to>93</to><value>#1f7f9a</value></color><color><from>93</from><to>96</to><value>#595959</value></color><color><from>96</from><to>108</to><value>#1f7f9a</value></color><color><from>108</from><to>109</to><value>#595959</value></color><color><from>109</from><to>116</to><value>#669900</value></color><color><from>116</from><to>120</to><value>#595959</value></color><color><from>120</from><to>126</to><value>#d73a49</value></color><color><from>126</from><to>127</to><value>#595959</value></color><color><from>127</from><to>131</to><value>#22863a</value></color><color><from>131</from><to>171</to><value>#595959</value></color><color><from>171</from><to>184</to><value>#669900</value></color><color><from>184</from><to>190</to><value>#595959</value></color><back-color><from>0</from><to>190</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="a"><coId>8487-1622721088990</coId><text/><inline-styles/><styles/></heading><heading compat="true" level="a"><coId>4498-1622722355478</coId><text>3、断言（assertions）</text><inline-styles><bold><from>0</from><to>16</to><value>true</value></bold><font-size><from>0</from><to>16</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>3290-1622722364264</coId><text>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法。JUnit 5 内置的断言可以分成如下几个类别：</text><inline-styles><bold><from>43</from><to>90</to><value>true</value></bold><font-size><from>0</from><to>115</to><value>16</value></font-size><color><from>0</from><to>115</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>5322-1622722364264</coId><text>检查业务逻辑返回的数据是否合理。</text><inline-styles><bold><from>0</from><to>16</to><value>true</value></bold><font-size><from>0</from><to>16</to><value>16</value></font-size><color><from>0</from><to>16</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>9044-1622722364264</coId><text>所有的测试运行结束以后，会有一个详细的测试报告；</text><inline-styles><bold><from>0</from><to>24</to><value>true</value></bold><font-size><from>0</from><to>24</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>1650-1622723750193</coId><text>若前面的断言失败，之后的代码也就不会执行</text><inline-styles><bold><from>0</from><to>20</to><value>true</value></bold><font-size><from>0</from><to>20</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>1066-1622722364264</coId><text>1、简单断言</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>9821-1622722364264</coId><text>用来对单个值进行简单的验证。如：</text><inline-styles><font-size><from>0</from><to>16</to><value>16</value></font-size><color><from>0</from><to>16</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><table><coId>8358-1622722371822</coId><resource-list/><content>{"cells":[{"textAlign":"center","verticalAlign":"top","value":"方法"},{"textAlign":"center","verticalAlign":"top","value":"说明"},{"textAlign":"center","verticalAlign":"top","value":"assertEquals"},{"textAlign":"center","verticalAlign":"top","value":"判断两个对象或两个原始类型是否相等"},{"textAlign":"center","verticalAlign":"top","value":"assertNotEquals"},{"textAlign":"center","verticalAlign":"top","value":"判断两个对象或两个原始类型是否不相等"},{"textAlign":"center","verticalAlign":"top","value":"assertSame"},{"textAlign":"center","verticalAlign":"top","value":"判断两个对象引用是否指向同一个对象"},{"textAlign":"center","verticalAlign":"top","value":"assertNotSame"},{"textAlign":"center","verticalAlign":"top","value":"判断两个对象引用是否指向不同的对象"},{"textAlign":"center","verticalAlign":"top","value":"assertTrue"},{"textAlign":"center","verticalAlign":"top","value":"判断给定的布尔值是否为 true"},{"textAlign":"center","verticalAlign":"top","value":"assertFalse"},{"textAlign":"center","verticalAlign":"top","value":"判断给定的布尔值是否为 false"},{"textAlign":"center","verticalAlign":"top","value":"assertNull"},{"textAlign":"center","verticalAlign":"top","value":"判断给定的对象引用是否为 null"},{"textAlign":"center","verticalAlign":"top","value":"assertNotNull"},{"textAlign":"center","verticalAlign":"top","value":"判断给定的对象引用是否不为 null"}],"heights":[32.79999923706055,33,33,33,32.79999923706055,33,33,33,33],"widths":[250,436]}</content><styles/></table><para><coId>6064-1622722444552</coId><text/><inline-styles/><styles/></para><code><coId>8030-1622722444552</coId><text>@Test
@DisplayName("simple assertion")
public void simple() {
     assertEquals(3, 1 + 2, "simple math");
     assertNotEquals(3, 1 + 1);

     assertNotSame(new Object(), new Object());
     Object obj = new Object();
     assertSame(obj, obj);

     assertFalse(1 &gt; 2);
     assertTrue(1 &lt; 2);

     assertNull(null);
     assertNotNull(new Object());
}
</text><inline-styles><font-size><from>0</from><to>355</to><value>13</value></font-size><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>37</to><value>#669900</value></color><color><from>37</from><to>39</to><value>#595959</value></color><color><from>39</from><to>45</to><value>#d73a49</value></color><color><from>45</from><to>46</to><value>#595959</value></color><color><from>46</from><to>50</to><value>#22863a</value></color><color><from>50</from><to>51</to><value>#595959</value></color><color><from>51</from><to>57</to><value>#005cc5</value></color><color><from>57</from><to>80</to><value>#595959</value></color><color><from>80</from><to>81</to><value>#005cc5</value></color><color><from>81</from><to>83</to><value>#595959</value></color><color><from>83</from><to>84</to><value>#005cc5</value></color><color><from>84</from><to>85</to><value>#595959</value></color><color><from>85</from><to>86</to><value>#d73a49</value></color><color><from>86</from><to>87</to><value>#595959</value></color><color><from>87</from><to>88</to><value>#005cc5</value></color><color><from>88</from><to>90</to><value>#595959</value></color><color><from>90</from><to>103</to><value>#669900</value></color><color><from>103</from><to>127</to><value>#595959</value></color><color><from>127</from><to>128</to><value>#005cc5</value></color><color><from>128</from><to>130</to><value>#595959</value></color><color><from>130</from><to>131</to><value>#005cc5</value></color><color><from>131</from><to>132</to><value>#595959</value></color><color><from>132</from><to>133</to><value>#d73a49</value></color><color><from>133</from><to>134</to><value>#595959</value></color><color><from>134</from><to>135</to><value>#005cc5</value></color><color><from>135</from><to>158</to><value>#595959</value></color><color><from>158</from><to>161</to><value>#d73a49</value></color><color><from>161</from><to>162</to><value>#595959</value></color><color><from>162</from><to>168</to><value>#22863a</value></color><color><from>168</from><to>172</to><value>#595959</value></color><color><from>172</from><to>175</to><value>#d73a49</value></color><color><from>175</from><to>176</to><value>#595959</value></color><color><from>176</from><to>182</to><value>#22863a</value></color><color><from>182</from><to>192</to><value>#595959</value></color><color><from>192</from><to>198</to><value>#22863a</value></color><color><from>198</from><to>203</to><value>#595959</value></color><color><from>203</from><to>204</to><value>#d73a49</value></color><color><from>204</from><to>205</to><value>#595959</value></color><color><from>205</from><to>208</to><value>#d73a49</value></color><color><from>208</from><to>209</to><value>#595959</value></color><color><from>209</from><to>215</to><value>#22863a</value></color><color><from>215</from><to>264</to><value>#595959</value></color><color><from>264</from><to>265</to><value>#005cc5</value></color><color><from>265</from><to>266</to><value>#595959</value></color><color><from>266</from><to>267</to><value>#d73a49</value></color><color><from>267</from><to>268</to><value>#595959</value></color><color><from>268</from><to>269</to><value>#005cc5</value></color><color><from>269</from><to>288</to><value>#595959</value></color><color><from>288</from><to>289</to><value>#005cc5</value></color><color><from>289</from><to>290</to><value>#595959</value></color><color><from>290</from><to>291</to><value>#d73a49</value></color><color><from>291</from><to>292</to><value>#595959</value></color><color><from>292</from><to>293</to><value>#005cc5</value></color><color><from>293</from><to>313</to><value>#595959</value></color><color><from>313</from><to>317</to><value>#990055</value></color><color><from>317</from><to>339</to><value>#595959</value></color><color><from>339</from><to>342</to><value>#d73a49</value></color><color><from>342</from><to>343</to><value>#595959</value></color><color><from>343</from><to>349</to><value>#22863a</value></color><color><from>349</from><to>355</to><value>#595959</value></color><back-color><from>0</from><to>355</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>5790-1622722444552</coId><text>2、数组断言</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>6477-1622724099167</coId><text>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</text><inline-styles><font-size><from>0</from><to>42</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#323232</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>4066-1622724103318</coId><text>@Test
@DisplayName("array assertion")
public void array() {
 assertArrayEquals(new int[]{1, 2}, new int[] {1, 2});
}

</text><inline-styles><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>36</to><value>#669900</value></color><color><from>36</from><to>38</to><value>#595959</value></color><color><from>38</from><to>44</to><value>#d73a49</value></color><color><from>44</from><to>45</to><value>#595959</value></color><color><from>45</from><to>49</to><value>#22863a</value></color><color><from>49</from><to>50</to><value>#595959</value></color><color><from>50</from><to>55</to><value>#005cc5</value></color><color><from>55</from><to>79</to><value>#595959</value></color><color><from>79</from><to>82</to><value>#d73a49</value></color><color><from>82</from><to>83</to><value>#595959</value></color><color><from>83</from><to>86</to><value>#22863a</value></color><color><from>86</from><to>89</to><value>#595959</value></color><color><from>89</from><to>90</to><value>#005cc5</value></color><color><from>90</from><to>92</to><value>#595959</value></color><color><from>92</from><to>93</to><value>#005cc5</value></color><color><from>93</from><to>96</to><value>#595959</value></color><color><from>96</from><to>99</to><value>#d73a49</value></color><color><from>99</from><to>100</to><value>#595959</value></color><color><from>100</from><to>103</to><value>#22863a</value></color><color><from>103</from><to>107</to><value>#595959</value></color><color><from>107</from><to>108</to><value>#005cc5</value></color><color><from>108</from><to>110</to><value>#595959</value></color><color><from>110</from><to>111</to><value>#005cc5</value></color><color><from>111</from><to>116</to><value>#595959</value></color><back-color><from>0</from><to>116</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>2636-1622724099167</coId><text>3、组合断言</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>3662-1622724099167</coId><text>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</text><inline-styles><font-size><from>0</from><to>92</to><value>16</value></font-size><color><from>0</from><to>92</to><value>#323232</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>6820-1622724107909</coId><text>@Test
@DisplayName("assert all")
public void all() {
 assertAll("Math",
    () -&gt; assertEquals(2, 1 + 1),
    () -&gt; assertTrue(1 &gt; 0)
 );
}
</text><inline-styles><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>31</to><value>#669900</value></color><color><from>31</from><to>33</to><value>#595959</value></color><color><from>33</from><to>39</to><value>#d73a49</value></color><color><from>39</from><to>40</to><value>#595959</value></color><color><from>40</from><to>44</to><value>#22863a</value></color><color><from>44</from><to>45</to><value>#595959</value></color><color><from>45</from><to>48</to><value>#005cc5</value></color><color><from>48</from><to>64</to><value>#595959</value></color><color><from>64</from><to>70</to><value>#669900</value></color><color><from>70</from><to>79</to><value>#595959</value></color><color><from>79</from><to>81</to><value>#d73a49</value></color><color><from>81</from><to>95</to><value>#595959</value></color><color><from>95</from><to>96</to><value>#005cc5</value></color><color><from>96</from><to>98</to><value>#595959</value></color><color><from>98</from><to>99</to><value>#005cc5</value></color><color><from>99</from><to>100</to><value>#595959</value></color><color><from>100</from><to>101</to><value>#d73a49</value></color><color><from>101</from><to>102</to><value>#595959</value></color><color><from>102</from><to>103</to><value>#005cc5</value></color><color><from>103</from><to>113</to><value>#595959</value></color><color><from>113</from><to>115</to><value>#d73a49</value></color><color><from>115</from><to>127</to><value>#595959</value></color><color><from>127</from><to>128</to><value>#005cc5</value></color><color><from>128</from><to>129</to><value>#595959</value></color><color><from>129</from><to>130</to><value>#d73a49</value></color><color><from>130</from><to>131</to><value>#595959</value></color><color><from>131</from><to>132</to><value>#005cc5</value></color><color><from>132</from><to>139</to><value>#595959</value></color><back-color><from>0</from><to>139</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>3615-1622724107909</coId><text>4、异常断言</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>9199-1622724115732</coId><text>在JUnit4时期，想要测试方法的异常情况时，需要用@Rule注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式Assertions.assertThrows() ,配合函数式编程就可以进行使用。</text><inline-styles><bold><from>26</from><to>31</to><value>true</value></bold><bold><from>79</from><to>104</to><value>true</value></bold><font-size><from>0</from><to>121</to><value>16</value></font-size><color><from>0</from><to>26</to><value>#121212</value></color><color><from>26</from><to>31</to><value>#404040</value></color><color><from>31</from><to>79</to><value>#121212</value></color><color><from>79</from><to>104</to><value>#404040</value></color><color><from>104</from><to>121</to><value>#121212</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>5339-1622724123323</coId><text>@Test
@DisplayName("异常测试")
public void exceptionTest() {
    ArithmeticException exception = Assertions.assertThrows(
           //扔出断言异常
            ArithmeticException.class, () -&gt; System.out.println(1 % 0));

}
</text><inline-styles><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>25</to><value>#669900</value></color><color><from>25</from><to>27</to><value>#595959</value></color><color><from>27</from><to>33</to><value>#d73a49</value></color><color><from>33</from><to>34</to><value>#595959</value></color><color><from>34</from><to>38</to><value>#22863a</value></color><color><from>38</from><to>39</to><value>#595959</value></color><color><from>39</from><to>52</to><value>#005cc5</value></color><color><from>52</from><to>91</to><value>#595959</value></color><color><from>91</from><to>92</to><value>#d73a49</value></color><color><from>92</from><to>129</to><value>#595959</value></color><color><from>129</from><to>137</to><value>#6a737d</value></color><color><from>137</from><to>170</to><value>#595959</value></color><color><from>170</from><to>175</to><value>#d73a49</value></color><color><from>175</from><to>180</to><value>#595959</value></color><color><from>180</from><to>182</to><value>#d73a49</value></color><color><from>182</from><to>202</to><value>#595959</value></color><color><from>202</from><to>203</to><value>#005cc5</value></color><color><from>203</from><to>204</to><value>#595959</value></color><color><from>204</from><to>205</to><value>#d73a49</value></color><color><from>205</from><to>206</to><value>#595959</value></color><color><from>206</from><to>207</to><value>#005cc5</value></color><color><from>207</from><to>213</to><value>#595959</value></color><back-color><from>0</from><to>213</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>9951-1622724115732</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>9242-1622724115732</coId><text>5、超时断言</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>3978-1622724115732</coId><text>Junit5还提供了Assertions.assertTimeout() 为测试方法设置了超时时间</text><inline-styles><bold><from>10</from><to>36</to><value>true</value></bold><font-size><from>0</from><to>49</to><value>16</value></font-size><color><from>0</from><to>49</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>4960-1622724119403</coId><text>@Test
@DisplayName("超时测试")
public void timeoutTest() {
    //如果测试方法时间超过1s将会异常
    Assertions.assertTimeout(Duration.ofMillis(1000), () -&gt; Thread.sleep(500));
}

</text><inline-styles><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>25</to><value>#669900</value></color><color><from>25</from><to>27</to><value>#595959</value></color><color><from>27</from><to>33</to><value>#d73a49</value></color><color><from>33</from><to>34</to><value>#595959</value></color><color><from>34</from><to>38</to><value>#22863a</value></color><color><from>38</from><to>39</to><value>#595959</value></color><color><from>39</from><to>50</to><value>#005cc5</value></color><color><from>50</from><to>59</to><value>#595959</value></color><color><from>59</from><to>77</to><value>#6a737d</value></color><color><from>77</from><to>125</to><value>#595959</value></color><color><from>125</from><to>129</to><value>#005cc5</value></color><color><from>129</from><to>135</to><value>#595959</value></color><color><from>135</from><to>137</to><value>#d73a49</value></color><color><from>137</from><to>151</to><value>#595959</value></color><color><from>151</from><to>154</to><value>#005cc5</value></color><color><from>154</from><to>159</to><value>#595959</value></color><back-color><from>0</from><to>159</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>7660-1622724115732</coId><text>6、快速失败</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>8943-1622724115732</coId><text>通过 fail 方法直接使得测试失败</text><inline-styles><font-size><from>0</from><to>18</to><value>16</value></font-size><color><from>0</from><to>18</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>3473-1622724126403</coId><text>@Test
@DisplayName("fail")
public void shouldFail() {
 fail("This should fail");
}
</text><inline-styles><color><from>0</from><to>5</to><value>#1f7f9a</value></color><color><from>5</from><to>6</to><value>#595959</value></color><color><from>6</from><to>18</to><value>#1f7f9a</value></color><color><from>18</from><to>19</to><value>#595959</value></color><color><from>19</from><to>25</to><value>#669900</value></color><color><from>25</from><to>27</to><value>#595959</value></color><color><from>27</from><to>33</to><value>#d73a49</value></color><color><from>33</from><to>34</to><value>#595959</value></color><color><from>34</from><to>38</to><value>#22863a</value></color><color><from>38</from><to>39</to><value>#595959</value></color><color><from>39</from><to>49</to><value>#005cc5</value></color><color><from>49</from><to>60</to><value>#595959</value></color><color><from>60</from><to>78</to><value>#669900</value></color><color><from>78</from><to>82</to><value>#595959</value></color><back-color><from>0</from><to>82</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="a"><coId>4778-1622724126403</coId><text>4、前置条件（assumptions）</text><inline-styles><bold><from>0</from><to>19</to><value>true</value></bold><font-size><from>0</from><to>19</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>9987-1622724188208</coId><text>JUnit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的执行终止。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</text><inline-styles><bold><from>15</from><to>30</to><value>true</value></bold><bold><from>43</from><to>58</to><value>true</value></bold><bold><from>64</from><to>81</to><value>true</value></bold><font-size><from>0</from><to>121</to><value>16</value></font-size><color><from>0</from><to>121</to><value>#323232</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><image><coId>1868-1623135251514</coId><source>https://note.youdao.com/yws/res/13799/5A8DB5ABC2F14AE599095DB5ECCEE652</source><text/><styles><width>786</width><height>248</height></styles></image><heading compat="true" level="a"><coId>5386-1623135250411</coId><text/><inline-styles/><styles/></heading><heading compat="true" level="a"><coId>8150-1623135250411</coId><text>5、嵌套测试</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>7059-1623135264621</coId><text>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</text><inline-styles><font-size><from>0</from><to>110</to><value>16</value></font-size><color><from>0</from><to>110</to><value>#323232</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>2651-1623135479846</coId><text>@DisplayName("A stack")
class TestingAStackDemo {

    Stack&lt;Object&gt; stack;
    //嵌套测试的情况下，外层的Test不能驱动内层的BeforeEach/All之类的方法提前/之后运行
    @Test
    @DisplayName("is instantiated with new Stack()")
    void isInstantiatedWithNew() {
        new Stack&lt;&gt;();
    }

    @Nested
    @DisplayName("when new")
    class WhenNew {

        @BeforeEach
        void createNewStack() {
            stack = new Stack&lt;&gt;();
        }

        @Test
        @DisplayName("is empty")
        void isEmpty() {
            assertTrue(stack.isEmpty());
        }

        @Test
        @DisplayName("throws EmptyStackException when popped")
        void throwsExceptionWhenPopped() {
            assertThrows(EmptyStackException.class, stack::pop);
        }

        @Test
        @DisplayName("throws EmptyStackException when peeked")
        void throwsExceptionWhenPeeked() {
            assertThrows(EmptyStackException.class, stack::peek);
        }

        @Nested
        @DisplayName("after pushing an element")
        class AfterPushing {

            String anElement = "an element";

            @BeforeEach
            void pushAnElement() {
                stack.push(anElement);
            }

            @Test
            @DisplayName("it is no longer empty")
            void isNotEmpty() {
                assertFalse(stack.isEmpty());
            }

            @Test
            @DisplayName("returns the element when popped and is empty")
            void returnElementWhenPopped() {
                assertEquals(anElement, stack.pop());
                assertTrue(stack.isEmpty());
            }

            @Test
            @DisplayName("returns the element when peeked but remains not empty")
            void returnElementWhenPeeked() {
                assertEquals(anElement, stack.peek());
                assertFalse(stack.isEmpty());
            }
        }
    }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="a"><coId>8739-1623135479846</coId><text>6、参数化测试</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>7</to><value>32</value></font-size></inline-styles><styles><line-height>1.2857142857142858</line-height></styles></heading><para><coId>2250-1623135974154</coId><text>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#121212</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>9452-1623135974154</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>8312-1623135974154</coId><text>利用@ValueSource等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</text><inline-styles><bold><from>2</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>75</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#121212</value></color><color><from>2</from><to>14</to><value>#404040</value></color><color><from>14</from><to>75</to><value>#121212</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>6840-1623135974154</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>4331-1623135974154</coId><text>@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>52</to><value>16</value></font-size><color><from>0</from><to>52</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>1946-1623135974154</coId><text>@NullSource: 表示为参数化测试提供一个null的入参</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>32</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>7734-1623135974154</coId><text>@EnumSource: 表示为参数化测试提供一个枚举入参</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>6160-1623135974154</coId><text>@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>37</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>6391-1623135974154</coId><text>@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>49</to><value>16</value></font-size><color><from>0</from><to>49</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>6228-1623136055131</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><para><coId>4978-1623136100443</coId><text>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现ArgumentsProvider接口，任何外部文件都可以作为它的入参。</text><inline-styles><bold><from>105</from><to>122</to><value>true</value></bold><font-size><from>0</from><to>141</to><value>16</value></font-size><color><from>0</from><to>105</to><value>#121212</value></color><color><from>122</from><to>141</to><value>#121212</value></color><back-color><from>0</from><to>141</to><value>#FAE220</value></back-color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>9089-1623136055328</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><code><coId>7090-1623136124678</coId><text>@ParameterizedTest//代表该方法是一个参数化测试
@ValueSource(strings = {"one", "two", "three"})
@DisplayName("参数化测试1")
public void parameterizedTest1(String string) {
    System.out.println(string);
    Assertions.assertTrue(StringUtils.isNotBlank(string));
}


@ParameterizedTest
@MethodSource("method")    //指定方法名
@DisplayName("方法来源参数")
public void testWithExplicitLocalMethodSource(String name) {
    System.out.println(name);
    Assertions.assertNotNull(name);
}

static Stream&lt;String&gt; method() {
    return Stream.of("apple", "banana");
}
</text><inline-styles><font-size><from>0</from><to>18</to><value>13</value></font-size><font-size><from>33</from><to>530</to><value>13</value></font-size><color><from>0</from><to>18</to><value>#1f7f9a</value></color><color><from>33</from><to>34</to><value>#595959</value></color><color><from>34</from><to>46</to><value>#1f7f9a</value></color><color><from>46</from><to>55</to><value>#595959</value></color><color><from>55</from><to>56</to><value>#d73a49</value></color><color><from>56</from><to>58</to><value>#595959</value></color><color><from>58</from><to>63</to><value>#669900</value></color><color><from>63</from><to>65</to><value>#595959</value></color><color><from>65</from><to>70</to><value>#669900</value></color><color><from>70</from><to>72</to><value>#595959</value></color><color><from>72</from><to>79</to><value>#669900</value></color><color><from>79</from><to>82</to><value>#595959</value></color><color><from>82</from><to>94</to><value>#1f7f9a</value></color><color><from>94</from><to>95</to><value>#595959</value></color><color><from>95</from><to>103</to><value>#669900</value></color><color><from>103</from><to>105</to><value>#595959</value></color><color><from>105</from><to>111</to><value>#d73a49</value></color><color><from>111</from><to>112</to><value>#595959</value></color><color><from>112</from><to>116</to><value>#22863a</value></color><color><from>116</from><to>117</to><value>#595959</value></color><color><from>117</from><to>135</to><value>#005cc5</value></color><color><from>135</from><to>136</to><value>#595959</value></color><color><from>136</from><to>142</to><value>#22863a</value></color><color><from>142</from><to>248</to><value>#595959</value></color><color><from>248</from><to>266</to><value>#1f7f9a</value></color><color><from>266</from><to>267</to><value>#595959</value></color><color><from>267</from><to>280</to><value>#1f7f9a</value></color><color><from>280</from><to>281</to><value>#595959</value></color><color><from>281</from><to>289</to><value>#669900</value></color><color><from>289</from><to>294</to><value>#595959</value></color><color><from>294</from><to>301</to><value>#6a737d</value></color><color><from>301</from><to>302</to><value>#595959</value></color><color><from>302</from><to>314</to><value>#1f7f9a</value></color><color><from>314</from><to>315</to><value>#595959</value></color><color><from>315</from><to>323</to><value>#669900</value></color><color><from>323</from><to>325</to><value>#595959</value></color><color><from>325</from><to>331</to><value>#d73a49</value></color><color><from>331</from><to>332</to><value>#595959</value></color><color><from>332</from><to>336</to><value>#22863a</value></color><color><from>336</from><to>337</to><value>#595959</value></color><color><from>337</from><to>370</to><value>#005cc5</value></color><color><from>370</from><to>371</to><value>#595959</value></color><color><from>371</from><to>377</to><value>#22863a</value></color><color><from>377</from><to>455</to><value>#595959</value></color><color><from>455</from><to>461</to><value>#d73a49</value></color><color><from>461</from><to>468</to><value>#595959</value></color><color><from>468</from><to>469</to><value>#d73a49</value></color><color><from>469</from><to>475</to><value>#22863a</value></color><color><from>475</from><to>476</to><value>#d73a49</value></color><color><from>476</from><to>477</to><value>#595959</value></color><color><from>477</from><to>483</to><value>#005cc5</value></color><color><from>483</from><to>492</to><value>#595959</value></color><color><from>492</from><to>498</to><value>#d73a49</value></color><color><from>498</from><to>509</to><value>#595959</value></color><color><from>509</from><to>516</to><value>#669900</value></color><color><from>516</from><to>518</to><value>#595959</value></color><color><from>518</from><to>526</to><value>#669900</value></color><color><from>526</from><to>530</to><value>#595959</value></color><back-color><from>0</from><to>18</to><value>#f9f9f9</value></back-color><back-color><from>33</from><to>530</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>1236-1623136113104</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>8362-1611884981381</coId><text>整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方</text><inline-styles/><styles/></para><para><coId>7076-1611885081541</coId><text>法在代码库中删除</text><inline-styles/><styles/></para><para><coId>8371-1611885096511</coId><text>Spring 5.0 框架自带了通用的日志封装 ，Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2，Spring5 框架整合 Log4j2</text><inline-styles/><styles/></para><image><coId>3539-1613721289481</coId><source>https://note.youdao.com/yws/res/11485/44AE3D0F011041A190F57089CD1F84D5</source><text/><styles><width>620</width><height>283</height></styles></image><heading compat="true" level="2"><coId>6914-1611887525628</coId><text> Spring5 框架核心容器支持@Nullable 注解</text><inline-styles><bold><from>1</from><to>29</to><value>true</value></bold><font-size><from>1</from><to>29</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>9950-1611887556252</coId><text>（1）@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</text><inline-styles/><styles/></para><para><coId>1076-1611887558471</coId><text>（2）注解用在方法上面，方法返回值可以为空</text><inline-styles/><styles/></para><para><coId>3636-1611887571237</coId><text>（3）注解使用在方法参数里面，方法参数可以为空</text><inline-styles/><styles/></para><para><coId>1721-1611887582536</coId><text>（4）注解使用在属性上面，属性值可以为空</text><inline-styles/><styles/></para><heading compat="true" level="2"><coId>1453-1611888265598</coId><text>Spring5 核心容器支持函数式风格 GenericApplicationContext</text><inline-styles><bold><from>0</from><to>45</to><value>true</value></bold><font-size><from>0</from><to>45</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>5069-1611888280019</coId><text>//函数式风格创建对象，交给spring进行管理</text><inline-styles/><styles/></para><code><coId>3789-1611888364740</coId><text>@Test
public void testGenericApplicationContext() {
//1 创建 GenericApplicationContext 对象
GenericApplicationContext context = new GenericApplicationContext();
//2 调用 context 的方法对象注册
context.refresh();
context.registerBean("user1",User.class,() -&gt; new User());
//3 获取在 spring 注册的对象
//注册没有声明名字时 User user = (User)context.getBean("com.atguigu.spring5.test.User");
User user = (User)context.getBean("user1");
System.out.println(user);
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>4259-1611888280561</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>5999-1611888280625</coId><text>Spring5 支持整合 JUnit5</text><inline-styles><bold><from>0</from><to>19</to><value>true</value></bold><font-size><from>0</from><to>19</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>6382-1611889604422</coId><text>同时支持Junit4，需要idea注入Junit4，导入spring-test...jar包</text><inline-styles/><styles/></para><code><coId>3193-1611889474051</coId><text>@RunWith(SpringJUnit4ClassRunner.class) //单元测试框架
@ContextConfiguration("classpath:bean1.xml") //加载配置文件
public class JTest4 {
    @Autowired
    private UserService userService;
    @Test
    public void test1() {
        userService.accountMoney();
    }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>9712-1611888280722</coId><text/><inline-styles/><styles/></para><heading compat="true" level="3"><coId>6949-1611888280749</coId><text>spring整合Junit5</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#df402a</value></color></inline-styles><styles/></heading><para><coId>9066-1611889720022</coId><text>编译器引入Junit5</text><inline-styles/><styles/></para><code><coId>5884-1611889740490</coId><text>@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:bean1.xml")
public class JTest5 {
@Autowired
private UserService userService;
@Test
public void test1() {
userService.accountMoney();
}
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>5839-1611889740490</coId><text>使用一个复合注解替代上面两个注解完成整合</text><inline-styles/><styles/></para><code><coId>3538-1611889894241</coId><text>@SpringJUnitConfig(locations = "classpath:bean1.xml")
public class JTest5 {
@Autowired
private UserService userService;
@Test
public void test1() {
userService.accountMoney();
}
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>9183-1611889894241</coId><text/><inline-styles/><styles/></para></body></note>
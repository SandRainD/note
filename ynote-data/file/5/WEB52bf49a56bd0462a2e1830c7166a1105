{"2":"1","3":"1oWG-1647314194715","4":{"fv":"0"},"5":[{"3":"ClLn-1647314194715","5":[{"2":"2","3":"VOZJ-1647314194715","7":[{"8":"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为private，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象的变量也必须定义成静态的。、"}]}]},{"3":"rcul-1647314552728","5":[{"2":"2","3":"yjrc-1647314552728"}]},{"3":"LskM-1647314479868","5":[{"2":"2","3":"aAmM-1647314479866","7":[{"8":"区分饿汉式和懒汉式："}]}]},{"3":"xQwC-1647314548252","5":[{"2":"2","3":"vnC6-1647314548252","7":[{"8":"饿汉式:坏处:对象加载时间过长。好处：线程安全 private static Order instance\u003dnew Instance();"}]}]},{"3":"SCAn-1647314579710","5":[{"2":"2","3":"FCdk-1647314579710","7":[{"8":"懒汉式:好处:延迟对象的创建。坏处：线程不安全 private static Order instance\u003dnull;"}]}]},{"3":"s4iD-1647314548252","5":[{"2":"2","3":"lcEV-1647314548252"}]},{"3":"7yEB-1647314723388","5":[{"2":"2","3":"8H2j-1647314723388","7":[{"8":"单例模式的优点:"}]}]},{"3":"A8Ud-1647314720868","5":[{"2":"2","3":"WS0M-1647314720868","7":[{"8":"由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。"}]}]},{"3":"bAjf-1647314720868","5":[{"2":"2","3":"GFrd-1647314720868"}]},{"3":"6L06-1647314800230","4":{"u":"https://note.youdao.com/yws/res/17350/WEBRESOURCE16475f77d70be98b2e5ff243029e6acc"},"6":"im"},{"3":"nV6z-1647314479995","5":[{"2":"2","3":"nr6P-1647314479994"}]},{"3":"ebK9-1647314480121","5":[{"2":"2","3":"vKaS-1647314480121"}]}],"__compress__":true}
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>9010-1636716296669</coId><text>DockerFile就是用来构建docker镜像的构建文件！命令脚本</text><inline-styles><font-size><from>0</from><to>34</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>4183-1637042121742</coId><text>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层！</text><inline-styles><font-size><from>0</from><to>40</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>8567-1637042121742</coId><text/><inline-styles/><styles/></para><table><coId>3394-1637042121743</coId><resource-list/><content>{"cells":[{"value":"# 创建一个dockerfile文件， 名字可以随机\n# 文件的内容 指定（大写） 参数\n \nFROM centos\n \nVOLUME [\"volume01\", \"volume02\"]  //匿名挂载\n \nCMD echo \"----end----\"\nCMD /bin/bash\n \n# 这里的每一个命令都是镜像的一层！"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>3870-1637042121743</coId><text>docker build -f dockerfile1 -t kuangshen/centos:1.0 .</text><inline-styles><font-size><from>0</from><to>53</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6664-1637042121743</coId><text>启动自己创建的容器：</text><inline-styles><font-size><from>0</from><to>10</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7862-1637042121743</coId><text>docker run -it 镜像id /bin/bash</text><inline-styles><font-size><from>0</from><to>29</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7270-1637042121743</coId><text/><inline-styles/><styles/></para><para><coId>1996-1637042121743</coId><text>创建镜像并挂载的方式我们未来使用的十分多， 因为我们通常会构建自己的镜像！</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#4d4d4d</value></color><back-color><from>0</from><to>37</to><value>#ffffff</value></back-color></inline-styles><styles><line-height>1.625</line-height></styles></para><para><coId>7320-1637042121743</coId><text>假设构建镜像时候没有挂载卷，要手动镜像挂载 -v 卷名:容器内路径！</text><inline-styles><font-size><from>0</from><to>34</to><value>16</value></font-size><color><from>0</from><to>34</to><value>#4d4d4d</value></color><back-color><from>0</from><to>34</to><value>#ffffff</value></back-color></inline-styles><styles><line-height>1.625</line-height></styles></para><para><coId>2612-1637042121743</coId><text/><inline-styles/><styles/></para><heading compat="true" level="1"><coId>1063-1637042209864</coId><text>数据卷容器</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>28</value></font-size></inline-styles><styles/></heading><para><coId>1493-1637042219884</coId><text>多个mysql同步数据</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size></inline-styles><styles/></para><image><coId>7245-1637042247415</coId><source>https://note.youdao.com/yws/res/14968/FACE2D880C8B413581C9B5001CBBC3A6</source><text/><styles><width>620</width><height>209</height></styles></image><para><coId>4140-1637042210444</coId><text># 启动3个容器，通过我们刚才自己写的镜像启动</text><inline-styles><font-size><from>0</from><to>23</to><value>16</value></font-size></inline-styles><styles/></para><image><coId>5791-1637043009989</coId><source>https://note.youdao.com/yws/res/14987/20566BDD75DC4930BBF5C4F088463AB1</source><text/><styles><width>620</width><height>379</height></styles></image><para><coId>3028-1637043009989</coId><text>docker02同步docker01：</text><inline-styles><font-size><from>0</from><to>19</to><value>16</value></font-size></inline-styles><styles/></para><image><coId>9040-1637042459434</coId><source>https://note.youdao.com/yws/res/14973/5E0E908B9B45458FBD44E473E92B4AD3</source><text/><styles><width>620</width><height>333</height></styles></image><para><coId>4274-1637042210654</coId><text>多个mysql实现数据共享</text><inline-styles><font-size><from>0</from><to>13</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>8210-1637042490358</coId><resource-list/><content>{"cells":[{"value":"[root@iZ2zeg4ytp0whqtmxbsqiiZ home]# docker run -d -p 3344:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n \n[root@iZ2zeg4ytp0whqtmxbsqiiZ home]# docker run -d -p 3344:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>6460-1637042210896</coId><text>结论</text><inline-styles><bold><from>0</from><to>2</to><value>true</value></bold><font-size><from>0</from><to>2</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5073-1637042506427</coId><text>容器之间配置信息的传递， 数据卷容器的声明周期一直持续到没有容器使用为止。</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7028-1637042506427</coId><text>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</text><inline-styles><font-size><from>0</from><to>30</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7772-1637042211006</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>9422-1637044017171</coId><styles/></horizontal-line><para><coId>5338-1637044019402</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>5095-1637044019402</coId><styles/></horizontal-line><para><coId>3171-1637044011556</coId><text/><inline-styles/><styles/></para><para><coId>5325-1637044011702</coId><text/><inline-styles/><styles/></para><para><coId>4941-1637044011833</coId><text/><inline-styles/><styles/></para><para><coId>4534-1637044011983</coId><text/><inline-styles/><styles/></para><para><coId>8057-1637042211268</coId><text>dockerFile是用来构建docker镜像的文件！命令参数脚本！</text><inline-styles/><styles/></para><para><coId>9544-1637043997231</coId><text>构建步骤</text><inline-styles/><styles/></para><para><coId>7030-1637043997231</coId><text>1. 编写一个dockerFile文件</text><inline-styles/><styles/></para><para><coId>3026-1637043997231</coId><text>2.docker build 构建成为一个镜像</text><inline-styles/><styles/></para><para><coId>6235-1637043997231</coId><text>3. docker run 运行镜像</text><inline-styles/><styles/></para><para><coId>8630-1637043997231</coId><text>4. docker push 发布镜像（DockerHub、阿里云镜像）</text><inline-styles/><styles/></para><para><coId>2525-1637043997231</coId><text/><inline-styles/><styles/></para><image><coId>8221-1637044936820</coId><source>https://note.youdao.com/yws/res/14996/4F3D7C849B3C40CDB8EE97A808389511</source><text/><styles><width>620</width><height>257</height></styles></image><para><coId>9197-1637042212211</coId><text>很多官方镜像都像是基础包，很多功能都不具备，我们通常会自己搭建自己的镜像！</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9039-1637045069210</coId><text/><inline-styles/><styles/></para><para><coId>9763-1637042212349</coId><text>DockerFile的构建过程</text><inline-styles/><styles/></para><para><coId>1260-1637045048010</coId><text>基础知识：</text><inline-styles/><styles/></para><para><coId>7788-1637045048010</coId><text>每个保留关键字（指令）都是必须大写字母</text><inline-styles/><styles/></para><para><coId>8516-1637045048010</coId><text>执行从上到下顺序执行</text><inline-styles/><styles/></para><para><coId>3373-1637045048010</coId><text># 表示注释</text><inline-styles/><styles/></para><para><coId>1447-1637045048010</coId><text>每个指令都会创建提交一个新的镜像层，并提交！</text><inline-styles/><styles/></para><image><coId>5520-1637046366306</coId><source>https://note.youdao.com/yws/res/15002/E9F75E6E488144EF9CD986FDAC328C0C</source><text/><styles><width>620</width><height>280</height></styles></image><para><coId>2011-1637045048010</coId><text>dockerFile是面向开发的， 我们以后要发布项目， 做镜像， 就需要编写dockefile文件， 这个文件十分简单！</text><inline-styles/><styles/></para><para><coId>4730-1637045048010</coId><text>Docker镜像逐渐成为企业的交互标准，必须要掌握！</text><inline-styles/><styles/></para><para><coId>5596-1637045048010</coId><text>步骤：开发，部署， 运维..... 缺一不可！</text><inline-styles/><styles/></para><para><coId>1694-1637045048010</coId><text>DockerFile： 构建文件， 定义了一切的步骤，源代码</text><inline-styles/><styles/></para><para><coId>6121-1637045048010</coId><text>DockerImages： 通过DockerFile构建生成的镜像， 最终发布和运行的产品！</text><inline-styles/><styles/></para><para><coId>5795-1637045048010</coId><text>Docker容器：容器就是镜像运行起来提供服务器</text><inline-styles/><styles/></para><para><coId>7744-1637045048010</coId><text/><inline-styles/><styles/></para><para><coId>5545-1637042212486</coId><text/><inline-styles/><styles/></para><para><coId>7078-1637047168602</coId><text>Docker指令说明</text><inline-styles><font-size><from>0</from><to>10</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>8230-1637047261071</coId><resource-list/><content>{"cells":[{"value":"FROM            # 基础镜像，一切从这里开始构建\nMAINTAINER      # 镜像是谁写的， 姓名+邮箱，目前官方已经不再使用，建议label\nRUN             # 镜像构建的时候需要运行的命令\nADD             # 步骤， tomcat镜像， 这个tomcat压缩包！添加内容\nWORKDIR         # 镜像的工作目录\nVOLUME          # 挂载的目录\nEXPOSE          # 保留端口配置\nCMD             # 指定这个容器启动的时候要运行的命令，只有最后一个会生效可被替代\nENTRYPOINT      # 指定这个容器启动的时候要运行的命令， 可以追加命令\nONBUILD         # 当构建一个被继承DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令\nCOPY            # 类似ADD, 将我们文件拷贝到镜像中\nENV             # 构建的时候设置环境变量！"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>6731-1637047169158</coId><text/><inline-styles/><styles/></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><heading compat="true" level="2"><coId>6200-1618910000872</coId><text>1、静态资源目录</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>5017-1618910075492</coId><text>只要静态资源放在类路径下： called /static (or /public or /resources or /META-INF/resources</text><inline-styles><font-size><from>0</from><to>77</to><value>16</value></font-size><back-color><from>21</from><to>29</to><value>#FAE220</value></back-color><back-color><from>33</from><to>41</to><value>#FAE220</value></back-color><back-color><from>44</from><to>55</to><value>#FAE220</value></back-color><back-color><from>58</from><to>77</to><value>#FAE220</value></back-color></inline-styles><styles/></para><para><coId>7836-1618910075492</coId><text>访问 ： 当前项目根路径/ + 静态资源名</text><inline-styles><font-size><from>0</from><to>21</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2015-1618910162329</coId><text/><inline-styles/><styles/></para><para><coId>4970-1618910128815</coId><text>原理： 静态映射/**。</text><inline-styles><font-size><from>0</from><to>12</to><value>15</value></font-size><color><from>0</from><to>12</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>8270-1618910128979</coId><text>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</text><inline-styles><font-size><from>0</from><to>62</to><value>15</value></font-size><color><from>0</from><to>62</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><image><coId>8520-1618910166712</coId><source>https://note.youdao.com/yws/res/13329/0BD9866DE52C4FFB937C856BA5B85035</source><text/><styles><width>169</width><height>231</height></styles></image><para><coId>4834-1618910137527</coId><text>改变默认的静态资源路径application.yaml：</text><inline-styles/><styles><line-height>1.74</line-height></styles></para><code><coId>5710-1618910144623</coId><text>spring:
  mvc:
    static-path-pattern: /res/**
    #改变默认资源的访问前缀
    
#改变文件默认静态资源路径，已过时
  resources:
    static-locations: [classpath: /haha/]
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>7742-1618910144623</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>2835-1618910325789</coId><text>2、静态资源访问前缀</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>4036-1618910342860</coId><text>默认无前缀</text><inline-styles><font-size><from>0</from><to>5</to><value>15</value></font-size><color><from>0</from><to>5</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><code><coId>2720-1618910672816</coId><text>spring:
  mvc:
    static-path-pattern: /res/**
</text><inline-styles><color><from>0</from><to>6</to><value>#990055</value></color><color><from>6</from><to>7</to><value>#1f7f9a</value></color><color><from>7</from><to>8</to><value>#595959</value></color><color><from>8</from><to>13</to><value>#990055</value></color><color><from>13</from><to>14</to><value>#1f7f9a</value></color><color><from>14</from><to>15</to><value>#595959</value></color><color><from>15</from><to>38</to><value>#990055</value></color><color><from>38</from><to>40</to><value>#1f7f9a</value></color><color><from>40</from><to>47</to><value>#595959</value></color><back-color><from>0</from><to>47</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>5513-1618910669067</coId><text>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</text><inline-styles><font-size><from>0</from><to>46</to><value>15</value></font-size><color><from>0</from><to>46</to><value>#404040</value></color></inline-styles><styles><line-height>1.74</line-height></styles></para><para><coId>5869-1618910675877</coId><text/><inline-styles/><styles><line-height>1.74</line-height></styles></para><heading compat="true" level="1"><coId>3338-1618910676020</coId><text>3、webjar</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>28</value></font-size><color><from>0</from><to>8</to><value>#a6a6a6</value></color></inline-styles><styles><line-height>1.4</line-height></styles></heading><para><coId>7259-1618910708341</coId><text>将一些js，jQuery文件打包</text><inline-styles/><styles/></para><para><coId>7431-1618910692294</coId><text>自动映射 /webjars/**</text><inline-styles><underline><from>6</from><to>13</to><value>true</value></underline><color><from>6</from><to>13</to><value>#003884</value></color><href><from>6</from><to>13</to><value>http://localhost:8080/webjars/jquery/3.5.1/jquery.js</value></href></inline-styles><styles/></para><code><coId>6721-1618910732902</coId><text>        &lt;dependency&gt;
            &lt;groupId&gt;org.webjars&lt;/groupId&gt;
            &lt;artifactId&gt;jquery&lt;/artifactId&gt;
            &lt;version&gt;3.5.1&lt;/version&gt;
        &lt;/dependency&gt;
</text><inline-styles><font-size><from>0</from><to>166</to><value>13</value></font-size><color><from>0</from><to>8</to><value>#595959</value></color><color><from>8</from><to>20</to><value>#22863a</value></color><color><from>20</from><to>33</to><value>#595959</value></color><color><from>33</from><to>42</to><value>#22863a</value></color><color><from>42</from><to>53</to><value>#595959</value></color><color><from>53</from><to>63</to><value>#22863a</value></color><color><from>63</from><to>76</to><value>#595959</value></color><color><from>76</from><to>88</to><value>#22863a</value></color><color><from>88</from><to>94</to><value>#595959</value></color><color><from>94</from><to>107</to><value>#22863a</value></color><color><from>107</from><to>120</to><value>#595959</value></color><color><from>120</from><to>129</to><value>#22863a</value></color><color><from>129</from><to>134</to><value>#595959</value></color><color><from>134</from><to>144</to><value>#22863a</value></color><color><from>144</from><to>153</to><value>#595959</value></color><color><from>153</from><to>166</to><value>#22863a</value></color><back-color><from>0</from><to>166</to><value>#f9f9f9</value></back-color></inline-styles><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>7481-1618910732902</coId><text>访问地址：http://localhost:8080/webjars/jquery/3.5.1/jquery.js   后面地址要按照依赖里面的包路径</text><inline-styles><bold><from>35</from><to>57</to><value>true</value></bold><underline><from>5</from><to>57</to><value>true</value></underline><color><from>5</from><to>57</to><value>#003884</value></color><href><from>5</from><to>57</to><value>http://localhost:8080/webjars/jquery/3.5.1/jquery.js</value></href></inline-styles><styles/></para><para><coId>5850-1618910811096</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>8710-1618910811673</coId><text>4、欢迎页支持</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>7</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>3514-1618918308956</coId><text>静态资源路径下  index.html</text><inline-styles><font-size><from>0</from><to>19</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1334-1618918308956</coId><text>可以配置静态资源路径</text><inline-styles><font-size><from>0</from><to>10</to><value>16</value></font-size></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>3364-1618918308956</coId><text>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</text><inline-styles><font-size><from>0</from><to>39</to><value>16</value></font-size></inline-styles><styles><text-indent>1</text-indent></styles></para><code><coId>9630-1618918355222</coId><text>spring:
#  mvc:
# static-path-pattern: /res/**   这个会导致welcome page功能失效
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>8787-1618910812971</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>7336-1618910813505</coId><text>5、自定义 Favicon</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>4421-1618918559919</coId><text>favicon.ico 放在静态资源目录下即可。</text><inline-styles/><styles/></para><code><coId>4884-1618918562896</coId><text>static-path-pattern: /res/**   这个会导致 Favicon 功能失效
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>8791-1618910813535</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>7092-1618918756902</coId><styles/></horizontal-line><para><coId>5090-1618918756902</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>9835-1618918751746</coId><styles/></horizontal-line><para><coId>2470-1618918577120</coId><text>静态资源配置原理WebMvcAutoConfiguration</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>24</value></font-size></inline-styles><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>5910-1618918733982</coId><text>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</text><inline-styles/><styles><line-height>1.3333333333333333</line-height></styles></para><para><coId>6591-1618918914542</coId><text>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</text><inline-styles/><styles/></para><code><coId>1360-1618920133293</coId><text>@Configuration(proxyBeanMethods = false)
@ConditionalOnWebApplication(type = Type.SERVLET)
@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })
@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)
@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,
        ValidationAutoConfiguration.class })
public class WebMvcAutoConfiguration {}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>5138-1618920122939</coId><text/><inline-styles/><styles><line-height>1.5</line-height></styles></para><para><coId>4218-1618920123098</coId><text/><inline-styles/><styles/></para><para><coId>5059-1618919178254</coId><text>配置文件的相关属性和xxx进行了绑定。WebMvcProperties==spring.mvc、ResourceProperties==spring.resources</text><inline-styles><bold><from>37</from><to>47</to><value>true</value></bold><bold><from>68</from><to>84</to><value>true</value></bold></inline-styles><styles/></para><para><coId>2382-1618920242989</coId><text/><inline-styles/><styles/></para><para><coId>6073-1618920243182</coId><text/><inline-styles/><styles/></para><heading compat="true" level="2"><coId>3880-1618919178621</coId><text>1、配置类只有一个有参构造器 </text><inline-styles><bold><from>0</from><to>15</to><value>true</value></bold><font-size><from>0</from><to>15</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#404040</value></color></inline-styles><styles/></heading><code><coId>7288-1618920222945</coId><text>//有参构造器所有参数的值都会从容器中确定
//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象
//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象
//ListableBeanFactory beanFactory Spring的beanFactory
//HttpMessageConverters 找到所有的HttpMessageConverters
//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========
//DispatcherServletPath  
//ServletRegistrationBean   给应用注册Servlet、Filter....
    public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,
                ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,
                ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,
                ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,
                ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations) {
            this.resourceProperties = resourceProperties;
            this.mvcProperties = mvcProperties;
            this.beanFactory = beanFactory;
            this.messageConvertersProvider = messageConvertersProvider;
            this.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();
            this.dispatcherServletPath = dispatcherServletPath;
            this.servletRegistrations = servletRegistrations;
        }

</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>6259-1618919178896</coId><text/><inline-styles/><styles/></heading><heading compat="true" level="2"><coId>1597-1618919179118</coId><text>2、资源处理的默认规则</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>11</to><value>20</value></font-size><color><from>0</from><to>11</to><value>#404040</value></color></inline-styles><styles><line-height>1.5</line-height></styles></heading><code><coId>5645-1618920780797</coId><text> @override
   public void addResourceHandlers(ResourceHandlerRegistry registry) {
            if (!this.resourceProperties.isAddMappings()) {
                logger.debug("Default resource handling disabled");
                return;
            }
            Duration cachePeriod = this.resourceProperties.getCache().getPeriod();
            CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();
            //webjars的规则
            if (!registry.hasMappingForPattern("/webjars/**")) {
                customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**")
                        .addResourceLocations("classpath:/META-INF/resources/webjars/")
                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
            }
            //静态资源默认路径
            String staticPathPattern = this.mvcProperties.getStaticPathPattern();
            if (!registry.hasMappingForPattern(staticPathPattern)) {
                customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)
                        .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))
                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
            }
        }
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>5715-1618920803759</coId><text>yaml：</text><inline-styles><font-size><from>0</from><to>5</to><value>16</value></font-size></inline-styles><styles/></para><code><coId>4856-1618920803759</coId><text>spring:
#  mvc:
#    static-path-pattern: /res/**

  resources:
    add-mappings: false   禁用所有静态资源规则
    cache:
        period:1100 设置缓存失效时间
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>8494-1618921407855</coId><text/><inline-styles/><styles/></para><code><coId>6055-1618921407855</coId><text>@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)
public class ResourceProperties {

    private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { "classpath:/META-INF/resources/",
            "classpath:/resources/", "classpath:/static/", "classpath:/public/" };

    /**
     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,
     * /resources/, /static/, /public/].
     */
    private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><heading compat="true" level="2"><coId>1125-1618921407855</coId><text/><inline-styles/><styles><line-height>1.5</line-height></styles></heading><heading compat="true" level="2"><coId>1070-1618921437441</coId><text>3、欢迎页的处理规则</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>20</value></font-size><color><from>0</from><to>10</to><value>#404040</value></color></inline-styles><styles/></heading><code><coId>6440-1618922887513</coId><text>HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。  

    @Bean
        public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,
                FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {
            WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(
                    new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),
                    this.mvcProperties.getStaticPathPattern());
            welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));
            welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());
            return welcomePageHandlerMapping;
        }
//WelcomePageHandlerMapping：
    WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,
            ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) {
        if (welcomePage.isPresent() &amp;&amp; "/**".equals(staticPathPattern)) {
            //要用欢迎页功能，必须是/**
            logger.info("Adding welcome page: " + welcomePage.get());
            setRootViewName("forward:index.html");
        }
        else if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {
            // 调用Controller 查找谁能处理 /index请求
            logger.info("Adding welcome page template: index");
            setRootViewName("index");
        }
}
</text><inline-styles/><styles/><language>java</language><theme>tomorrow</theme></code><para><coId>8225-1618921428429</coId><text/><inline-styles/><styles><line-height>1.5</line-height></styles></para><para><coId>2340-1618921428460</coId><text/><inline-styles/><styles><line-height>1.5</line-height></styles></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><heading compat="true" level="1"><coId>7222-1599886772308</coId><text>指令标识：</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>28</value></font-size></inline-styles><styles/></heading><heading compat="true" level="2"><coId>7265-1599896864414</coId><text>page指定的属性：</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>4140-1599889249528</coId><text>language：jsp页面使用的脚本语言		import：导入类	pageEncoding：jsp文件自身编码	contentType:浏览器解析jsp编码</text><inline-styles/><styles/></para><heading compat="true" level="2"><coId>7037-1599896870083</coId><text>include指令：</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>4625-1599896918224</coId><text>&lt;%@ include file="path" %&gt;</text><inline-styles/><styles/></para><heading compat="true" level="2"><coId>9044-1599896986991</coId><text>taglib指令：</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>7451-1606201667571</coId><text>通过taglib指令标识声明该页面所使用的标签库，同时引用标签库，并指定标签的前缀</text><inline-styles/><styles/></para><para><coId>1849-1606201754318</coId><text>&lt;%@ taglib prefix="c" url="" %&gt;</text><inline-styles/><styles/></para><horizontal-line><coId>9492-1599896983810</coId><styles/></horizontal-line><heading compat="true" level="1"><coId>7060-1599889237865</coId><text>脚本标识：</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>28</value></font-size></inline-styles><styles/></heading><heading compat="true" level="2"><coId>6388-1599897004634</coId><text>JSP的页面元素：</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>5910-1599886813365</coId><text>①、&lt;%   局部变量，Java语句   %&gt; 代码片段</text><inline-styles/><styles/></para><para><coId>4686-1599886853283</coId><text>②、&lt;%!   全局变量，定义方法    %&gt;  声明标识</text><inline-styles/><styles/></para><para><coId>5033-1599886891630</coId><text>③、&lt;%=   输出        %&gt; jsp表达式</text><inline-styles/><styles/></para><horizontal-line><coId>8970-1599897565907</coId><styles/></horizontal-line><heading compat="true" level="3"><coId>8039-1599888378531</coId><text>jsp内换行需要使用HTML代码，out.println("&lt;font color="red"&gt;heklo&lt;/font&gt;"+"&lt;br/&gt;");</text><inline-styles><bold><from>0</from><to>71</to><value>true</value></bold><font-size><from>0</from><to>71</to><value>16</value></font-size></inline-styles><styles/></heading><para><coId>8783-1599889353687</coId><text>&lt;%-- jsp注释 --%&gt;</text><inline-styles/><styles/></para><heading compat="true" level="1"><coId>2220-1599896702560</coId><text>JSP动作标识：</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>28</value></font-size></inline-styles><styles/></heading><para><coId>5059-1599896809604</coId><text>包含文本标识：&lt;jsp:include page="" 【flush="是否刷新缓冲区"】【子动作标识】/&gt;</text><inline-styles/><styles/></para><para><coId>6849-1599897628858</coId><text>请求转发标识；&lt;jsp:forward page="url"/&gt;或&lt;jsp:forward page="url"&gt;子动作标识&lt;jsp:param&gt;&lt;/jsp:forward&gt;</text><inline-styles><bold><from>32</from><to>33</to><value>true</value></bold><underline><from>32</from><to>33</to><value>true</value></underline><color><from>32</from><to>33</to><value>#df402a</value></color></inline-styles><styles/></para><para><coId>1153-1599898702497</coId><text>传递参数标识: &lt;jsp:param name="参数名" value="参数值"/&gt;</text><inline-styles/><styles/></para><horizontal-line><coId>5758-1599897601156</coId><styles/></horizontal-line><heading compat="true" level="1"><coId>3980-1599889494518</coId><text/><inline-styles/><styles/></heading><horizontal-line><coId>1891-1599897603037</coId><styles/></horizontal-line><heading compat="true" level="1"><coId>8942-1599897603037</coId><text>jsp九大内置对象：</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>28</value></font-size></inline-styles><styles/></heading><heading compat="true" level="4"><coId>5010-1599889515959</coId><text>out输出对象：向客户端输出</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><color><from>0</from><to>14</to><value>#2c859d</value></color></inline-styles><styles/></heading><para><coId>7591-1600333986880</coId><text>out.print("");</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>9412-1600334002248</coId><text>out.println("");</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7680-1600334648597</coId><text>out对象也可进行缓冲区管理：</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>1516-1600334747725</coId><text>clear();清除缓冲区的内容</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>4440-1600334763439</coId><text>clearBuffer();清除缓冲区的内容</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7391-1600334771187</coId><text>flush();刷新流</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>6030-1600334777079</coId><text>isAutoFlush();检测当前是否清空，还是抛出异常</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>2826-1600334785423</coId><text>getBufferSize();获取缓冲区的大小</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><heading compat="true" level="4"><coId>8213-1599889529117</coId><text>request：请求对象，存储客户端向服务端发送的请求</text><inline-styles><bold><from>0</from><to>27</to><value>true</value></bold><color><from>0</from><to>27</to><value>#2c859d</value></color></inline-styles><styles/></heading><para><coId>1361-1599889630736</coId><text>String getParameter(String name)：更具请求的字段名key，返回字段值value</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7360-1599889664069</coId><text>String[] getParameterValues(String name)；</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7869-1599889777925</coId><text>void setCharacterEncoding("编码格式"-);设置请求编码,只能设置post方式的编码</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>5766-1599889842767</coId><text>getRequestDisprtcher(String url).forward(request,response);：请求转发,可以获取之前的页面，而且地址保留转发时的页面</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>9060-1599889912337</coId><text>ServletContext getServerContext()：获取项目的ServletContext对象</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>6684-1599900710119</coId><text>setAttribute(String name,Object obj);将数据保存到request范围内的变量中</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7290-1599901684240</coId><text>getLocale();显示国际化信息，java.util.Locale，java.util.Locale.China</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>8956-1599902603487</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>5982-1599893387600</coId><text>提交方式：①get提交方式：method="get"和地址栏、超链接请求方式 默认都输有get提交方式，数据泄露，大小限制（4·5kb）request请求编码不一致出现乱码，可以为每一个变量的编码newstring转换，也可修改server.xml文件中额Connector标签添加URIEncoding="utf-8"</text><inline-styles><color><from>0</from><to>5</to><value>#df402a</value></color></inline-styles><styles/></para><para><coId>5023-1599893513641</coId><text>②post提交方式：</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>2869-1599902606478</coId><text/><inline-styles/><styles><text-indent>2</text-indent></styles></para><heading compat="true" level="4"><coId>9559-1599895512017</coId><text>response：响应对象 </text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><color><from>0</from><to>14</to><value>#2c859d</value></color></inline-styles><styles/></heading><para><coId>3065-1599898834738</coId><text>void addCookie(Coolie cookie);服务器向客户端增加cookie对象</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7412-1599898903110</coId><text>void sendRedirect(String url) throws IOException;页面跳转的一种方式（重定向会导致数据丢失）</text><inline-styles><font-size><from>58</from><to>70</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>8023-1599899067286</coId><text>void setContextType(String type);设置服务端响应编码</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7071-1599902685201</coId><text>禁用缓存：response.setHeader("Cache-Control","no-store");</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7983-1599902718005</coId><text>  		  response.setDateHeader("Expires,0");</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>5535-1599902792494</coId><text>设置页面自动刷新：response.setHeader("refresh","10");</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>1492-1599902854721</coId><text>定时跳转网页：response.setHeader("refresh","5";URL="login.jsp")</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>2863-1599902802798</coId><text>服务器输出到客户端的内容会先写到一个输出缓冲区中</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>7350-1599903003743</coId><text>response.setBufferSize(0);//0kb表示不缓冲</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>1464-1599903036431</coId><text>flushBuffer();强制将缓冲区的内容输出到客户端</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>4948-1599903070485</coId><text>getBufferSize()；获取缓冲区的大小</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>6597-1599903103806</coId><text>reset();清除缓冲区的内容，同时清除状态码和报头</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>3620-1599903157346</coId><text>isCommitted();检测服务器是否已经把数据写到了客户端</text><inline-styles/><styles><text-indent>2</text-indent></styles></para><para><coId>4360-1599902070255</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>5010-1599903431483</coId><text>Cookie是由服务端产生的，发送给客户端保存。相当于本地缓存的作用</text><inline-styles><color><from>0</from><to>6</to><value>#df402a</value></color></inline-styles><styles/></para><para><coId>2838-1599903582661</coId><text>Cookie：key-&gt;value		javax.servlet.http.Cookie</text><inline-styles/><styles/></para><para><coId>3740-1599902074613</coId><text>public Cookie(String name,String value)</text><inline-styles/><styles/></para><para><coId>3178-1599903885710</coId><text>String getName()；获取name	</text><inline-styles/><styles/></para><para><coId>9022-1599903895092</coId><text>String getValue()；获取value</text><inline-styles/><styles/></para><para><coId>7054-1599903903831</coId><text>void setMaxAge(int expiry);最大有效期(秒)</text><inline-styles/><styles/></para><para><coId>9986-1599904014872</coId><text>放置 response.addCookie(Cookie cookie)</text><inline-styles/><styles/></para><para><coId>1097-1599905880960</coId><text>获取 request.getCookies();只能获取全部的cookie</text><inline-styles/><styles/></para><para><coId>6053-1599909396764</coId><text>每个cookie都有自带的JSESSIONID</text><inline-styles/><styles/></para><para><coId>1841-1600225389850</coId><text/><inline-styles/><styles/></para><heading compat="true" level="4"><coId>5722-1599903778463</coId><text>session会话对象（服务端）</text><inline-styles><bold><from>0</from><to>16</to><value>true</value></bold><color><from>0</from><to>16</to><value>#2c859d</value></color></inline-styles><styles/></heading><para><coId>9221-1600225391543</coId><text>session存储在服务端</text><inline-styles/><styles/></para><para><coId>7021-1600225418727</coId><text>session在同一个用户请求时共享</text><inline-styles/><styles/></para><para><coId>5542-1600225441400</coId><text>当用户第一次请求时产生一个session并赋值给cookie的JSESSIONID发送给客户端</text><inline-styles/><styles/></para><para><coId>8575-1599902074680</coId><text/><inline-styles/><styles/></para><para><coId>5870-1600225653708</coId><text>String getId() 获取sessionId</text><inline-styles/><styles/></para><para><coId>4286-1600225700574</coId><text>boolean isNew() 判断是否是新用户</text><inline-styles/><styles/></para><para><coId>7640-1600225722009</coId><text>void invalidate() 使session失效</text><inline-styles/><styles/></para><para><coId>9117-1599902078533</coId><text>setAttribute(String name,Object obj);将信息保存在session范围内</text><inline-styles/><styles/></para><para><coId>4033-1600225811866</coId><text>getAttribute();获取保存在session范围内的信息，返回值是object，需要toString转换</text><inline-styles/><styles/></para><para><coId>6176-1599902078707</coId><text>setMaxInactiveInterval(秒); 设置最大有效非活动时间</text><inline-styles/><styles/></para><para><coId>4043-1599902078868</coId><text/><inline-styles/><styles/></para><para><coId>41wgbl1600415851939</coId><text>session的钝化和活化：</text><inline-styles><italic><from>0</from><to>14</to><value>true</value></italic></inline-styles><styles/></para><para><coId>9310-1606983890955</coId><text>钝化：内存-&gt;硬盘</text><inline-styles/><styles/></para><para><coId>6946-1606983902798</coId><text>活化：硬盘-&gt;内存</text><inline-styles/><styles/></para><para><coId>7425-1606983922792</coId><text>session对象的四种状态：</text><inline-styles><italic><from>0</from><to>15</to><value>true</value></italic></inline-styles><styles/></para><para><coId>0012-1606983939757</coId><text>绑定：session.setAttribute("a",xxx);</text><inline-styles/><styles/></para><para><coId>8857-1606984075262</coId><text>解绑：session.removeAttribute("a");</text><inline-styles/><styles/></para><para><coId>9921-1606984098749</coId><text>钝化</text><inline-styles/><styles/></para><para><coId>4825-1606984102567</coId><text>活化</text><inline-styles/><styles/></para><para><coId>4420-1606983919550</coId><text>监听绑定和解绑：HttpSessionBindingListener</text><inline-styles/><styles/></para><para><coId>3638-1606984151299</coId><text>监听活化和钝化：HttpSessionActivationListener</text><inline-styles/><styles/></para><para><coId>3154-1606983919727</coId><text>https://blog.csdn.net/qq_43635212/article/details/104426539</text><inline-styles><underline><from>0</from><to>59</to><value>true</value></underline><color><from>0</from><to>59</to><value>#003884</value></color><href><from>0</from><to>59</to><value>https://blog.csdn.net/qq_43635212/article/details/104426539</value></href></inline-styles><styles/></para><para><coId>7075-1606983919910</coId><text/><inline-styles/><styles/></para><para><coId>27dknx1600416081254</coId><text>application 全局对象</text><inline-styles><color><from>0</from><to>16</to><value>#2c859d</value></color></inline-styles><styles/></para><para><coId>3070-1599902074716</coId><text>String getContextPath();虚拟路径</text><inline-styles/><styles/></para><para><coId>8079-1602751417571</coId><text>String getRealPath(String 虚拟路径);绝对路径，虚拟路径相对的绝对路径</text><inline-styles/><styles/></para><para><coId>4485-1599902074747</coId><text/><inline-styles/><styles/></para><para><coId>3022-1599902074782</coId><text/><inline-styles/><styles/></para><para><coId>2657-1599902074814</coId><text>config配置对象</text><inline-styles><color><from>0</from><to>10</to><value>#2c859d</value></color></inline-styles><styles/></para><para><coId>7054-1602760399981</coId><text>page当前jsp页面对象（相当于java的this）</text><inline-styles><color><from>0</from><to>27</to><value>#2c859d</value></color></inline-styles><styles/></para><para><coId>2613-1602760412793</coId><text>exception异常对象</text><inline-styles><color><from>0</from><to>13</to><value>#2c859d</value></color></inline-styles><styles/></para><image><coId>9550-1599902066255</coId><source>https://note.youdao.com/yws/res/9208/E6E0261349DF4B718084DDE93C66451F</source><text/><styles><width>620</width><height>135</height></styles></image><para><coId>8010-1599902066255</coId><text>四大域对象：</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><italic><from>0</from><to>6</to><value>true</value></italic><underline><from>0</from><to>6</to><value>true</value></underline><color><from>0</from><to>6</to><value>#df402a</value></color></inline-styles><styles/></para><image><coId>9446-1610962819452</coId><source>https://note.youdao.com/yws/res/9366/419BBAD4AABE4D4284371AC5878178B0</source><text/><styles><width>620</width><height>215</height></styles></image><para><coId>5639-1611111936547</coId><text/><inline-styles/><styles/></para><image><coId>9557-1611111936547</coId><source>https://note.youdao.com/yws/res/10630/6AB67EE22C45403B88117A658520E894</source><text/><styles><width>620</width><height>295</height></styles></image><para><coId>1220-1610962849256</coId><text>1、request对象</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1056-1616760152750</coId><text>request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。</text><inline-styles><font-size><from>0</from><to>134</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9032-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>8352-1616760152750</coId><text>2、response对象</text><inline-styles><font-size><from>0</from><to>12</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3365-1616760152750</coId><text>response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。</text><inline-styles><font-size><from>0</from><to>72</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5676-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>6061-1616760152750</coId><text>3、session对象</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3774-1616760152750</coId><text>session 对象是由服务器自动创建的与用户请求相关的对象。服务器为每个用户都生成一个session对象，用于保存该用户的信息，跟踪用户的操作状态。session对象内部使用Map类来保存数据，因此保存数据的格式为 “Key/value”。 session对象的value可以使复杂的对象类型，而不仅仅局限于字符串类型。</text><inline-styles><font-size><from>0</from><to>161</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9370-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>4925-1616760152750</coId><text>4、application对象</text><inline-styles><font-size><from>0</from><to>15</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6682-1616760152750</coId><text> application 对象可将信息保存在服务器中，直到服务器关闭，否则application对象中保存的信息会在整个应用中都有效。与session对象相比，application对象生命周期更长，类似于系统的“全局变量”。</text><inline-styles><font-size><from>0</from><to>113</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5737-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>9684-1616760152750</coId><text>5、out 对象</text><inline-styles><font-size><from>0</from><to>8</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5362-1616760152750</coId><text>out 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。</text><inline-styles><font-size><from>0</from><to>112</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6866-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>3210-1616760152750</coId><text>6、pageContext 对象</text><inline-styles><font-size><from>0</from><to>16</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2989-1616760152750</coId><text>pageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。</text><inline-styles><font-size><from>0</from><to>144</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3862-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>2163-1616760152750</coId><text>7、config 对象</text><inline-styles><font-size><from>0</from><to>11</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3695-1616760152750</coId><text>config 对象的主要作用是取得服务器的配置信息。通过 pageConext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。</text><inline-styles><font-size><from>0</from><to>177</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>2470-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>2228-1616760152750</coId><text>8、page 对象</text><inline-styles><font-size><from>0</from><to>9</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1781-1616760152750</coId><text>page 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。</text><inline-styles><font-size><from>0</from><to>82</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7691-1616760152750</coId><text/><inline-styles/><styles/></para><para><coId>6300-1616760152750</coId><text>9、exception 对象</text><inline-styles><font-size><from>0</from><to>14</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1890-1616760152750</coId><text>exception 对象的作用是显示异常信息，只有在包含 isErrorPage="true" 的页面中才可以被使用，在一般的JSP页面中使用该对象将无法编译JSP文件。excepation对象和Java的所有对象一样，都具有系统提供的继承结构。exception 对象几乎定义了所有异常情况。在Java程序中，可以使用try/catch关键字来处理异常情况； 如果在JSP页面中出现没有捕获到的异常，就会生成 exception 对象，并把 exception 对象传送到在page指令中设定的错误页面中，然后在错误页面中处理相应的 exception 对象。</text><inline-styles><font-size><from>0</from><to>281</to><value>16</value></font-size></inline-styles><styles/></para><horizontal-line><coId>5098-1610962851702</coId><styles/></horizontal-line><para><coId>6534-1610962854162</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>7776-1610962854162</coId><styles/></horizontal-line><heading compat="true" level="1"><coId>5380-1610962854162</coId><text>JSP包含页面：</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>28</value></font-size></inline-styles><styles/></heading><heading compat="true" level="2"><coId>2155-1610962924433</coId><text>静态包含</text><inline-styles><bold><from>0</from><to>4</to><value>true</value></bold><font-size><from>0</from><to>4</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>8617-1610962894246</coId><text>&lt;%@ include file=""%&gt;</text><inline-styles/><styles/></para><para><coId>5410-1610962930945</coId><text>静态包含的特点： 1、静态包含不会翻译被包含的 jsp 页面。 2、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。</text><inline-styles/><styles/></para><heading compat="true" level="2"><coId>4053-1610962939906</coId><text>动态包含</text><inline-styles><bold><from>0</from><to>4</to><value>true</value></bold><font-size><from>0</from><to>4</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>0046-1610962980459</coId><text>&lt;jsp:include page=""&gt;</text><inline-styles/><styles/></para><para><coId>2397-1610963269307</coId><text>&lt;jsp:param name="username" value="bbj"/&gt;</text><inline-styles><bold><from>1</from><to>38</to><value>true</value></bold><font-size><from>0</from><to>40</to><value>13</value></font-size><color><from>1</from><to>4</to><value>#660e7a</value></color><color><from>4</from><to>11</to><value>#000080</value></color><color><from>11</from><to>15</to><value>#0000ff</value></color><color><from>15</from><to>27</to><value>#008000</value></color><color><from>27</from><to>32</to><value>#0000ff</value></color><color><from>32</from><to>38</to><value>#008000</value></color></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>6878-1610963270200</coId><text>&lt;/jsp:include&gt;</text><inline-styles/><styles/></para><para><coId>9754-1610963160412</coId><text>动态包含的特点： </text><inline-styles/><styles/></para><para><coId>3869-1610963164928</coId><text>1、动态包含会把包含的 jsp 页面也翻译成为 java 代码</text><inline-styles/><styles/></para><para><coId>5570-1610963167060</coId><text>2、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出</text><inline-styles/><styles/></para><para><coId>8720-1610963234063</coId><text>JspRuntimeLibrary.include(request, response, "/include/footer.jsp", out, false);</text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>8053-1610963186527</coId><text>3、动态包含，还可以传递参数</text><inline-styles/><styles/></para><heading compat="true" level="2"><coId>8720-1610963073220</coId><text>标签转发</text><inline-styles><bold><from>0</from><to>4</to><value>true</value></bold><font-size><from>0</from><to>4</to><value>20</value></font-size></inline-styles><styles/></heading><para><coId>6866-1610963075243</coId><text>&lt;jsp:forward page=""&gt;&lt;/jsp:forward&gt;</text><inline-styles/><styles/></para><para><coId>1260-1610963075393</coId><text/><inline-styles/><styles/></para><para><coId>4278-1610963075529</coId><text/><inline-styles/><styles/></para><para><coId>8130-1610963075665</coId><text/><inline-styles/><styles/></para></body></note>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>4777-1640698058819</coId><text>熔断机制概述</text><inline-styles><font-size><from>0</from><to>6</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>3149-1640698167619</coId><text>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时,会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。</text><inline-styles><font-size><from>0</from><to>85</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1510-1640698167831</coId><text>当检测到该节点微服务调用响应正常后，恢复调用链路。</text><inline-styles><font-size><from>0</from><to>25</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>8460-1640698167831</coId><text>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，</text><inline-styles><font-size><from>0</from><to>53</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>6330-1640698167831</coId><text>当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand。</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9989-1640746918796</coId><text/><inline-styles/><styles/></para><para><coId>2275-1640746918936</coId><text>1、修改paymentservice</text><inline-styles><font-size><from>0</from><to>18</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>5620-1640746871331</coId><resource-list/><content>{"cells":[{"value":"//服务熔断\n@HystrixCommand(fallbackMethod = \"paymentCircuitBreaker_fallback\",commandProperties = {\n        @HystrixProperty(name = \"circuitBreaker.enabled\",value = \"true\"),//是否开启断路器\n        @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\",value = \"10\"),//请求次数\n        @HystrixProperty(name = \"circuitBreaker.sleepWindowInMilliseconds\",value = \"10000\"),//时间窗接口期\n        @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\",value = \"60\"),//失败率达到value时开启熔断\n})\npublic String paymentCircuitBreaker(@PathVariable(value = \"id\") Integer id){\n    if(id&lt;0){\n        throw new RuntimeException(\"*****id不能为负数\");\n    }\n    String serialNumber= IdUtil.simpleUUID();\n    return Thread.currentThread().getName()+\"\\t\"+\"调用成功流水号\"+serialNumber;\n}\npublic String paymentCircuitBreaker_fallback(@PathVariable(value = \"id\") Integer id){\n    return \"请稍后再试(*^▽^*)\";\n}","inlineStyles":{"italic":[{"from":662,"to":672,"value":true},{"from":694,"to":707,"value":true}],"font-family":[{"from":2,"to":6,"value":"SimSun"},{"from":170,"to":177,"value":"SimSun"},{"from":178,"to":186,"value":"SimSun"},{"from":266,"to":270,"value":"SimSun"},{"from":271,"to":279,"value":"SimSun"},{"from":365,"to":371,"value":"SimSun"},{"from":372,"to":380,"value":"SimSun"},{"from":462,"to":467,"value":"SimSun"},{"from":472,"to":477,"value":"SimSun"},{"from":615,"to":620,"value":"SimSun"},{"from":726,"to":733,"value":"SimSun"},{"from":849,"to":854,"value":"SimSun"},{"from":857,"to":858,"value":"SimSun"}],"font-size":[{"from":0,"to":6,"value":13},{"from":7,"to":94,"value":13},{"from":95,"to":177,"value":13},{"from":178,"to":270,"value":13},{"from":271,"to":371,"value":13},{"from":372,"to":477,"value":13},{"from":478,"to":480,"value":13},{"from":481,"to":557,"value":13},{"from":558,"to":571,"value":13},{"from":572,"to":623,"value":13},{"from":624,"to":629,"value":13},{"from":630,"to":675,"value":13},{"from":676,"to":748,"value":13},{"from":749,"to":750,"value":13},{"from":751,"to":836,"value":13},{"from":837,"to":863,"value":13},{"from":864,"to":865,"value":13}],"color":[{"from":0,"to":6,"value":"#808080"},{"from":7,"to":22,"value":"#bbb529"},{"from":22,"to":40,"value":"#a9b7c6"},{"from":40,"to":72,"value":"#6a8759"},{"from":72,"to":73,"value":"#cc7832"},{"from":73,"to":94,"value":"#a9b7c6"},{"from":95,"to":103,"value":"#a9b7c6"},{"from":103,"to":119,"value":"#bbb529"},{"from":119,"to":127,"value":"#a9b7c6"},{"from":127,"to":151,"value":"#6a8759"},{"from":151,"to":152,"value":"#cc7832"},{"from":152,"to":160,"value":"#a9b7c6"},{"from":160,"to":166,"value":"#6a8759"},{"from":166,"to":167,"value":"#a9b7c6"},{"from":167,"to":168,"value":"#cc7832"},{"from":168,"to":177,"value":"#808080"},{"from":178,"to":186,"value":"#808080"},{"from":186,"to":202,"value":"#bbb529"},{"from":202,"to":210,"value":"#a9b7c6"},{"from":210,"to":249,"value":"#6a8759"},{"from":249,"to":250,"value":"#cc7832"},{"from":250,"to":258,"value":"#a9b7c6"},{"from":258,"to":262,"value":"#6a8759"},{"from":262,"to":263,"value":"#a9b7c6"},{"from":263,"to":264,"value":"#cc7832"},{"from":264,"to":270,"value":"#808080"},{"from":271,"to":279,"value":"#808080"},{"from":279,"to":295,"value":"#bbb529"},{"from":295,"to":303,"value":"#a9b7c6"},{"from":303,"to":345,"value":"#6a8759"},{"from":345,"to":346,"value":"#cc7832"},{"from":346,"to":354,"value":"#a9b7c6"},{"from":354,"to":361,"value":"#6a8759"},{"from":361,"to":362,"value":"#a9b7c6"},{"from":362,"to":363,"value":"#cc7832"},{"from":363,"to":371,"value":"#808080"},{"from":372,"to":380,"value":"#808080"},{"from":380,"to":396,"value":"#bbb529"},{"from":396,"to":404,"value":"#a9b7c6"},{"from":404,"to":445,"value":"#6a8759"},{"from":445,"to":446,"value":"#cc7832"},{"from":446,"to":454,"value":"#a9b7c6"},{"from":454,"to":458,"value":"#6a8759"},{"from":458,"to":459,"value":"#a9b7c6"},{"from":459,"to":460,"value":"#cc7832"},{"from":460,"to":477,"value":"#808080"},{"from":478,"to":480,"value":"#a9b7c6"},{"from":481,"to":488,"value":"#cc7832"},{"from":488,"to":495,"value":"#a9b7c6"},{"from":495,"to":516,"value":"#ffc66d"},{"from":516,"to":517,"value":"#a9b7c6"},{"from":517,"to":530,"value":"#bbb529"},{"from":530,"to":539,"value":"#a9b7c6"},{"from":539,"to":543,"value":"#6a8759"},{"from":543,"to":557,"value":"#a9b7c6"},{"from":558,"to":562,"value":"#a9b7c6"},{"from":562,"to":564,"value":"#cc7832"},{"from":564,"to":568,"value":"#a9b7c6"},{"from":568,"to":569,"value":"#6897bb"},{"from":569,"to":571,"value":"#a9b7c6"},{"from":572,"to":580,"value":"#a9b7c6"},{"from":580,"to":590,"value":"#cc7832"},{"from":590,"to":607,"value":"#a9b7c6"},{"from":607,"to":621,"value":"#6a8759"},{"from":621,"to":622,"value":"#a9b7c6"},{"from":622,"to":623,"value":"#cc7832"},{"from":624,"to":628,"value":"#cc7832"},{"from":628,"to":629,"value":"#a9b7c6"},{"from":630,"to":674,"value":"#a9b7c6"},{"from":674,"to":675,"value":"#cc7832"},{"from":676,"to":687,"value":"#cc7832"},{"from":687,"to":720,"value":"#a9b7c6"},{"from":720,"to":721,"value":"#6a8759"},{"from":721,"to":723,"value":"#cc7832"},{"from":723,"to":724,"value":"#6a8759"},{"from":724,"to":725,"value":"#a9b7c6"},{"from":725,"to":734,"value":"#6a8759"},{"from":734,"to":747,"value":"#a9b7c6"},{"from":747,"to":748,"value":"#cc7832"},{"from":749,"to":750,"value":"#a9b7c6"},{"from":751,"to":758,"value":"#cc7832"},{"from":758,"to":765,"value":"#a9b7c6"},{"from":765,"to":795,"value":"#ffc66d"},{"from":795,"to":796,"value":"#a9b7c6"},{"from":796,"to":809,"value":"#bbb529"},{"from":809,"to":818,"value":"#a9b7c6"},{"from":818,"to":822,"value":"#6a8759"},{"from":822,"to":836,"value":"#a9b7c6"},{"from":837,"to":841,"value":"#a9b7c6"},{"from":841,"to":848,"value":"#cc7832"},{"from":848,"to":862,"value":"#6a8759"},{"from":862,"to":863,"value":"#cc7832"},{"from":864,"to":865,"value":"#a9b7c6"}],"back-color":[{"from":0,"to":6,"value":"#2b2b2b"},{"from":7,"to":94,"value":"#2b2b2b"},{"from":95,"to":177,"value":"#2b2b2b"},{"from":178,"to":270,"value":"#2b2b2b"},{"from":271,"to":371,"value":"#2b2b2b"},{"from":372,"to":477,"value":"#2b2b2b"},{"from":478,"to":480,"value":"#2b2b2b"},{"from":481,"to":557,"value":"#2b2b2b"},{"from":558,"to":571,"value":"#2b2b2b"},{"from":572,"to":623,"value":"#2b2b2b"},{"from":624,"to":629,"value":"#2b2b2b"},{"from":630,"to":675,"value":"#2b2b2b"},{"from":676,"to":748,"value":"#2b2b2b"},{"from":749,"to":750,"value":"#2b2b2b"},{"from":751,"to":836,"value":"#2b2b2b"},{"from":837,"to":863,"value":"#2b2b2b"},{"from":864,"to":865,"value":"#2b2b2b"}]}}],"heights":[318.0799865722656],"widths":[620]}</content><styles/></table><para><coId>6272-1640698382913</coId><text>2、修改paymentController</text><inline-styles><font-size><from>0</from><to>21</to><value>16</value></font-size></inline-styles><styles/></para><table><coId>3915-1640747343600</coId><resource-list/><content>{"cells":[{"value":"//服务熔断\n@GetMapping(\"/payment/circuit/{id}\")\npublic String paymentCircuitBreaker(@PathVariable(value = \"id\") Integer id){\n    String result = paymentService.paymentCircuitBreaker(id);\n    log.info(\"****result:\"+result);\n    return result;\n}","inlineStyles":{"italic":[{"from":187,"to":190,"value":true}],"font-family":[{"from":2,"to":6,"value":"SimSun"}],"font-size":[{"from":0,"to":6,"value":13},{"from":7,"to":43,"value":13},{"from":44,"to":120,"value":13},{"from":121,"to":182,"value":13},{"from":183,"to":218,"value":13},{"from":219,"to":237,"value":13},{"from":238,"to":239,"value":13}],"color":[{"from":0,"to":6,"value":"#808080"},{"from":7,"to":18,"value":"#bbb529"},{"from":18,"to":19,"value":"#a9b7c6"},{"from":19,"to":42,"value":"#6a8759"},{"from":42,"to":43,"value":"#a9b7c6"},{"from":44,"to":51,"value":"#cc7832"},{"from":51,"to":58,"value":"#a9b7c6"},{"from":58,"to":79,"value":"#ffc66d"},{"from":79,"to":80,"value":"#a9b7c6"},{"from":80,"to":93,"value":"#bbb529"},{"from":93,"to":102,"value":"#a9b7c6"},{"from":102,"to":106,"value":"#6a8759"},{"from":106,"to":120,"value":"#a9b7c6"},{"from":121,"to":141,"value":"#a9b7c6"},{"from":141,"to":155,"value":"#9876aa"},{"from":155,"to":181,"value":"#a9b7c6"},{"from":181,"to":182,"value":"#cc7832"},{"from":183,"to":187,"value":"#cc7832"},{"from":187,"to":190,"value":"#9876aa"},{"from":190,"to":196,"value":"#a9b7c6"},{"from":196,"to":209,"value":"#6a8759"},{"from":209,"to":217,"value":"#a9b7c6"},{"from":217,"to":218,"value":"#cc7832"},{"from":219,"to":230,"value":"#cc7832"},{"from":230,"to":236,"value":"#a9b7c6"},{"from":236,"to":237,"value":"#cc7832"},{"from":238,"to":239,"value":"#a9b7c6"}],"back-color":[{"from":0,"to":6,"value":"#2b2b2b"},{"from":7,"to":43,"value":"#2b2b2b"},{"from":44,"to":120,"value":"#2b2b2b"},{"from":121,"to":182,"value":"#2b2b2b"},{"from":183,"to":218,"value":"#2b2b2b"},{"from":219,"to":237,"value":"#2b2b2b"},{"from":238,"to":239,"value":"#2b2b2b"}]}}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>1139-1640747343600</coId><text>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</text><inline-styles/><styles/></para><para><coId>1997-1640748502896</coId><text>熔断关闭：熔断关闭不会对服务进行熔断</text><inline-styles/><styles/></para><para><coId>1292-1640748502896</coId><text>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</text><inline-styles/><styles/></para><para><coId>5020-1640748721806</coId><text/><inline-styles/><styles/></para><para><coId>5312-1640748701161</coId><text>断路器开启或关闭的条件：</text><inline-styles/><styles/></para><para><coId>3864-1640748726123</coId><text>当满足一定的阀值的时候（默认10秒内超过20个请求次数)当失败率达到一定的时候（默认10秒内超过50%的请求失败)到达以上阀值，断路器将会开启</text><inline-styles/><styles/></para><para><coId>3494-1640748701753</coId><text>当开启的时候，所有请求都不会进行转发</text><inline-styles/><styles/></para><para><coId>5743-1640748701753</coId><text>一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5</text><inline-styles/><styles/></para><para><coId>6916-1640748755190</coId><text/><inline-styles/><styles/></para><para><coId>9093-1640748755342</coId><text/><inline-styles/><styles/></para><para><coId>1747-1640748795566</coId><text>1:再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</text><inline-styles><font-size><from>0</from><to>76</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>5885-1640748843724</coId><text>2:原来的主逻辑要如何恢复呢?</text><inline-styles><font-size><from>0</from><to>15</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1030-1640748843724</coId><text>对于这一问题，hystrix也为我们实现了自动恢复功能。</text><inline-styles><font-size><from>0</from><to>28</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>1517-1640748843724</coId><text>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，</text><inline-styles><font-size><from>0</from><to>58</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>7768-1640748843724</coId><text>当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</text><inline-styles><font-size><from>0</from><to>97</to><value>16</value></font-size></inline-styles><styles/></para><para><coId>9230-1640748843724</coId><text/><inline-styles/><styles/></para><para><coId>6449-1640748795598</coId><text/><inline-styles/><styles/></para><para><coId>7222-1640749340016</coId><text>高级配置：</text><inline-styles><strike><from>0</from><to>5</to><value>true</value></strike><font-size><from>0</from><to>5</to><value>16</value></font-size><back-color><from>0</from><to>5</to><value>#FAE220</value></back-color></inline-styles><styles/></para><table><coId>9165-1640749361969</coId><resource-list/><content>{"cells":[{"value":"//========================All\n@HystrixCommand(fallbackMethod = \"str_fallbackMethod\",\n        groupKey = \"strGroupCommand\",\n        commandKey = \"strCommand\",\n        threadPoolKey = \"strThreadPool\",\n\n        commandProperties = {\n                // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离\n                @HystrixProperty(name = \"execution.isolation.strategy\", value = \"THREAD\"),\n                // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）\n                @HystrixProperty(name = \"execution.isolation.semaphore.maxConcurrentRequests\", value = \"10\"),\n                // 配置命令执行的超时时间\n                @HystrixProperty(name = \"execution.isolation.thread.timeoutinMilliseconds\", value = \"10\"),\n                // 是否启用超时时间\n                @HystrixProperty(name = \"execution.timeout.enabled\", value = \"true\"),\n                // 执行超时的时候是否中断\n                @HystrixProperty(name = \"execution.isolation.thread.interruptOnTimeout\", value = \"true\"),\n                // 执行被取消的时候是否中断\n                @HystrixProperty(name = \"execution.isolation.thread.interruptOnCancel\", value = \"true\"),\n                // 允许回调方法执行的最大并发数\n                @HystrixProperty(name = \"fallback.isolation.semaphore.maxConcurrentRequests\", value = \"10\"),\n                // 服务降级是否启用，是否执行回调函数\n                @HystrixProperty(name = \"fallback.enabled\", value = \"true\"),\n                // 是否启用断路器\n                @HystrixProperty(name = \"circuitBreaker.enabled\", value = \"true\"),\n                // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，\n                // 如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。\n                @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"20\"),\n                // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过\n                // circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50,\n                // 就把断路器设置为 \"打开\" 状态，否则就设置为 \"关闭\" 状态。\n                @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"50\"),\n                // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，\n                // 会将断路器置为 \"半开\" 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 \"打开\" 状态，\n                // 如果成功就设置为 \"关闭\" 状态。\n                @HystrixProperty(name = \"circuitBreaker.sleepWindowinMilliseconds\", value = \"5000\"),\n                // 断路器强制打开\n                @HystrixProperty(name = \"circuitBreaker.forceOpen\", value = \"false\"),\n                // 断路器强制关闭\n                @HystrixProperty(name = \"circuitBreaker.forceClosed\", value = \"false\"),\n                // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间\n                @HystrixProperty(name = \"metrics.rollingStats.timeinMilliseconds\", value = \"10000\"),\n                // 该属性用来设置滚动时间窗统计指标信息时划分\"桶\"的数量，断路器在收集指标信息的时候会根据\n                // 设置的时间窗长度拆分成多个 \"桶\" 来累计各度量值，每个\"桶\"记录了一段时间内的采集指标。\n                // 比如 10 秒内拆分成 10 个\"桶\"收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常\n                @HystrixProperty(name = \"metrics.rollingStats.numBuckets\", value = \"10\"),\n                // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。\n                @HystrixProperty(name = \"metrics.rollingPercentile.enabled\", value = \"false\"),\n                // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。\n                @HystrixProperty(name = \"metrics.rollingPercentile.timeInMilliseconds\", value = \"60000\"),\n                // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。\n                @HystrixProperty(name = \"metrics.rollingPercentile.numBuckets\", value = \"60000\"),\n                // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，\n                // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，\n                // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。\n                @HystrixProperty(name = \"metrics.rollingPercentile.bucketSize\", value = \"100\"),\n                // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。\n                @HystrixProperty(name = \"metrics.healthSnapshot.intervalinMilliseconds\", value = \"500\"),\n                // 是否开启请求缓存\n                @HystrixProperty(name = \"requestCache.enabled\", value = \"true\"),\n                // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中\n                @HystrixProperty(name = \"requestLog.enabled\", value = \"true\"),\n        },\n        threadPoolProperties = {\n                // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量\n                @HystrixProperty(name = \"coreSize\", value = \"10\"),\n                // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，\n                // 否则将使用 LinkedBlockingQueue 实现的队列。\n                @HystrixProperty(name = \"maxQueueSize\", value = \"-1\"),\n                // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。\n                // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue\n                // 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。\n                @HystrixProperty(name = \"queueSizeRejectionThreshold\", value = \"5\"),\n        }\n)\npublic String strConsumer() {\n    return \"hello 2020\";\n}\npublic String str_fallbackMethod()\n{\n    return \"*****fall back str_fallbackMethod\";\n}\n \n"}],"heights":[40],"widths":[620]}</content><styles/></table><para><coId>9455-1640748795630</coId><text/><inline-styles/><styles/></para></body></note>